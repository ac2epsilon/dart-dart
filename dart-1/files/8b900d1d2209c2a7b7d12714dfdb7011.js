'use strict';
!function(global, factory) {
  if ("object" == typeof module && "object" == typeof module.exports) {
    module.exports = global.document ? factory(global, true) : function(type) {
      if (!type.document) {
        throw new Error("jQuery requires a window with a document");
      }
      return factory(type);
    };
  } else {
    factory(global);
  }
}("undefined" != typeof window ? window : this, function(window, zoomAware) {
  /**
   * @param {!Object} obj
   * @return {?}
   */
  function isArraylike(obj) {
    var length = !!obj && "length" in obj && obj.length;
    var type = jQuery.type(obj);
    return "function" === type || jQuery.isWindow(obj) ? false : "array" === type || 0 === length || "number" == typeof length && length > 0 && length - 1 in obj;
  }
  /**
   * @param {undefined} target
   * @param {string} event
   * @param {?} data
   * @return {?}
   */
  function filter(target, event, data) {
    if (jQuery.isFunction(event)) {
      return jQuery.grep(target, function(fn, step) {
        return !!event.call(fn, step, fn) !== data;
      });
    }
    if (event.nodeType) {
      return jQuery.grep(target, function(url) {
        return url === event !== data;
      });
    }
    if ("string" == typeof event) {
      if (hookRE.test(event)) {
        return jQuery.filter(event, target, data);
      }
      event = jQuery.filter(event, target);
    }
    return jQuery.grep(target, function(t) {
      return jQuery.inArray(t, event) > -1 !== data;
    });
  }
  /**
   * @param {string} elem
   * @param {string} dir
   * @return {?}
   */
  function sibling(elem, dir) {
    do {
      elem = elem[dir];
    } while (elem && 1 !== elem.nodeType);
    return elem;
  }
  /**
   * @param {string} options
   * @return {?}
   */
  function createOptions(options) {
    var subwikiListsCache = {};
    return jQuery.each(options.match(rnotwhite) || [], function(canCreateDiscussions, wikiId) {
      /** @type {boolean} */
      subwikiListsCache[wikiId] = true;
    }), subwikiListsCache;
  }
  /**
   * @return {undefined}
   */
  function detach() {
    if (document.addEventListener) {
      document.removeEventListener("DOMContentLoaded", handler);
      window.removeEventListener("load", handler);
    } else {
      document.detachEvent("onreadystatechange", handler);
      window.detachEvent("onload", handler);
    }
  }
  /**
   * @return {undefined}
   */
  function handler() {
    if (document.addEventListener || "load" === window.event.type || "complete" === document.readyState) {
      detach();
      jQuery.ready();
    }
  }
  /**
   * @param {!Object} elem
   * @param {!Object} key
   * @param {?} data
   * @return {?}
   */
  function dataAttr(elem, key, data) {
    if (void 0 === data && 1 === elem.nodeType) {
      var name = "data-" + key.replace(regAttr, "-$1").toLowerCase();
      if (data = elem.getAttribute(name), "string" == typeof data) {
        try {
          data = "true" === data ? true : "false" === data ? false : "null" === data ? null : +data + "" === data ? +data : JSON_START.test(data) ? jQuery.parseJSON(data) : data;
        } catch (i) {
        }
        jQuery.data(elem, key, data);
      } else {
        data = void 0;
      }
    }
    return data;
  }
  /**
   * @param {!Object} obj
   * @return {?}
   */
  function isEmptyDataObject(obj) {
    var index;
    for (index in obj) {
      if (("data" !== index || !jQuery.isEmptyObject(obj[index])) && "toJSON" !== index) {
        return false;
      }
    }
    return true;
  }
  /**
   * @param {!Object} elem
   * @param {!Object} name
   * @param {?} val
   * @param {boolean} data
   * @return {?}
   */
  function internalData(elem, name, val, data) {
    if (acceptData(elem)) {
      var style;
      var value;
      var internalKey = jQuery.expando;
      var isNode = elem.nodeType;
      var cache = isNode ? jQuery.cache : elem;
      var id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;
      if (id && cache[id] && (data || cache[id].data) || void 0 !== val || "string" != typeof name) {
        return id || (id = isNode ? elem[internalKey] = arr.pop() || jQuery.guid++ : internalKey), cache[id] || (cache[id] = isNode ? {} : {
          toJSON : jQuery.noop
        }), "object" != typeof name && "function" != typeof name || (data ? cache[id] = jQuery.extend(cache[id], name) : cache[id].data = jQuery.extend(cache[id].data, name)), value = cache[id], data || (value.data || (value.data = {}), value = value.data), void 0 !== val && (value[jQuery.camelCase(name)] = val), "string" == typeof name ? (style = value[name], null == style && (style = value[jQuery.camelCase(name)])) : style = value, style;
      }
    }
  }
  /**
   * @param {!Object} elem
   * @param {?} name
   * @param {!Function} pvt
   * @return {undefined}
   */
  function internalRemoveData(elem, name, pvt) {
    if (acceptData(elem)) {
      var thisCache;
      var i;
      var isNode = elem.nodeType;
      var cache = isNode ? jQuery.cache : elem;
      var id = isNode ? elem[jQuery.expando] : jQuery.expando;
      if (cache[id]) {
        if (name && (thisCache = pvt ? cache[id] : cache[id].data)) {
          if (jQuery.isArray(name)) {
            name = name.concat(jQuery.map(name, jQuery.camelCase));
          } else {
            if (name in thisCache) {
              /** @type {!Array} */
              name = [name];
            } else {
              name = jQuery.camelCase(name);
              name = name in thisCache ? [name] : name.split(" ");
            }
          }
          i = name.length;
          for (; i--;) {
            delete thisCache[name[i]];
          }
          if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) {
            return;
          }
        }
        if (pvt || (delete cache[id].data, isEmptyDataObject(cache[id]))) {
          if (isNode) {
            jQuery.cleanData([elem], true);
          } else {
            if (support.deleteExpando || cache != cache.window) {
              delete cache[id];
            } else {
              cache[id] = void 0;
            }
          }
        }
      }
    }
  }
  /**
   * @param {string} elem
   * @param {!Object} prop
   * @param {!Object} valueParts
   * @param {!Object} tween
   * @return {?}
   */
  function adjustCSS(elem, prop, valueParts, tween) {
    var adjusted;
    /** @type {number} */
    var scale = 1;
    /** @type {number} */
    var d = 20;
    /** @type {function(): ?} */
    var currentValue = tween ? function() {
      return tween.cur();
    } : function() {
      return jQuery.css(elem, prop, "");
    };
    var initial = currentValue();
    var unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px");
    var initialInUnit = (jQuery.cssNumber[prop] || "px" !== unit && +initial) && regex.exec(jQuery.css(elem, prop));
    if (initialInUnit && initialInUnit[3] !== unit) {
      unit = unit || initialInUnit[3];
      valueParts = valueParts || [];
      /** @type {number} */
      initialInUnit = +initial || 1;
      do {
        /** @type {(number|string)} */
        scale = scale || ".5";
        /** @type {number} */
        initialInUnit = initialInUnit / scale;
        jQuery.style(elem, prop, initialInUnit + unit);
      } while (scale !== (scale = currentValue() / initial) && 1 !== scale && --d);
    }
    return valueParts && (initialInUnit = +initialInUnit || +initial || 0, adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2], tween && (tween.unit = unit, tween.start = initialInUnit, tween.end = adjusted)), adjusted;
  }
  /**
   * @param {!Object} document
   * @return {?}
   */
  function createSafeFragment(document) {
    /** @type {!Array<string>} */
    var deadPool = componentsStr.split("|");
    var safeFrag = document.createDocumentFragment();
    if (safeFrag.createElement) {
      for (; deadPool.length;) {
        safeFrag.createElement(deadPool.pop());
      }
    }
    return safeFrag;
  }
  /**
   * @param {!Object} context
   * @param {?} tag
   * @return {?}
   */
  function getAll(context, tag) {
    var element;
    var elem;
    /** @type {number} */
    var name = 0;
    var r = "undefined" != typeof context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : "undefined" != typeof context.querySelectorAll ? context.querySelectorAll(tag || "*") : void 0;
    if (!r) {
      /** @type {!Array} */
      r = [];
      element = context.childNodes || context;
      for (; null != (elem = element[name]); name++) {
        if (!tag || jQuery.nodeName(elem, tag)) {
          r.push(elem);
        } else {
          jQuery.merge(r, getAll(elem, tag));
        }
      }
    }
    return void 0 === tag || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], r) : r;
  }
  /**
   * @param {number} elems
   * @param {!NodeList} refElements
   * @return {undefined}
   */
  function setGlobalEval(elems, refElements) {
    var elem;
    /** @type {number} */
    var i = 0;
    for (; null != (elem = elems[i]); i++) {
      jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval"));
    }
  }
  /**
   * @param {!Object} elem
   * @return {undefined}
   */
  function fixDefaultChecked(elem) {
    if (reg.test(elem.type)) {
      elem.defaultChecked = elem.checked;
    }
  }
  /**
   * @param {!Object} elems
   * @param {!Object} context
   * @param {!Array} element
   * @param {!Object} result
   * @param {!Object} ignored
   * @return {?}
   */
  function buildFragment(elems, context, element, result, ignored) {
    var j;
    var elem;
    var ret;
    var tmp;
    var tag;
    var tbody;
    var wrap;
    var length = elems.length;
    var safe = createSafeFragment(context);
    /** @type {!Array} */
    var nodes = [];
    /** @type {number} */
    var i = 0;
    for (; length > i; i++) {
      if (elem = elems[i], elem || 0 === elem) {
        if ("object" === jQuery.type(elem)) {
          jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
        } else {
          if (re_commas.test(elem)) {
            tmp = tmp || safe.appendChild(context.createElement("div"));
            tag = (GoogleImageLayout.exec(elem) || ["", ""])[1].toLowerCase();
            wrap = wrapMap[tag] || wrapMap._default;
            tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
            j = wrap[0];
            for (; j--;) {
              tmp = tmp.lastChild;
            }
            if (!support.leadingWhitespace && trueRE.test(elem) && nodes.push(context.createTextNode(trueRE.exec(elem)[0])), !support.tbody) {
              elem = "table" !== tag || reKeyword.test(elem) ? "<table>" !== wrap[1] || reKeyword.test(elem) ? 0 : tmp : tmp.firstChild;
              j = elem && elem.childNodes.length;
              for (; j--;) {
                if (jQuery.nodeName(tbody = elem.childNodes[j], "tbody") && !tbody.childNodes.length) {
                  elem.removeChild(tbody);
                }
              }
            }
            jQuery.merge(nodes, tmp.childNodes);
            /** @type {string} */
            tmp.textContent = "";
            for (; tmp.firstChild;) {
              tmp.removeChild(tmp.firstChild);
            }
            tmp = safe.lastChild;
          } else {
            nodes.push(context.createTextNode(elem));
          }
        }
      }
    }
    if (tmp) {
      safe.removeChild(tmp);
    }
    if (!support.appendChecked) {
      jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
    }
    /** @type {number} */
    i = 0;
    for (; elem = nodes[i++];) {
      if (result && jQuery.inArray(elem, result) > -1) {
        if (ignored) {
          ignored.push(elem);
        }
      } else {
        if (ret = jQuery.contains(elem.ownerDocument, elem), tmp = getAll(safe.appendChild(elem), "script"), ret && setGlobalEval(tmp), element) {
          /** @type {number} */
          j = 0;
          for (; elem = tmp[j++];) {
            if (opacityRe.test(elem.type || "")) {
              element.push(elem);
            }
          }
        }
      }
    }
    return tmp = null, safe;
  }
  /**
   * @return {?}
   */
  function returnTrue() {
    return true;
  }
  /**
   * @return {?}
   */
  function returnFalse() {
    return false;
  }
  /**
   * @return {?}
   */
  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (e) {
    }
  }
  /**
   * @param {!Object} r
   * @param {!Object} obj
   * @param {!Node} a
   * @param {!Node} b
   * @param {!Node} c
   * @param {number} data
   * @return {?}
   */
  function callback(r, obj, a, b, c, data) {
    var d;
    var key;
    if ("object" == typeof obj) {
      if ("string" != typeof a) {
        b = b || a;
        a = void 0;
      }
      for (key in obj) {
        callback(r, key, a, b, obj[key], data);
      }
      return r;
    }
    if (null == b && null == c ? (c = a, b = a = void 0) : null == c && ("string" == typeof a ? (c = b, b = void 0) : (c = b, b = a, a = void 0)), c === false) {
      /** @type {function(): ?} */
      c = returnFalse;
    } else {
      if (!c) {
        return r;
      }
    }
    return 1 === data && (d = c, c = function(type) {
      return jQuery().off(type), d.apply(this, arguments);
    }, c.guid = d.guid || (d.guid = jQuery.guid++)), r.each(function() {
      jQuery.event.add(this, obj, c, b, a);
    });
  }
  /**
   * @param {!Object} elem
   * @param {!Element} content
   * @return {?}
   */
  function manipulationTarget(elem, content) {
    return jQuery.nodeName(elem, "table") && jQuery.nodeName(11 !== content.nodeType ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
  }
  /**
   * @param {(Object|string)} elem
   * @return {?}
   */
  function disableScript(elem) {
    return elem.type = (null !== jQuery.find.attr(elem, "type")) + "/" + elem.type, elem;
  }
  /**
   * @param {!Object} elem
   * @return {?}
   */
  function restoreScript(elem) {
    /** @type {(Array<string>|null)} */
    var match = rscriptTypeMasked.exec(elem.type);
    return match ? elem.type = match[1] : elem.removeAttribute("type"), elem;
  }
  /**
   * @param {!Object} elem
   * @param {string} src
   * @return {undefined}
   */
  function cloneCopyEvent(elem, src) {
    if (1 === src.nodeType && jQuery.hasData(elem)) {
      var key;
      var type;
      var tableslen;
      var params = jQuery._data(elem);
      var parsed = jQuery._data(src, params);
      var events = params.events;
      if (events) {
        delete parsed.handle;
        parsed.events = {};
        for (key in events) {
          /** @type {number} */
          type = 0;
          tableslen = events[key].length;
          for (; tableslen > type; type++) {
            jQuery.event.add(src, key, events[key][type]);
          }
        }
      }
      if (parsed.data) {
        parsed.data = jQuery.extend({}, parsed.data);
      }
    }
  }
  /**
   * @param {!Object} src
   * @param {!Object} dest
   * @return {undefined}
   */
  function fixCloneNodeIssues(src, dest) {
    var undefined;
    var type;
    var data;
    if (1 === dest.nodeType) {
      if (undefined = dest.nodeName.toLowerCase(), !support.noCloneEvent && dest[jQuery.expando]) {
        data = jQuery._data(dest);
        for (type in data.events) {
          jQuery.removeEvent(dest, type, data.handle);
        }
        dest.removeAttribute(jQuery.expando);
      }
      if ("script" === undefined && dest.text !== src.text) {
        disableScript(dest).text = src.text;
        restoreScript(dest);
      } else {
        if ("object" === undefined) {
          if (dest.parentNode) {
            dest.outerHTML = src.outerHTML;
          }
          if (support.html5Clone && src.innerHTML && !jQuery.trim(dest.innerHTML)) {
            dest.innerHTML = src.innerHTML;
          }
        } else {
          if ("input" === undefined && reg.test(src.type)) {
            dest.defaultChecked = dest.checked = src.checked;
            if (dest.value !== src.value) {
              dest.value = src.value;
            }
          } else {
            if ("option" === undefined) {
              dest.defaultSelected = dest.selected = src.defaultSelected;
            } else {
              if (!("input" !== undefined && "textarea" !== undefined)) {
                dest.defaultValue = src.defaultValue;
              }
            }
          }
        }
      }
    }
  }
  /**
   * @param {!Object} collection
   * @param {!Object} args
   * @param {!Function} callback
   * @param {!Object} ignored
   * @return {?}
   */
  function domManip(collection, args, callback, ignored) {
    /** @type {!Array<?>} */
    args = concat.apply([], args);
    var first;
    var node;
    var len;
    var scripts;
    var elem;
    var fragment;
    /** @type {number} */
    var i = 0;
    var l = collection.length;
    /** @type {number} */
    var iNoClone = l - 1;
    var element = args[0];
    var orgAttrs = jQuery.isFunction(element);
    if (orgAttrs || l > 1 && "string" == typeof element && !support.checkClone && _tacet.test(element)) {
      return collection.each(function(index) {
        var self = collection.eq(index);
        if (orgAttrs) {
          args[0] = element.call(this, index, self.html());
        }
        domManip(self, args, callback, ignored);
      });
    }
    if (l && (fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored), first = fragment.firstChild, 1 === fragment.childNodes.length && (fragment = first), first || ignored)) {
      scripts = jQuery.map(getAll(fragment, "script"), disableScript);
      len = scripts.length;
      for (; l > i; i++) {
        node = fragment;
        if (i !== iNoClone) {
          node = jQuery.clone(node, true, true);
          if (len) {
            jQuery.merge(scripts, getAll(node, "script"));
          }
        }
        callback.call(collection[i], node, i);
      }
      if (len) {
        elem = scripts[scripts.length - 1].ownerDocument;
        jQuery.map(scripts, restoreScript);
        /** @type {number} */
        i = 0;
        for (; len > i; i++) {
          node = scripts[i];
          if (opacityRe.test(node.type || "") && !jQuery._data(node, "globalEval") && jQuery.contains(elem, node)) {
            if (node.src) {
              if (jQuery._evalUrl) {
                jQuery._evalUrl(node.src);
              }
            } else {
              jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(code, ""));
            }
          }
        }
      }
      /** @type {null} */
      fragment = first = null;
    }
    return collection;
  }
  /**
   * @param {!Object} input
   * @param {string} val
   * @param {string} keepData
   * @return {?}
   */
  function remove(input, val, keepData) {
    var elem;
    var result = val ? jQuery.filter(val, input) : input;
    /** @type {number} */
    var i = 0;
    for (; null != (elem = result[i]); i++) {
      if (!(keepData || 1 !== elem.nodeType)) {
        jQuery.cleanData(getAll(elem));
      }
      if (elem.parentNode) {
        if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
          setGlobalEval(getAll(elem, "script"));
        }
        elem.parentNode.removeChild(elem);
      }
    }
    return input;
  }
  /**
   * @param {?} name
   * @param {!Object} doc
   * @return {?}
   */
  function actualDisplay(name, doc) {
    var elem = jQuery(doc.createElement(name)).appendTo(doc.body);
    var style1 = jQuery.css(elem[0], "display");
    return elem.detach(), style1;
  }
  /**
   * @param {?} nodeName
   * @return {?}
   */
  function defaultDisplay(nodeName) {
    var doc = document;
    var display = elemdisplay[nodeName];
    return display || (display = actualDisplay(nodeName, doc), "none" !== display && display || (iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement), doc = (iframe[0].contentWindow || iframe[0].contentDocument).document, doc.write(), doc.close(), display = actualDisplay(nodeName, doc), iframe.detach()), elemdisplay[nodeName] = display), display;
  }
  /**
   * @param {?} conditionFn
   * @param {!Function} hookFn
   * @return {?}
   */
  function addGetHookIf(conditionFn, hookFn) {
    return {
      get : function() {
        return conditionFn() ? void delete this.get : (this.get = hookFn).apply(this, arguments);
      }
    };
  }
  /**
   * @param {string} name
   * @return {?}
   */
  function vendorPropName(name) {
    if (name in style) {
      return name;
    }
    var UserSelect = name.charAt(0).toUpperCase() + name.slice(1);
    /** @type {number} */
    var i = prefixes.length;
    for (; i--;) {
      if (name = prefixes[i] + UserSelect, name in style) {
        return name;
      }
    }
  }
  /**
   * @param {!NodeList} elements
   * @param {number} show
   * @return {?}
   */
  function showHide(elements, show) {
    var display;
    var elem;
    var hidden;
    /** @type {!Array} */
    var values = [];
    /** @type {number} */
    var index = 0;
    var length = elements.length;
    for (; length > index; index++) {
      elem = elements[index];
      if (elem.style) {
        values[index] = jQuery._data(elem, "olddisplay");
        display = elem.style.display;
        if (show) {
          if (!(values[index] || "none" !== display)) {
            /** @type {string} */
            elem.style.display = "";
          }
          if ("" === elem.style.display && toggle(elem)) {
            values[index] = jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName));
          }
        } else {
          hidden = toggle(elem);
          if (display && "none" !== display || !hidden) {
            jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
          }
        }
      }
    }
    /** @type {number} */
    index = 0;
    for (; length > index; index++) {
      elem = elements[index];
      if (elem.style) {
        if (!(show && "none" !== elem.style.display && "" !== elem.style.display)) {
          elem.style.display = show ? values[index] || "" : "none";
        }
      }
    }
    return elements;
  }
  /**
   * @param {string} type
   * @param {!Object} name
   * @param {string} data
   * @return {?}
   */
  function set(type, name, data) {
    /** @type {(Array<string>|null)} */
    var matches = tagMatcher.exec(name);
    return matches ? Math.max(0, matches[1] - (data || 0)) + (matches[2] || "px") : name;
  }
  /**
   * @param {string} elem
   * @param {string} name
   * @param {string} extra
   * @param {boolean} isBorderBox
   * @param {string} styles
   * @return {?}
   */
  function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
    /** @type {number} */
    var i = extra === (isBorderBox ? "border" : "content") ? 4 : "width" === name ? 1 : 0;
    /** @type {number} */
    var val = 0;
    for (; 4 > i; i = i + 2) {
      if ("margin" === extra) {
        val = val + jQuery.css(elem, extra + cssExpand[i], true, styles);
      }
      if (isBorderBox) {
        if ("content" === extra) {
          /** @type {number} */
          val = val - jQuery.css(elem, "padding" + cssExpand[i], true, styles);
        }
        if ("margin" !== extra) {
          /** @type {number} */
          val = val - jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      } else {
        val = val + jQuery.css(elem, "padding" + cssExpand[i], true, styles);
        if ("padding" !== extra) {
          val = val + jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      }
    }
    return val;
  }
  /**
   * @param {!Object} elem
   * @param {string} name
   * @param {!Object} extra
   * @return {?}
   */
  function getWidthOrHeight(elem, name, extra) {
    /** @type {boolean} */
    var valueIsBorderBox = true;
    var val = "width" === name ? elem.offsetWidth : elem.offsetHeight;
    var styles = getStyles(elem);
    /** @type {boolean} */
    var isBorderBox = support.boxSizing && "border-box" === jQuery.css(elem, "boxSizing", false, styles);
    if (0 >= val || null == val) {
      if (val = curCSS(elem, name, styles), (0 > val || null == val) && (val = elem.style[name]), rnumnonpx.test(val)) {
        return val;
      }
      valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
      /** @type {number} */
      val = parseFloat(val) || 0;
    }
    return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
  }
  /**
   * @param {!Object} type
   * @param {!Object} key
   * @param {!Object} object
   * @param {!Object} end
   * @param {!Object} easing
   * @return {?}
   */
  function Tween(type, key, object, end, easing) {
    return new Tween.prototype.init(type, key, object, end, easing);
  }
  /**
   * @return {?}
   */
  function createFxNow() {
    return window.setTimeout(function() {
      fxNow = void 0;
    }), fxNow = jQuery.now();
  }
  /**
   * @param {string} type
   * @param {number} includeWidth
   * @return {?}
   */
  function genFx(type, includeWidth) {
    var which;
    var attrs = {
      height : type
    };
    /** @type {number} */
    var i = 0;
    /** @type {number} */
    includeWidth = includeWidth ? 1 : 0;
    for (; 4 > i; i = i + (2 - includeWidth)) {
      which = cssExpand[i];
      attrs["margin" + which] = attrs["padding" + which] = type;
    }
    return includeWidth && (attrs.opacity = attrs.width = type), attrs;
  }
  /**
   * @param {?} value
   * @param {!Object} prop
   * @param {?} animation
   * @return {?}
   */
  function createTween(value, prop, animation) {
    var tween;
    var first = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]);
    /** @type {number} */
    var arg = 0;
    var pos = first.length;
    for (; pos > arg; arg++) {
      if (tween = first[arg].call(animation, prop, value)) {
        return tween;
      }
    }
  }
  /**
   * @param {!Object} elem
   * @param {!Object} props
   * @param {!Object} opts
   * @return {undefined}
   */
  function defaultPrefilter(elem, props, opts) {
    var prop;
    var value;
    var matched;
    var tween;
    var hooks;
    var oldfire;
    var display;
    var type;
    var anim = this;
    var orig = {};
    var style = elem.style;
    var hidden = elem.nodeType && toggle(elem);
    var dataShow = jQuery._data(elem, "fxshow");
    if (!opts.queue) {
      hooks = jQuery._queueHooks(elem, "fx");
      if (null == hooks.unqueued) {
        /** @type {number} */
        hooks.unqueued = 0;
        /** @type {function(): undefined} */
        oldfire = hooks.empty.fire;
        /**
         * @return {undefined}
         */
        hooks.empty.fire = function() {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }
      hooks.unqueued++;
      anim.always(function() {
        anim.always(function() {
          hooks.unqueued--;
          if (!jQuery.queue(elem, "fx").length) {
            hooks.empty.fire();
          }
        });
      });
    }
    if (1 === elem.nodeType && ("height" in props || "width" in props)) {
      /** @type {!Array} */
      opts.overflow = [style.overflow, style.overflowX, style.overflowY];
      display = jQuery.css(elem, "display");
      type = "none" === display ? jQuery._data(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;
      if ("inline" === type && "none" === jQuery.css(elem, "float")) {
        if (support.inlineBlockNeedsLayout && "inline" !== defaultDisplay(elem.nodeName)) {
          /** @type {number} */
          style.zoom = 1;
        } else {
          /** @type {string} */
          style.display = "inline-block";
        }
      }
    }
    if (opts.overflow) {
      /** @type {string} */
      style.overflow = "hidden";
      if (!support.shrinkWrapBlocks()) {
        anim.always(function() {
          style.overflow = opts.overflow[0];
          style.overflowX = opts.overflow[1];
          style.overflowY = opts.overflow[2];
        });
      }
    }
    for (prop in props) {
      if (value = props[prop], patternTimecode.exec(value)) {
        if (delete props[prop], matched = matched || "toggle" === value, value === (hidden ? "hide" : "show")) {
          if ("show" !== value || !dataShow || void 0 === dataShow[prop]) {
            continue;
          }
          /** @type {boolean} */
          hidden = true;
        }
        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
      } else {
        display = void 0;
      }
    }
    if (jQuery.isEmptyObject(orig)) {
      if ("inline" === ("none" === display ? defaultDisplay(elem.nodeName) : display)) {
        style.display = display;
      }
    } else {
      if (dataShow) {
        if ("hidden" in dataShow) {
          hidden = dataShow.hidden;
        }
      } else {
        dataShow = jQuery._data(elem, "fxshow", {});
      }
      if (matched) {
        /** @type {boolean} */
        dataShow.hidden = !hidden;
      }
      if (hidden) {
        jQuery(elem).show();
      } else {
        anim.done(function() {
          jQuery(elem).hide();
        });
      }
      anim.done(function() {
        var p;
        jQuery._removeData(elem, "fxshow");
        for (p in orig) {
          jQuery.style(elem, p, orig[p]);
        }
      });
      for (prop in orig) {
        tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
        if (!(prop in dataShow)) {
          dataShow[prop] = tween.start;
          if (hidden) {
            tween.end = tween.start;
            /** @type {number} */
            tween.start = "width" === prop || "height" === prop ? 1 : 0;
          }
        }
      }
    }
  }
  /**
   * @param {!Array} obj
   * @param {!Array} prop
   * @return {undefined}
   */
  function propFilter(obj, prop) {
    var k;
    var name;
    var fn;
    var val;
    var hooks;
    for (k in obj) {
      if (name = jQuery.camelCase(k), fn = prop[name], val = obj[k], jQuery.isArray(val) && (fn = val[1], val = obj[k] = val[0]), k !== name && (obj[name] = val, delete obj[k]), hooks = jQuery.cssHooks[name], hooks && "expand" in hooks) {
        val = hooks.expand(val);
        delete obj[name];
        for (k in val) {
          if (!(k in obj)) {
            obj[k] = val[k];
            prop[k] = fn;
          }
        }
      } else {
        prop[name] = fn;
      }
    }
  }
  /**
   * @param {(Object|string)} elem
   * @param {?} properties
   * @param {!Object} options
   * @return {?}
   */
  function Animation(elem, properties, options) {
    var result;
    var s;
    /** @type {number} */
    var index = 0;
    var length = Animation.prefilters.length;
    var deferred = jQuery.Deferred().always(function() {
      delete tick.elem;
    });
    /**
     * @return {?}
     */
    var tick = function() {
      if (s) {
        return false;
      }
      var currentTime = fxNow || createFxNow();
      /** @type {number} */
      var remaining = Math.max(0, animation.startTime + animation.duration - currentTime);
      /** @type {number} */
      var dVS = remaining / animation.duration || 0;
      /** @type {number} */
      var value = 1 - dVS;
      /** @type {number} */
      var i = 0;
      var length = animation.tweens.length;
      for (; length > i; i++) {
        animation.tweens[i].run(value);
      }
      return deferred.notifyWith(elem, [animation, value, remaining]), 1 > value && length ? remaining : (deferred.resolveWith(elem, [animation]), false);
    };
    var animation = deferred.promise({
      elem : elem,
      props : jQuery.extend({}, properties),
      opts : jQuery.extend(true, {
        specialEasing : {},
        easing : jQuery.easing._default
      }, options),
      originalProperties : properties,
      originalOptions : options,
      startTime : fxNow || createFxNow(),
      duration : options.duration,
      tweens : [],
      createTween : function(prop, value) {
        var result = jQuery.Tween(elem, animation.opts, prop, value, animation.opts.specialEasing[prop] || animation.opts.easing);
        return animation.tweens.push(result), result;
      },
      stop : function(value) {
        /** @type {number} */
        var i = 0;
        var val = value ? animation.tweens.length : 0;
        if (s) {
          return this;
        }
        /** @type {boolean} */
        s = true;
        for (; val > i; i++) {
          animation.tweens[i].run(1);
        }
        return value ? (deferred.notifyWith(elem, [animation, 1, 0]), deferred.resolveWith(elem, [animation, value])) : deferred.rejectWith(elem, [animation, value]), this;
      }
    });
    var props = animation.props;
    propFilter(props, animation.opts.specialEasing);
    for (; length > index; index++) {
      if (result = Animation.prefilters[index].call(animation, elem, props, animation.opts)) {
        return jQuery.isFunction(result.stop) && (jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result)), result;
      }
    }
    return jQuery.map(props, createTween, animation), jQuery.isFunction(animation.opts.start) && animation.opts.start.call(elem, animation), jQuery.fx.timer(jQuery.extend(tick, {
      elem : elem,
      anim : animation,
      queue : animation.opts.queue
    })), animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
  }
  /**
   * @param {string} d
   * @return {?}
   */
  function $(d) {
    return jQuery.attr(d, "class") || "";
  }
  /**
   * @param {!Object} structure
   * @return {?}
   */
  function addToPrefiltersOrTransports(structure) {
    return function(val, r) {
      if ("string" != typeof val) {
        /** @type {string} */
        r = val;
        /** @type {string} */
        val = "*";
      }
      var type;
      /** @type {number} */
      var callbackCount = 0;
      var callbackVals = val.toLowerCase().match(rnotwhite) || [];
      if (jQuery.isFunction(r)) {
        for (; type = callbackVals[callbackCount++];) {
          if ("+" === type.charAt(0)) {
            type = type.slice(1) || "*";
            (structure[type] = structure[type] || []).unshift(r);
          } else {
            (structure[type] = structure[type] || []).push(r);
          }
        }
      }
    };
  }
  /**
   * @param {!Object} structure
   * @param {?} options
   * @param {!Object} originalOptions
   * @param {?} jqXHR
   * @return {?}
   */
  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
    /**
     * @param {string} dataType
     * @return {?}
     */
    function inspect(dataType) {
      var selected;
      return inspected[dataType] = true, jQuery.each(structure[dataType] || [], function(canCreateDiscussions, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
        return "string" != typeof dataTypeOrTransport || seekingTransport || inspected[dataTypeOrTransport] ? seekingTransport ? !(selected = dataTypeOrTransport) : void 0 : (options.dataTypes.unshift(dataTypeOrTransport), inspect(dataTypeOrTransport), false);
      }), selected;
    }
    var inspected = {};
    /** @type {boolean} */
    var seekingTransport = structure === transports;
    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
  }
  /**
   * @param {?} target
   * @param {?} opts
   * @return {?}
   */
  function ajaxExtend(target, opts) {
    var deep;
    var key;
    var flatOptions = jQuery.ajaxSettings.flatOptions || {};
    for (key in opts) {
      if (void 0 !== opts[key]) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = opts[key];
      }
    }
    return deep && jQuery.extend(true, target, deep), target;
  }
  /**
   * @param {!Object} s
   * @param {!XMLHttpRequest} jqXHR
   * @param {!Array} responses
   * @return {?}
   */
  function ajaxHandleResponses(s, jqXHR, responses) {
    var firstDataType;
    var ct;
    var finalDataType;
    var type;
    var contents = s.contents;
    var dataTypes = s.dataTypes;
    for (; "*" === dataTypes[0];) {
      dataTypes.shift();
      if (void 0 === ct) {
        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
      }
    }
    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    }
    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
          /** @type {string} */
          finalDataType = type;
          break;
        }
        if (!firstDataType) {
          /** @type {string} */
          firstDataType = type;
        }
      }
      /** @type {(string|undefined)} */
      finalDataType = finalDataType || firstDataType;
    }
    return finalDataType ? (finalDataType !== dataTypes[0] && dataTypes.unshift(finalDataType), responses[finalDataType]) : void 0;
  }
  /**
   * @param {!Object} s
   * @param {string} response
   * @param {?} jqXHR
   * @param {number} isSuccess
   * @return {?}
   */
  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2;
    var current;
    var conv;
    var parts;
    var value;
    var converters = {};
    var resList = s.dataTypes.slice();
    if (resList[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }
    current = resList.shift();
    for (; current;) {
      if (s.responseFields[current] && (jqXHR[s.responseFields[current]] = response), !value && isSuccess && s.dataFilter && (response = s.dataFilter(response, s.dataType)), value = current, current = resList.shift()) {
        if ("*" === current) {
          current = value;
        } else {
          if ("*" !== value && value !== current) {
            if (conv = converters[value + " " + current] || converters["* " + current], !conv) {
              for (conv2 in converters) {
                if (parts = conv2.split(" "), parts[1] === current && (conv = converters[value + " " + parts[0]] || converters["* " + parts[0]])) {
                  if (conv === true) {
                    conv = converters[conv2];
                  } else {
                    if (converters[conv2] !== true) {
                      /** @type {string} */
                      current = parts[0];
                      resList.unshift(parts[1]);
                    }
                  }
                  break;
                }
              }
            }
            if (conv !== true) {
              if (conv && s["throws"]) {
                response = conv(response);
              } else {
                try {
                  response = conv(response);
                } catch (e) {
                  return {
                    state : "parsererror",
                    error : conv ? e : "No conversion from " + value + " to " + current
                  };
                }
              }
            }
          }
        }
      }
    }
    return {
      state : "success",
      data : response
    };
  }
  /**
   * @param {!Object} elem
   * @return {?}
   */
  function getStyle(elem) {
    return elem.style && elem.style.display || jQuery.css(elem, "display");
  }
  /**
   * @param {!Object} element
   * @return {?}
   */
  function close(element) {
    if (!jQuery.contains(element.ownerDocument || document, element)) {
      return true;
    }
    for (; element && 1 === element.nodeType;) {
      if ("none" === getStyle(element) || "hidden" === element.type) {
        return true;
      }
      element = element.parentNode;
    }
    return false;
  }
  /**
   * @param {string} s
   * @param {string} b
   * @param {string} value
   * @param {!Function} callback
   * @return {undefined}
   */
  function merge(s, b, value, callback) {
    var i;
    if (jQuery.isArray(b)) {
      jQuery.each(b, function(canCreateDiscussions, response) {
        if (value || regCls.test(s)) {
          callback(s, response);
        } else {
          merge(s + "[" + ("object" == typeof response && null != response ? canCreateDiscussions : "") + "]", response, value, callback);
        }
      });
    } else {
      if (value || "object" !== jQuery.type(b)) {
        callback(s, b);
      } else {
        for (i in b) {
          merge(s + "[" + i + "]", b[i], value, callback);
        }
      }
    }
  }
  /**
   * @return {?}
   */
  function createStandardXHR() {
    try {
      return new window.XMLHttpRequest;
    } catch (e) {
    }
  }
  /**
   * @return {?}
   */
  function getNewXmlHttpRequest() {
    try {
      return new window.ActiveXObject("Microsoft.XMLHTTP");
    } catch (e) {
    }
  }
  /**
   * @param {!Object} elem
   * @return {?}
   */
  function getWindow(elem) {
    return jQuery.isWindow(elem) ? elem : 9 === elem.nodeType ? elem.defaultView || elem.parentWindow : false;
  }
  /** @type {!Array} */
  var arr = [];
  var document = window.document;
  /** @type {function(this:(IArrayLike<T>|string), *=, *=): !Array<T>} */
  var slice = arr.slice;
  /** @type {function(this:*, ...*): !Array<?>} */
  var concat = arr.concat;
  /** @type {function(this:IArrayLike<T>, ...T): number} */
  var push = arr.push;
  /** @type {function(this:(IArrayLike<T>|string), T, number=): number} */
  var indexOf = arr.indexOf;
  var class2type = {};
  /** @type {function(this:*): string} */
  var toString = class2type.toString;
  /** @type {function(this:Object, *): boolean} */
  var hasOwn = class2type.hasOwnProperty;
  var support = {};
  /** @type {string} */
  var core_version = "1.12.4";
  /**
   * @param {?} type
   * @param {!Object} context
   * @return {?}
   */
  var jQuery = function(type, context) {
    return new jQuery.fn.init(type, context);
  };
  /** @type {!RegExp} */
  var regNewline = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
  /** @type {!RegExp} */
  var REGEXP_ATTR_VALUE_COLON = /^-ms-/;
  /** @type {!RegExp} */
  var reCopyright = /-([\da-z])/gi;
  /**
   * @param {?} p2
   * @param {string} format
   * @return {?}
   */
  var fn = function(p2, format) {
    return format.toUpperCase();
  };
  jQuery.fn = jQuery.prototype = {
    jquery : core_version,
    constructor : jQuery,
    selector : "",
    length : 0,
    toArray : function() {
      return slice.call(this);
    },
    get : function(num) {
      return null != num ? 0 > num ? this[num + this.length] : this[num] : slice.call(this);
    },
    pushStack : function(a) {
      var ret = jQuery.merge(this.constructor(), a);
      return ret.prevObject = this, ret.context = this.context, ret;
    },
    each : function(data) {
      return jQuery.each(this, data);
    },
    map : function(name) {
      return this.pushStack(jQuery.map(this, function(g, nameFn) {
        return name.call(g, nameFn, g);
      }));
    },
    slice : function() {
      return this.pushStack(slice.apply(this, arguments));
    },
    first : function() {
      return this.eq(0);
    },
    last : function() {
      return this.eq(-1);
    },
    eq : function(num) {
      var index = this.length;
      var thisIndex = +num + (0 > num ? index : 0);
      return this.pushStack(thisIndex >= 0 && index > thisIndex ? [this[thisIndex]] : []);
    },
    end : function() {
      return this.prevObject || this.constructor();
    },
    push : push,
    sort : arr.sort,
    splice : arr.splice
  };
  /** @type {function(): ?} */
  jQuery.extend = jQuery.fn.extend = function() {
    var src;
    var copyIsArray;
    var copy;
    var name;
    var options;
    var clone;
    var target = arguments[0] || {};
    /** @type {number} */
    var d = 1;
    /** @type {number} */
    var c = arguments.length;
    /** @type {boolean} */
    var deep = false;
    if ("boolean" == typeof target) {
      /** @type {boolean} */
      deep = target;
      target = arguments[d] || {};
      d++;
    }
    if (!("object" == typeof target || jQuery.isFunction(target))) {
      target = {};
    }
    if (d === c) {
      target = this;
      d--;
    }
    for (; c > d; d++) {
      if (null != (options = arguments[d])) {
        for (name in options) {
          src = target[name];
          copy = options[name];
          if (target !== copy) {
            if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
              if (copyIsArray) {
                /** @type {boolean} */
                copyIsArray = false;
                clone = src && jQuery.isArray(src) ? src : [];
              } else {
                clone = src && jQuery.isPlainObject(src) ? src : {};
              }
              target[name] = jQuery.extend(deep, clone, copy);
            } else {
              if (void 0 !== copy) {
                target[name] = copy;
              }
            }
          }
        }
      }
    }
    return target;
  };
  jQuery.extend({
    expando : "jQuery" + (core_version + Math.random()).replace(/\D/g, ""),
    isReady : true,
    error : function(type) {
      throw new Error(type);
    },
    noop : function() {
    },
    isFunction : function(value) {
      return "function" === jQuery.type(value);
    },
    isArray : Array.isArray || function(value) {
      return "array" === jQuery.type(value);
    },
    isWindow : function(obj) {
      return null != obj && obj == obj.window;
    },
    isNumeric : function(obj) {
      var realStringObj = obj && obj.toString();
      return !jQuery.isArray(obj) && realStringObj - parseFloat(realStringObj) + 1 >= 0;
    },
    isEmptyObject : function(obj) {
      var key;
      for (key in obj) {
        return false;
      }
      return true;
    },
    isPlainObject : function(o) {
      var key;
      if (!o || "object" !== jQuery.type(o) || o.nodeType || jQuery.isWindow(o)) {
        return false;
      }
      try {
        if (o.constructor && !hasOwn.call(o, "constructor") && !hasOwn.call(o.constructor.prototype, "isPrototypeOf")) {
          return false;
        }
      } catch (n) {
        return false;
      }
      if (!support.ownFirst) {
        for (key in o) {
          return hasOwn.call(o, key);
        }
      }
      for (key in o) {
      }
      return void 0 === key || hasOwn.call(o, key);
    },
    type : function(type) {
      return null == type ? type + "" : "object" == typeof type || "function" == typeof type ? class2type[toString.call(type)] || "object" : typeof type;
    },
    globalEval : function(data) {
      if (data && jQuery.trim(data)) {
        (window.execScript || function(aNetChannelMessage) {
          window.eval.call(window, aNetChannelMessage);
        })(data);
      }
    },
    camelCase : function(str) {
      return str.replace(REGEXP_ATTR_VALUE_COLON, "ms-").replace(reCopyright, fn);
    },
    nodeName : function(type, name) {
      return type.nodeName && type.nodeName.toLowerCase() === name.toLowerCase();
    },
    each : function(obj, iterator) {
      var l;
      /** @type {number} */
      var i = 0;
      if (isArraylike(obj)) {
        l = obj.length;
        for (; l > i; i++) {
          if (iterator.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (iterator.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }
      return obj;
    },
    trim : function(text) {
      return null == text ? "" : (text + "").replace(regNewline, "");
    },
    makeArray : function(arr, results) {
      var ret = results || [];
      return null != arr && (isArraylike(Object(arr)) ? jQuery.merge(ret, "string" == typeof arr ? [arr] : arr) : push.call(ret, arr)), ret;
    },
    inArray : function(item, arr, i) {
      var len;
      if (arr) {
        if (indexOf) {
          return indexOf.call(arr, item, i);
        }
        len = arr.length;
        i = i ? 0 > i ? Math.max(0, len + i) : i : 0;
        for (; len > i; i++) {
          if (i in arr && arr[i] === item) {
            return i;
          }
        }
      }
      return -1;
    },
    merge : function(array, d) {
      /** @type {number} */
      var order = +d.length;
      /** @type {number} */
      var n = 0;
      var i = array.length;
      for (; order > n;) {
        array[i++] = d[n++];
      }
      if (order !== order) {
        for (; void 0 !== d[n];) {
          array[i++] = d[n++];
        }
      }
      return array.length = i, array;
    },
    grep : function(elements, callback, a) {
      var editItemKey;
      /** @type {!Array} */
      var ret = [];
      /** @type {number} */
      var i = 0;
      var length = elements.length;
      /** @type {boolean} */
      var booA = !a;
      for (; length > i; i++) {
        /** @type {boolean} */
        editItemKey = !callback(elements[i], i);
        if (editItemKey !== booA) {
          ret.push(elements[i]);
        }
      }
      return ret;
    },
    map : function(obj, callback, index) {
      var l;
      var result;
      /** @type {number} */
      var i = 0;
      /** @type {!Array} */
      var ret = [];
      if (isArraylike(obj)) {
        l = obj.length;
        for (; l > i; i++) {
          result = callback(obj[i], i, index);
          if (null != result) {
            ret.push(result);
          }
        }
      } else {
        for (i in obj) {
          result = callback(obj[i], i, index);
          if (null != result) {
            ret.push(result);
          }
        }
      }
      return concat.apply([], ret);
    },
    guid : 1,
    proxy : function(t, name) {
      var headArgs;
      var proxy;
      var pos;
      return "string" == typeof name && (pos = t[name], name = t, t = pos), jQuery.isFunction(t) ? (headArgs = slice.call(arguments, 2), proxy = function() {
        return t.apply(name || this, headArgs.concat(slice.call(arguments)));
      }, proxy.guid = t.guid = t.guid || jQuery.guid++, proxy) : void 0;
    },
    now : function() {
      return +new Date;
    },
    support : support
  });
  if ("function" == typeof Symbol) {
    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
  }
  jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(canCreateDiscussions, p_Interval) {
    class2type["[object " + p_Interval + "]"] = p_Interval.toLowerCase();
  });
  var Sizzle = function(window) {
    /**
     * @param {string} selector
     * @param {!Object} context
     * @param {!Array} results
     * @param {!Array} seed
     * @return {?}
     */
    function Sizzle(selector, context, results, seed) {
      var m;
      var i;
      var elem;
      var nid;
      var nidselect;
      var match;
      var groups;
      var newSelector;
      var newContext = context && context.ownerDocument;
      var undefined = context ? context.nodeType : 9;
      if (results = results || [], "string" != typeof selector || !selector || 1 !== undefined && 9 !== undefined && 11 !== undefined) {
        return results;
      }
      if (!seed && ((context ? context.ownerDocument || context : preferredDoc) !== document && apply(context), context = context || document, documentIsHTML)) {
        if (11 !== undefined && (match = customSelectorReg.exec(selector))) {
          if (m = match[1]) {
            if (9 === undefined) {
              if (!(elem = context.getElementById(m))) {
                return results;
              }
              if (elem.id === m) {
                return results.push(elem), results;
              }
            } else {
              if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                return results.push(elem), results;
              }
            }
          } else {
            if (match[2]) {
              return push.apply(results, context.getElementsByTagName(selector)), results;
            }
            if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
              return push.apply(results, context.getElementsByClassName(m)), results;
            }
          }
        }
        if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
          if (1 !== undefined) {
            /** @type {!Object} */
            newContext = context;
            /** @type {string} */
            newSelector = selector;
          } else {
            if ("object" !== context.nodeName.toLowerCase()) {
              if (nid = context.getAttribute("id")) {
                nid = nid.replace(rcssescape, "\\$&");
              } else {
                context.setAttribute("id", nid = expando);
              }
              groups = tokenize(selector);
              i = groups.length;
              /** @type {string} */
              nidselect = ridentifier.test(nid) ? "#" + nid : "[id='" + nid + "']";
              for (; i--;) {
                /** @type {string} */
                groups[i] = nidselect + " " + toSelector(groups[i]);
              }
              newSelector = groups.join(",");
              newContext = RE_PSEUDOS.test(selector) && testContext(context.parentNode) || context;
            }
          }
          if (newSelector) {
            try {
              return push.apply(results, newContext.querySelectorAll(newSelector)), results;
            } catch (s) {
            } finally {
              if (nid === expando) {
                context.removeAttribute("id");
              }
            }
          }
        }
      }
      return select(selector.replace(rtrim, "$1"), context, results, seed);
    }
    /**
     * @return {?}
     */
    function createCache() {
      /**
       * @param {string} key
       * @param {?} service
       * @return {?}
       */
      function cache(key, service) {
        return buf.push(key + " ") > Expr.cacheLength && delete cache[buf.shift()], cache[key + " "] = service;
      }
      /** @type {!Array} */
      var buf = [];
      return cache;
    }
    /**
     * @param {!Function} fn
     * @return {?}
     */
    function markFunction(fn) {
      return fn[expando] = true, fn;
    }
    /**
     * @param {!Function} doSubs
     * @return {?}
     */
    function assert(doSubs) {
      var uiElem = document.createElement("div");
      try {
        return !!doSubs(uiElem);
      } catch (t) {
        return false;
      } finally {
        if (uiElem.parentNode) {
          uiElem.parentNode.removeChild(uiElem);
        }
        /** @type {null} */
        uiElem = null;
      }
    }
    /**
     * @param {string} attrs
     * @param {!Function} handler
     * @return {undefined}
     */
    function addHandle(attrs, handler) {
      var arr = attrs.split("|");
      var i = arr.length;
      for (; i--;) {
        /** @type {!Function} */
        Expr.attrHandle[arr[i]] = handler;
      }
    }
    /**
     * @param {!Object} b
     * @param {!Object} a
     * @return {?}
     */
    function siblingCheck(b, a) {
      var n = a && b;
      var .num_const = n && 1 === b.nodeType && 1 === a.nodeType && (~a.sourceIndex || ne) - (~b.sourceIndex || ne);
      if (.num_const) {
        return .num_const;
      }
      if (n) {
        for (; n = n.nextSibling;) {
          if (n === a) {
            return -1;
          }
        }
      }
      return b ? 1 : -1;
    }
    /**
     * @param {!Object} name
     * @return {?}
     */
    function jQuerify(name) {
      return function(section) {
        var type = section.nodeName.toLowerCase();
        return "input" === type && section.type === name;
      };
    }
    /**
     * @param {!Object} type
     * @return {?}
     */
    function createButtonPseudo(type) {
      return function(section) {
        var undefined = section.nodeName.toLowerCase();
        return ("input" === undefined || "button" === undefined) && section.type === type;
      };
    }
    /**
     * @param {!Function} fn
     * @return {?}
     */
    function createPositionalPseudo(fn) {
      return markFunction(function(key) {
        return key = +key, markFunction(function(a, b) {
          var i;
          var k = fn([], a.length, key);
          var l = k.length;
          for (; l--;) {
            if (a[i = k[l]]) {
              /** @type {boolean} */
              a[i] = !(b[i] = a[i]);
            }
          }
        });
      });
    }
    /**
     * @param {!Node} context
     * @return {?}
     */
    function testContext(context) {
      return context && "undefined" != typeof context.getElementsByTagName && context;
    }
    /**
     * @return {undefined}
     */
    function setFilters() {
    }
    /**
     * @param {!Array} text
     * @return {?}
     */
    function toSelector(text) {
      /** @type {number} */
      var normalDepthLabel = 0;
      var symbols_wo_blanks = text.length;
      /** @type {string} */
      var selector = "";
      for (; symbols_wo_blanks > normalDepthLabel; normalDepthLabel++) {
        /** @type {string} */
        selector = selector + text[normalDepthLabel].value;
      }
      return selector;
    }
    /**
     * @param {!Function} matcher
     * @param {!Object} combinator
     * @param {string} base
     * @return {?}
     */
    function addCombinator(matcher, combinator, base) {
      var dir = combinator.dir;
      var checkNonElements = base && "parentNode" === dir;
      /** @type {number} */
      var doneName = done++;
      return combinator.first ? function(elem, stat, context) {
        for (; elem = elem[dir];) {
          if (1 === elem.nodeType || checkNonElements) {
            return matcher(elem, stat, context);
          }
        }
      } : function(elem, context, xml) {
        var oldCache;
        var uniqueCache;
        var outerCache;
        /** @type {!Array} */
        var newCache = [dirruns, doneName];
        if (xml) {
          for (; elem = elem[dir];) {
            if ((1 === elem.nodeType || checkNonElements) && matcher(elem, context, xml)) {
              return true;
            }
          }
        } else {
          for (; elem = elem[dir];) {
            if (1 === elem.nodeType || checkNonElements) {
              if (outerCache = elem[expando] || (elem[expando] = {}), uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {}), (oldCache = uniqueCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                return newCache[2] = oldCache[2];
              }
              if (uniqueCache[dir] = newCache, newCache[2] = matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        }
      };
    }
    /**
     * @param {!Object} matchers
     * @return {?}
     */
    function elementMatcher(matchers) {
      return matchers.length > 1 ? function(elem, context, xml) {
        var i = matchers.length;
        for (; i--;) {
          if (!matchers[i](elem, context, xml)) {
            return false;
          }
        }
        return true;
      } : matchers[0];
    }
    /**
     * @param {string} selector
     * @param {!NodeList} contexts
     * @param {!Array} results
     * @return {?}
     */
    function multipleContexts(selector, contexts, results) {
      /** @type {number} */
      var i = 0;
      var len = contexts.length;
      for (; len > i; i++) {
        Sizzle(selector, contexts[i], results);
      }
      return results;
    }
    /**
     * @param {!Array} a
     * @param {!Object} text
     * @param {!Function} n
     * @param {!Object} e
     * @param {?} s
     * @return {?}
     */
    function fn(a, text, n, e, s) {
      var out;
      /** @type {!Array} */
      var output = [];
      /** @type {number} */
      var key = 0;
      var x = a.length;
      /** @type {boolean} */
      var check_select = null != text;
      for (; x > key; key++) {
        if (out = a[key]) {
          if (!(n && !n(out, e, s))) {
            output.push(out);
            if (check_select) {
              text.push(key);
            }
          }
        }
      }
      return output;
    }
    /**
     * @param {!Function} f
     * @param {!Object} n
     * @param {!Function} func
     * @param {!Object} event
     * @param {!Object} cb
     * @param {!Object} opts
     * @return {?}
     */
    function run(f, n, func, event, cb, opts) {
      return event && !event[expando] && (event = run(event)), cb && !cb[expando] && (cb = run(cb, opts)), markFunction(function(o, m, context, undefined) {
        var data;
        var i;
        var value;
        /** @type {!Array} */
        var match = [];
        /** @type {!Array} */
        var key = [];
        var e = m.length;
        var val = o || multipleContexts(n || "*", context.nodeType ? [context] : context, []);
        var obj = !f || !o && n ? val : fn(val, match, f, context, undefined);
        var item = func ? cb || (o ? f : e || event) ? [] : m : obj;
        if (func && func(obj, item, context, undefined), event) {
          data = fn(item, key);
          event(data, [], context, undefined);
          i = data.length;
          for (; i--;) {
            if (value = data[i]) {
              /** @type {boolean} */
              item[key[i]] = !(obj[key[i]] = value);
            }
          }
        }
        if (o) {
          if (cb || f) {
            if (cb) {
              /** @type {!Array} */
              data = [];
              i = item.length;
              for (; i--;) {
                if (value = item[i]) {
                  data.push(obj[i] = value);
                }
              }
              cb(null, item = [], data, undefined);
            }
            i = item.length;
            for (; i--;) {
              if ((value = item[i]) && (data = cb ? indexOf(o, value) : match[i]) > -1) {
                /** @type {boolean} */
                o[data] = !(m[data] = value);
              }
            }
          }
        } else {
          item = fn(item === m ? item.splice(e, item.length) : item);
          if (cb) {
            cb(null, m, item, undefined);
          } else {
            push.apply(m, item);
          }
        }
      });
    }
    /**
     * @param {!Array} tokens
     * @return {?}
     */
    function matcherFromTokens(tokens) {
      var checkContext;
      var matcher;
      var j;
      var length = tokens.length;
      var leadingRelative = Expr.relative[tokens[0].type];
      var implicitRelative = leadingRelative || Expr.relative[" "];
      /** @type {number} */
      var i = leadingRelative ? 1 : 0;
      var matchContext = addCombinator(function(elem) {
        return elem === checkContext;
      }, implicitRelative, true);
      var matchAnyContext = addCombinator(function(value) {
        return indexOf(checkContext, value) > -1;
      }, implicitRelative, true);
      /** @type {!Array} */
      var matchers = [function(elem, context, xml) {
        var r = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
        return checkContext = null, r;
      }];
      for (; length > i; i++) {
        if (matcher = Expr.relative[tokens[i].type]) {
          /** @type {!Array} */
          matchers = [addCombinator(elementMatcher(matchers), matcher)];
        } else {
          if (matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches), matcher[expando]) {
            /** @type {number} */
            j = ++i;
            for (; length > j; j++) {
              if (Expr.relative[tokens[j].type]) {
                break;
              }
            }
            return run(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({
              value : " " === tokens[i - 2].type ? "*" : ""
            })).replace(rtrim, "$1"), matcher, j > i && matcherFromTokens(tokens.slice(i, j)), length > j && matcherFromTokens(tokens = tokens.slice(j)), length > j && toSelector(tokens));
          }
          matchers.push(matcher);
        }
      }
      return elementMatcher(matchers);
    }
    /**
     * @param {!Array} elementMatchers
     * @param {!Array} setMatchers
     * @return {?}
     */
    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
      /** @type {boolean} */
      var bySet = setMatchers.length > 0;
      /** @type {boolean} */
      var byElement = elementMatchers.length > 0;
      /**
       * @param {!Function} seed
       * @param {!Object} context
       * @param {number} xml
       * @param {!Array} results
       * @param {!Object} outermost
       * @return {?}
       */
      var superMatcher = function(seed, context, xml, results, outermost) {
        var elem;
        var j;
        var matcher;
        /** @type {number} */
        var matchedCount = 0;
        /** @type {string} */
        var i = "0";
        var unmatched = seed && [];
        /** @type {!Array} */
        var data = [];
        var contextBackup = outermostContext;
        var elems = seed || byElement && Expr.find.TAG("*", outermost);
        var dirrunsUnique = dirruns = dirruns + (null == contextBackup ? 1 : Math.random() || .1);
        var length = elems.length;
        if (outermost) {
          outermostContext = context === document || context || outermost;
        }
        for (; i !== length && null != (elem = elems[i]); i++) {
          if (byElement && elem) {
            /** @type {number} */
            j = 0;
            if (!(context || elem.ownerDocument === document)) {
              apply(elem);
              /** @type {boolean} */
              xml = !documentIsHTML;
            }
            for (; matcher = elementMatchers[j++];) {
              if (matcher(elem, context || document, xml)) {
                results.push(elem);
                break;
              }
            }
            if (outermost) {
              dirruns = dirrunsUnique;
            }
          }
          if (bySet) {
            if (elem = !matcher && elem) {
              matchedCount--;
            }
            if (seed) {
              unmatched.push(elem);
            }
          }
        }
        if (matchedCount = matchedCount + i, bySet && i !== matchedCount) {
          /** @type {number} */
          j = 0;
          for (; matcher = setMatchers[j++];) {
            matcher(unmatched, data, context, xml);
          }
          if (seed) {
            if (matchedCount > 0) {
              for (; i--;) {
                if (!(unmatched[i] || data[i])) {
                  data[i] = pop.call(results);
                }
              }
            }
            data = fn(data);
          }
          push.apply(results, data);
          if (outermost && !seed && data.length > 0 && matchedCount + setMatchers.length > 1) {
            Sizzle.uniqueSort(results);
          }
        }
        return outermost && (dirruns = dirrunsUnique, outermostContext = contextBackup), unmatched;
      };
      return bySet ? markFunction(superMatcher) : superMatcher;
    }
    var i;
    var support;
    var Expr;
    var format;
    var isXML;
    var tokenize;
    var compile;
    var select;
    var outermostContext;
    var sortInput;
    var formattedString;
    var apply;
    var document;
    var element;
    var documentIsHTML;
    var rbuggyQSA;
    var opt;
    var matches;
    var contains;
    /** @type {string} */
    var expando = "sizzle" + 1 * new Date;
    var preferredDoc = window.document;
    /** @type {number} */
    var dirruns = 0;
    /** @type {number} */
    var done = 0;
    var classCache = createCache();
    var tokenCache = createCache();
    var compilerCache = createCache();
    /**
     * @param {?} name
     * @param {?} options
     * @return {?}
     */
    var ret = function(name, options) {
      return name === options && (formattedString = true), 0;
    };
    /** @type {number} */
    var ne = 1 << 31;
    /** @type {function(this:Object, *): boolean} */
    var hasOwn = {}.hasOwnProperty;
    /** @type {!Array} */
    var arr = [];
    /** @type {function(this:IArrayLike<T>): T} */
    var pop = arr.pop;
    /** @type {function(this:IArrayLike<T>, ...T): number} */
    var index = arr.push;
    /** @type {function(this:IArrayLike<T>, ...T): number} */
    var push = arr.push;
    /** @type {function(this:(IArrayLike<T>|string), *=, *=): !Array<T>} */
    var slice = arr.slice;
    /**
     * @param {string} list
     * @param {!Object} value
     * @return {?}
     */
    var indexOf = function(list, value) {
      /** @type {number} */
      var i = 0;
      var l = list.length;
      for (; l > i; i++) {
        if (list[i] === value) {
          return i;
        }
      }
      return -1;
    };
    /** @type {string} */
    var value = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped";
    /** @type {string} */
    var _test = "[\\x20\\t\\r\\n\\f]";
    /** @type {string} */
    var escRightBracket = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+";
    /** @type {string} */
    var _end2 = "\\[" + _test + "*(" + escRightBracket + ")(?:" + _test + "*([*^$|!~]?=)" + _test + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + escRightBracket + "))|)" + _test + "*\\]";
    /** @type {string} */
    var query = ":(" + escRightBracket + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + _end2 + ")*)|.*)\\)|)";
    /** @type {!RegExp} */
    var entityEscapeRegExp = new RegExp(_test + "+", "g");
    /** @type {!RegExp} */
    var rtrim = new RegExp("^" + _test + "+|((?:^|[^\\\\])(?:\\\\.)*)" + _test + "+$", "g");
    /** @type {!RegExp} */
    var chunker = new RegExp("^" + _test + "*," + _test + "*");
    /** @type {!RegExp} */
    var rcomma = new RegExp("^" + _test + "*([>+~]|" + _test + ")" + _test + "*");
    /** @type {!RegExp} */
    var reTrimSpaces = new RegExp("=" + _test + "*([^\\]'\"]*?)" + _test + "*\\]", "g");
    /** @type {!RegExp} */
    var filter = new RegExp(query);
    /** @type {!RegExp} */
    var ridentifier = new RegExp("^" + escRightBracket + "$");
    var matchExpr = {
      ID : new RegExp("^#(" + escRightBracket + ")"),
      CLASS : new RegExp("^\\.(" + escRightBracket + ")"),
      TAG : new RegExp("^(" + escRightBracket + "|[*])"),
      ATTR : new RegExp("^" + _end2),
      PSEUDO : new RegExp("^" + query),
      CHILD : new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + _test + "*(even|odd|(([+-]|)(\\d*)n|)" + _test + "*(?:([+-]|)" + _test + "*(\\d+)|))" + _test + "*\\)|)", "i"),
      bool : new RegExp("^(?:" + value + ")$", "i"),
      needsContext : new RegExp("^" + _test + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + _test + "*((?:-\\d)?\\d*)" + _test + "*\\)|)(?=[^-]|$)", "i")
    };
    /** @type {!RegExp} */
    var inputNodeNames = /^(?:input|select|textarea|button)$/i;
    /** @type {!RegExp} */
    var rnoType = /^h\d$/i;
    /** @type {!RegExp} */
    var rnative = /^[^{]+\{\s*\[native \w/;
    /** @type {!RegExp} */
    var customSelectorReg = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/;
    /** @type {!RegExp} */
    var RE_PSEUDOS = /[+~]/;
    /** @type {!RegExp} */
    var rcssescape = /'|\\/g;
    /** @type {!RegExp} */
    var x = new RegExp("\\\\([\\da-f]{1,6}" + _test + "?|(" + _test + ")|.)", "ig");
    /**
     * @param {?} fn
     * @param {string} name
     * @param {boolean} escapedWhitespace
     * @return {?}
     */
    var n = function(fn, name, escapedWhitespace) {
      /** @type {number} */
      var high = "0x" + name - 65536;
      return high !== high || escapedWhitespace ? name : 0 > high ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, 1023 & high | 56320);
    };
    /**
     * @return {undefined}
     */
    var listener = function() {
      apply();
    };
    try {
      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
      arr[preferredDoc.childNodes.length].nodeType;
    } catch (s) {
      push = {
        apply : arr.length ? function(obj, x) {
          index.apply(obj, slice.call(x));
        } : function(obj, data) {
          var i = obj.length;
          /** @type {number} */
          var off = 0;
          for (; obj[i++] = data[off++];) {
          }
          /** @type {number} */
          obj.length = i - 1;
        }
      };
    }
    support = Sizzle.support = {};
    /** @type {function(!Object): ?} */
    isXML = Sizzle.isXML = function(elem) {
      var documentElement = elem && (elem.ownerDocument || elem).documentElement;
      return documentElement ? "HTML" !== documentElement.nodeName : false;
    };
    /** @type {function(!Object): ?} */
    apply = Sizzle.setDocument = function(node) {
      var seed;
      var parent;
      var doc = node ? node.ownerDocument || node : preferredDoc;
      return doc !== document && 9 === doc.nodeType && doc.documentElement ? (document = doc, element = document.documentElement, documentIsHTML = !isXML(document), (parent = document.defaultView) && parent.top !== parent && (parent.addEventListener ? parent.addEventListener("unload", listener, false) : parent.attachEvent && parent.attachEvent("onunload", listener)), support.attributes = assert(function(elm) {
        return elm.className = "i", !elm.getAttribute("className");
      }), support.getElementsByTagName = assert(function(testee) {
        return testee.appendChild(document.createComment("")), !testee.getElementsByTagName("*").length;
      }), support.getElementsByClassName = rnative.test(document.getElementsByClassName), support.getById = assert(function(fields) {
        return element.appendChild(fields).id = expando, !document.getElementsByName || !document.getElementsByName(expando).length;
      }), support.getById ? (Expr.find.ID = function(elem, context) {
        if ("undefined" != typeof context.getElementById && documentIsHTML) {
          var c_style = context.getElementById(elem);
          return c_style ? [c_style] : [];
        }
      }, Expr.filter.ID = function(id) {
        var target = id.replace(x, n);
        return function(e) {
          return e.getAttribute("id") === target;
        };
      }) : (delete Expr.find.ID, Expr.filter.ID = function(id) {
        var s = id.replace(x, n);
        return function(elem) {
          var result = "undefined" != typeof elem.getAttributeNode && elem.getAttributeNode("id");
          return result && result.value === s;
        };
      }), Expr.find.TAG = support.getElementsByTagName ? function(v, t) {
        return "undefined" != typeof t.getElementsByTagName ? t.getElementsByTagName(v) : support.qsa ? t.querySelectorAll(v) : void 0;
      } : function(selector, document) {
        var arg;
        /** @type {!Array} */
        var results = [];
        /** @type {number} */
        var u = 0;
        var r = document.getElementsByTagName(selector);
        if ("*" === selector) {
          for (; arg = r[u++];) {
            if (1 === arg.nodeType) {
              results.push(arg);
            }
          }
          return results;
        }
        return r;
      }, Expr.find.CLASS = support.getElementsByClassName && function(l, docDom) {
        return "undefined" != typeof docDom.getElementsByClassName && documentIsHTML ? docDom.getElementsByClassName(l) : void 0;
      }, opt = [], rbuggyQSA = [], (support.qsa = rnative.test(document.querySelectorAll)) && (assert(function(frag) {
        /** @type {string} */
        element.appendChild(frag).innerHTML = "<a id='" + expando + "'></a><select id='" + expando + "-\r\\' msallowcapture=''><option selected=''></option></select>";
        if (frag.querySelectorAll("[msallowcapture^='']").length) {
          rbuggyQSA.push("[*^$]=" + _test + "*(?:''|\"\")");
        }
        if (!frag.querySelectorAll("[selected]").length) {
          rbuggyQSA.push("\\[" + _test + "*(?:value|" + value + ")");
        }
        if (!frag.querySelectorAll("[id~=" + expando + "-]").length) {
          rbuggyQSA.push("~=");
        }
        if (!frag.querySelectorAll(":checked").length) {
          rbuggyQSA.push(":checked");
        }
        if (!frag.querySelectorAll("a#" + expando + "+*").length) {
          rbuggyQSA.push(".#.+[+~]");
        }
      }), assert(function(e) {
        var element = document.createElement("input");
        element.setAttribute("type", "hidden");
        e.appendChild(element).setAttribute("name", "D");
        if (e.querySelectorAll("[name=d]").length) {
          rbuggyQSA.push("name" + _test + "*[*^$|!~]?=");
        }
        if (!e.querySelectorAll(":enabled").length) {
          rbuggyQSA.push(":enabled", ":disabled");
        }
        e.querySelectorAll("*,:x");
        rbuggyQSA.push(",.*:");
      })), (support.matchesSelector = rnative.test(matches = element.matches || element.webkitMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector || element.msMatchesSelector)) && assert(function(el) {
        support.disconnectedMatch = matches.call(el, "div");
        matches.call(el, "[s!='']:x");
        opt.push("!=", query);
      }), rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|")), opt = opt.length && new RegExp(opt.join("|")), seed = rnative.test(element.compareDocumentPosition), contains = seed || rnative.test(element.contains) ? function(a, b) {
        var adown = 9 === a.nodeType ? a.documentElement : a;
        var bup = b && b.parentNode;
        return a === bup || !(!bup || 1 !== bup.nodeType || !(adown.contains ? adown.contains(bup) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(bup)));
      } : function(a, b) {
        if (b) {
          for (; b = b.parentNode;) {
            if (b === a) {
              return true;
            }
          }
        }
        return false;
      }, ret = seed ? function(a, b) {
        if (a === b) {
          return formattedString = true, 0;
        }
        /** @type {number} */
        var idx = !a.compareDocumentPosition - !b.compareDocumentPosition;
        return idx ? idx : (idx = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & idx || !support.sortDetached && b.compareDocumentPosition(a) === idx ? a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ? -1 : b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0 : 4 & idx ? -1 : 1);
      } : function(a, b) {
        if (a === b) {
          return formattedString = true, 0;
        }
        var cur;
        /** @type {number} */
        var i = 0;
        var aup = a.parentNode;
        var bup = b.parentNode;
        /** @type {!Array} */
        var ap = [a];
        /** @type {!Array} */
        var bp = [b];
        if (!aup || !bup) {
          return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
        }
        if (aup === bup) {
          return siblingCheck(a, b);
        }
        /** @type {!Object} */
        cur = a;
        for (; cur = cur.parentNode;) {
          ap.unshift(cur);
        }
        /** @type {!Object} */
        cur = b;
        for (; cur = cur.parentNode;) {
          bp.unshift(cur);
        }
        for (; ap[i] === bp[i];) {
          i++;
        }
        return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
      }, document) : document;
    };
    /**
     * @param {string} expr
     * @param {!Array} set
     * @return {?}
     */
    Sizzle.matches = function(expr, set) {
      return Sizzle(expr, null, null, set);
    };
    /**
     * @param {!Object} elem
     * @param {string} selector
     * @return {?}
     */
    Sizzle.matchesSelector = function(elem, selector) {
      if ((elem.ownerDocument || elem) !== document && apply(elem), selector = selector.replace(reTrimSpaces, "='$1']"), support.matchesSelector && documentIsHTML && !compilerCache[selector + " "] && (!opt || !opt.test(selector)) && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
        try {
          var ret = matches.call(elem, selector);
          if (ret || support.disconnectedMatch || elem.document && 11 !== elem.document.nodeType) {
            return ret;
          }
        } catch (r) {
        }
      }
      return Sizzle(selector, document, null, [elem]).length > 0;
    };
    /**
     * @param {!Object} context
     * @param {!Object} selector
     * @return {?}
     */
    Sizzle.contains = function(context, selector) {
      return (context.ownerDocument || context) !== document && apply(context), contains(context, selector);
    };
    /**
     * @param {!Object} value
     * @param {string} name
     * @return {?}
     */
    Sizzle.attr = function(value, name) {
      if ((value.ownerDocument || value) !== document) {
        apply(value);
      }
      var fn = Expr.attrHandle[name.toLowerCase()];
      var val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(value, name, !documentIsHTML) : void 0;
      return void 0 !== val ? val : support.attributes || !documentIsHTML ? value.getAttribute(name) : (val = value.getAttributeNode(name)) && val.specified ? val.value : null;
    };
    /**
     * @param {string} type
     * @return {?}
     */
    Sizzle.error = function(type) {
      throw new Error("Syntax error, unrecognized expression: " + type);
    };
    /**
     * @param {!Array} results
     * @return {?}
     */
    Sizzle.uniqueSort = function(results) {
      var item;
      /** @type {!Array} */
      var result = [];
      /** @type {number} */
      var i = 0;
      /** @type {number} */
      var index = 0;
      if (formattedString = !support.detectDuplicates, sortInput = !support.sortStable && results.slice(0), results.sort(ret), formattedString) {
        for (; item = results[index++];) {
          if (item === results[index]) {
            /** @type {number} */
            i = result.push(index);
          }
        }
        for (; i--;) {
          results.splice(result[i], 1);
        }
      }
      return sortInput = null, results;
    };
    /** @type {function(!Object): ?} */
    format = Sizzle.getText = function(type) {
      var val;
      /** @type {string} */
      var result = "";
      /** @type {number} */
      var n = 0;
      var t = type.nodeType;
      if (t) {
        if (1 === t || 9 === t || 11 === t) {
          if ("string" == typeof type.textContent) {
            return type.textContent;
          }
          type = type.firstChild;
          for (; type; type = type.nextSibling) {
            result = result + format(type);
          }
        } else {
          if (3 === t || 4 === t) {
            return type.nodeValue;
          }
        }
      } else {
        for (; val = type[n++];) {
          result = result + format(val);
        }
      }
      return result;
    };
    Expr = Sizzle.selectors = {
      cacheLength : 50,
      createPseudo : markFunction,
      match : matchExpr,
      attrHandle : {},
      find : {},
      relative : {
        ">" : {
          dir : "parentNode",
          first : true
        },
        " " : {
          dir : "parentNode"
        },
        "+" : {
          dir : "previousSibling",
          first : true
        },
        "~" : {
          dir : "previousSibling"
        }
      },
      preFilter : {
        ATTR : function(b) {
          return b[1] = b[1].replace(x, n), b[3] = (b[3] || b[4] || b[5] || "").replace(x, n), "~=" === b[2] && (b[3] = " " + b[3] + " "), b.slice(0, 4);
        },
        CHILD : function(match) {
          return match[1] = match[1].toLowerCase(), "nth" === match[1].slice(0, 3) ? (match[3] || Sizzle.error(match[0]), match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * ("even" === match[3] || "odd" === match[3])), match[5] = +(match[7] + match[8] || "odd" === match[3])) : match[3] && Sizzle.error(match[0]), match;
        },
        PSEUDO : function(result) {
          var value;
          var options = !result[6] && result[2];
          return matchExpr.CHILD.test(result[0]) ? null : (result[3] ? result[2] = result[4] || result[5] || "" : options && filter.test(options) && (value = tokenize(options, true)) && (value = options.indexOf(")", options.length - value) - options.length) && (result[0] = result[0].slice(0, value), result[2] = options.slice(0, value)), result.slice(0, 3));
        }
      },
      filter : {
        TAG : function(match) {
          var nodeName = match.replace(x, n).toLowerCase();
          return "*" === match ? function() {
            return true;
          } : function(elem) {
            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
          };
        },
        CLASS : function(className) {
          var pattern = classCache[className + " "];
          return pattern || (pattern = new RegExp("(^|" + _test + ")" + className + "(" + _test + "|$)")) && classCache(className, function(e) {
            return pattern.test("string" == typeof e.className && e.className || "undefined" != typeof e.getAttribute && e.getAttribute("class") || "");
          });
        },
        ATTR : function(name, string, value) {
          return function(input) {
            var key = Sizzle.attr(input, name);
            return null == key ? "!=" === string : string ? (key = key + "", "=" === string ? key === value : "!=" === string ? key !== value : "^=" === string ? value && 0 === key.indexOf(value) : "*=" === string ? value && key.indexOf(value) > -1 : "$=" === string ? value && key.slice(-value.length) === value : "~=" === string ? (" " + key.replace(entityEscapeRegExp, " ") + " ").indexOf(value) > -1 : "|=" === string ? key === value || key.slice(0, value.length + 1) === value + "-" : false) : true;
          };
        },
        CHILD : function(type, what, argument, first, last) {
          /** @type {boolean} */
          var simple = "nth" !== type.slice(0, 3);
          /** @type {boolean} */
          var forward = "last" !== type.slice(-4);
          /** @type {boolean} */
          var ofType = "of-type" === what;
          return 1 === first && 0 === last ? function(tplDiv) {
            return !!tplDiv.parentNode;
          } : function(elem, n, xml) {
            var cache;
            var uniqueCache;
            var outerCache;
            var node;
            var nodeIndex;
            var start;
            /** @type {string} */
            var dir = simple !== forward ? "nextSibling" : "previousSibling";
            var parent = elem.parentNode;
            var name = ofType && elem.nodeName.toLowerCase();
            /** @type {boolean} */
            var useCache = !xml && !ofType;
            /** @type {boolean} */
            var diff = false;
            if (parent) {
              if (simple) {
                for (; dir;) {
                  /** @type {!Node} */
                  node = elem;
                  for (; node = node[dir];) {
                    if (ofType ? node.nodeName.toLowerCase() === name : 1 === node.nodeType) {
                      return false;
                    }
                  }
                  /** @type {(boolean|string)} */
                  start = dir = "only" === type && !start && "nextSibling";
                }
                return true;
              }
              if (start = [forward ? parent.firstChild : parent.lastChild], forward && useCache) {
                node = parent;
                outerCache = node[expando] || (node[expando] = {});
                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                cache = uniqueCache[type] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = nodeIndex && cache[2];
                node = nodeIndex && parent.childNodes[nodeIndex];
                for (; node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop();) {
                  if (1 === node.nodeType && ++diff && node === elem) {
                    /** @type {!Array} */
                    uniqueCache[type] = [dirruns, nodeIndex, diff];
                    break;
                  }
                }
              } else {
                if (useCache && (node = elem, outerCache = node[expando] || (node[expando] = {}), uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {}), cache = uniqueCache[type] || [], nodeIndex = cache[0] === dirruns && cache[1], diff = nodeIndex), diff === false) {
                  for (; node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop();) {
                    if ((ofType ? node.nodeName.toLowerCase() === name : 1 === node.nodeType) && ++diff && (useCache && (outerCache = node[expando] || (node[expando] = {}), uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {}), uniqueCache[type] = [dirruns, diff]), node === elem)) {
                      break;
                    }
                  }
                }
              }
              return diff = diff - last, diff === first || diff % first === 0 && diff / first >= 0;
            }
          };
        },
        PSEUDO : function(pseudo, argument) {
          var args;
          var fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
          return fn[expando] ? fn(argument) : fn.length > 1 ? (args = [pseudo, pseudo, "", argument], Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
            var idx;
            var matched = fn(seed, argument);
            var i = matched.length;
            for (; i--;) {
              idx = indexOf(seed, matched[i]);
              /** @type {boolean} */
              seed[idx] = !(matches[idx] = matched[i]);
            }
          }) : function(responce) {
            return fn(responce, 0, args);
          }) : fn;
        }
      },
      pseudos : {
        not : markFunction(function(selector) {
          /** @type {!Array} */
          var a = [];
          /** @type {!Array} */
          var results = [];
          var matcher = compile(selector.replace(rtrim, "$1"));
          return matcher[expando] ? markFunction(function(value, subTag, canCreateDiscussions, context) {
            var v;
            var actual = matcher(value, null, context, []);
            var j = value.length;
            for (; j--;) {
              if (v = actual[j]) {
                /** @type {boolean} */
                value[j] = !(subTag[j] = v);
              }
            }
          }) : function(sNewObjName, i, context) {
            return a[0] = sNewObjName, matcher(a, null, context, results), a[0] = null, !results.pop();
          };
        }),
        has : markFunction(function(selector) {
          return function(elem) {
            return Sizzle(selector, elem).length > 0;
          };
        }),
        contains : markFunction(function(i) {
          return i = i.replace(x, n), function(a) {
            return (a.textContent || a.innerText || format(a)).indexOf(i) > -1;
          };
        }),
        lang : markFunction(function(lang) {
          return ridentifier.test(lang || "") || Sizzle.error("unsupported lang: " + lang), lang = lang.replace(x, n).toLowerCase(), function(elem) {
            var elemLang;
            do {
              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                return elemLang = elemLang.toLowerCase(), elemLang === lang || 0 === elemLang.indexOf(lang + "-");
              }
            } while ((elem = elem.parentNode) && 1 === elem.nodeType);
            return false;
          };
        }),
        target : function(type) {
          var charListNotLatin = window.location && window.location.hash;
          return charListNotLatin && charListNotLatin.slice(1) === type.id;
        },
        root : function(type) {
          return type === element;
        },
        focus : function(type) {
          return type === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(type.type || type.href || ~type.tabIndex);
        },
        enabled : function(elem) {
          return elem.disabled === false;
        },
        disabled : function(type) {
          return type.disabled === true;
        },
        checked : function(type) {
          var custom = type.nodeName.toLowerCase();
          return "input" === custom && !!type.checked || "option" === custom && !!type.selected;
        },
        selected : function(type) {
          return type.parentNode && type.parentNode.selectedIndex, type.selected === true;
        },
        empty : function(elem) {
          elem = elem.firstChild;
          for (; elem; elem = elem.nextSibling) {
            if (elem.nodeType < 6) {
              return false;
            }
          }
          return true;
        },
        parent : function(type) {
          return !Expr.pseudos.empty(type);
        },
        header : function(elem) {
          return rnoType.test(elem.nodeName);
        },
        input : function(target) {
          return inputNodeNames.test(target.nodeName);
        },
        button : function(elem) {
          var left = elem.nodeName.toLowerCase();
          return "input" === left && "button" === elem.type || "button" === left;
        },
        text : function(type) {
          var EXT;
          return "input" === type.nodeName.toLowerCase() && "text" === type.type && (null == (EXT = type.getAttribute("type")) || "text" === EXT.toLowerCase());
        },
        first : createPositionalPseudo(function() {
          return [0];
        }),
        last : createPositionalPseudo(function(canCreateDiscussions, isSlidingUp) {
          return [isSlidingUp - 1];
        }),
        eq : createPositionalPseudo(function(canCreateDiscussions, dt, max) {
          return [0 > max ? max + dt : max];
        }),
        even : createPositionalPseudo(function(lastshuffle, propValue) {
          /** @type {number} */
          var value = 0;
          for (; propValue > value; value = value + 2) {
            lastshuffle.push(value);
          }
          return lastshuffle;
        }),
        odd : createPositionalPseudo(function(lastshuffle, propValue) {
          /** @type {number} */
          var value = 1;
          for (; propValue > value; value = value + 2) {
            lastshuffle.push(value);
          }
          return lastshuffle;
        }),
        lt : createPositionalPseudo(function(newNodeLists, dt, max) {
          var itemNodeList = 0 > max ? max + dt : max;
          for (; --itemNodeList >= 0;) {
            newNodeLists.push(itemNodeList);
          }
          return newNodeLists;
        }),
        gt : createPositionalPseudo(function(newNodeLists, dt, max) {
          var itemNodeList = 0 > max ? max + dt : max;
          for (; ++itemNodeList < dt;) {
            newNodeLists.push(itemNodeList);
          }
          return newNodeLists;
        })
      }
    };
    Expr.pseudos.nth = Expr.pseudos.eq;
    for (i in{
      radio : true,
      checkbox : true,
      file : true,
      password : true,
      image : true
    }) {
      Expr.pseudos[i] = jQuerify(i);
    }
    for (i in{
      submit : true,
      reset : true
    }) {
      Expr.pseudos[i] = createButtonPseudo(i);
    }
    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters;
    /** @type {function(string, number): ?} */
    tokenize = Sizzle.tokenize = function(selector, parseOnly) {
      var matched;
      var match;
      var tokens;
      var type;
      var soFar;
      var groups;
      var preFilters;
      var cached = tokenCache[selector + " "];
      if (cached) {
        return parseOnly ? 0 : cached.slice(0);
      }
      /** @type {string} */
      soFar = selector;
      /** @type {!Array} */
      groups = [];
      preFilters = Expr.preFilter;
      for (; soFar;) {
        if (!(matched && !(match = chunker.exec(soFar)))) {
          if (match) {
            soFar = soFar.slice(match[0].length) || soFar;
          }
          groups.push(tokens = []);
        }
        /** @type {boolean} */
        matched = false;
        if (match = rcomma.exec(soFar)) {
          /** @type {string} */
          matched = match.shift();
          tokens.push({
            value : matched,
            type : match[0].replace(rtrim, " ")
          });
          soFar = soFar.slice(matched.length);
        }
        for (type in Expr.filter) {
          if (!(!(match = matchExpr[type].exec(soFar)) || preFilters[type] && !(match = preFilters[type](match)))) {
            matched = match.shift();
            tokens.push({
              value : matched,
              type : type,
              matches : match
            });
            soFar = soFar.slice(matched.length);
          }
        }
        if (!matched) {
          break;
        }
      }
      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
    };
    return compile = Sizzle.compile = function(selector, group) {
      var i;
      /** @type {!Array} */
      var setMatchers = [];
      /** @type {!Array} */
      var elementMatchers = [];
      var cached = compilerCache[selector + " "];
      if (!cached) {
        if (!group) {
          group = tokenize(selector);
        }
        i = group.length;
        for (; i--;) {
          cached = matcherFromTokens(group[i]);
          if (cached[expando]) {
            setMatchers.push(cached);
          } else {
            elementMatchers.push(cached);
          }
        }
        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
        /** @type {string} */
        cached.selector = selector;
      }
      return cached;
    }, select = Sizzle.select = function(selector, context, results, seed) {
      var i;
      var tokens;
      var token;
      var type;
      var find;
      /** @type {(!Function|boolean)} */
      var compiled = "function" == typeof selector && selector;
      var match = !seed && tokenize(selector = compiled.selector || selector);
      if (results = results || [], 1 === match.length) {
        if (tokens = match[0] = match[0].slice(0), tokens.length > 2 && "ID" === (token = tokens[0]).type && support.getById && 9 === context.nodeType && documentIsHTML && Expr.relative[tokens[1].type]) {
          if (context = (Expr.find.ID(token.matches[0].replace(x, n), context) || [])[0], !context) {
            return results;
          }
          if (compiled) {
            context = context.parentNode;
          }
          selector = selector.slice(tokens.shift().value.length);
        }
        i = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
        for (; i--;) {
          if (token = tokens[i], Expr.relative[type = token.type]) {
            break;
          }
          if ((find = Expr.find[type]) && (seed = find(token.matches[0].replace(x, n), RE_PSEUDOS.test(tokens[0].type) && testContext(context.parentNode) || context))) {
            if (tokens.splice(i, 1), selector = seed.length && toSelector(tokens), !selector) {
              return push.apply(results, seed), results;
            }
            break;
          }
        }
      }
      return (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || RE_PSEUDOS.test(selector) && testContext(context.parentNode) || context), results;
    }, support.sortStable = expando.split("").sort(ret).join("") === expando, support.detectDuplicates = !!formattedString, apply(), support.sortDetached = assert(function(div1) {
      return 1 & div1.compareDocumentPosition(document.createElement("div"));
    }), assert(function(aItem) {
      return aItem.innerHTML = "<a href='#'></a>", "#" === aItem.firstChild.getAttribute("href");
    }) || addHandle("type|href|height|width", function(e, x, res) {
      return res ? void 0 : e.getAttribute(x, "type" === x.toLowerCase() ? 1 : 2);
    }), support.attributes && assert(function(aItem) {
      return aItem.innerHTML = "<input/>", aItem.firstChild.setAttribute("value", ""), "" === aItem.firstChild.getAttribute("value");
    }) || addHandle("value", function(object, canCreateDiscussions, directory) {
      return directory || "input" !== object.nodeName.toLowerCase() ? void 0 : object.defaultValue;
    }), assert(function(e) {
      return null == e.getAttribute("disabled");
    }) || addHandle(value, function(elem, name, n) {
      var val;
      return n ? void 0 : elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
    }), Sizzle;
  }(window);
  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors;
  jQuery.expr[":"] = jQuery.expr.pseudos;
  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;
  /**
   * @param {?} elem
   * @param {string} dir
   * @param {?} name
   * @return {?}
   */
  var dir = function(elem, dir, name) {
    /** @type {!Array} */
    var matched = [];
    /** @type {boolean} */
    var o = void 0 !== name;
    for (; (elem = elem[dir]) && 9 !== elem.nodeType;) {
      if (1 === elem.nodeType) {
        if (o && jQuery(elem).is(name)) {
          break;
        }
        matched.push(elem);
      }
    }
    return matched;
  };
  /**
   * @param {!Object} node
   * @param {!Object} elem
   * @return {?}
   */
  var _sibling = function(node, elem) {
    /** @type {!Array} */
    var result = [];
    for (; node; node = node.nextSibling) {
      if (1 === node.nodeType && node !== elem) {
        result.push(node);
      }
    }
    return result;
  };
  var rneedsContext = jQuery.expr.match.needsContext;
  /** @type {!RegExp} */
  var rsingleTag = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
  /** @type {!RegExp} */
  var hookRE = /^.[^:#\[\.,]*$/;
  /**
   * @param {string} type
   * @param {!Object} name
   * @param {!Object} data
   * @return {?}
   */
  jQuery.filter = function(type, name, data) {
    var elem = name[0];
    return data && (type = ":not(" + type + ")"), 1 === name.length && 1 === elem.nodeType ? jQuery.find.matchesSelector(elem, type) ? [elem] : [] : jQuery.find.matches(type, jQuery.grep(name, function(nodeToInspect) {
      return 1 === nodeToInspect.nodeType;
    }));
  };
  jQuery.fn.extend({
    find : function(selector) {
      var i;
      /** @type {!Array} */
      var ret = [];
      var self = this;
      var len = self.length;
      if ("string" != typeof selector) {
        return this.pushStack(jQuery(selector).filter(function() {
          /** @type {number} */
          i = 0;
          for (; len > i; i++) {
            if (jQuery.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }
      /** @type {number} */
      i = 0;
      for (; len > i; i++) {
        jQuery.find(selector, self[i], ret);
      }
      return ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret), ret.selector = this.selector ? this.selector + " " + selector : selector, ret;
    },
    filter : function(type) {
      return this.pushStack(filter(this, type || [], false));
    },
    not : function(args) {
      return this.pushStack(filter(this, args || [], true));
    },
    is : function(type) {
      return !!filter(this, "string" == typeof type && rneedsContext.test(type) ? jQuery(type) : type || [], false).length;
    }
  });
  var rootjQuery;
  /** @type {!RegExp} */
  var customSelectorReg = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;
  /** @type {function(string, !Object, !Object): ?} */
  var init = jQuery.fn.init = function(selector, context, root) {
    var match;
    var elem;
    if (!selector) {
      return this;
    }
    if (root = root || rootjQuery, "string" == typeof selector) {
      if (match = "<" === selector.charAt(0) && ">" === selector.charAt(selector.length - 1) && selector.length >= 3 ? [null, selector, null] : customSelectorReg.exec(selector), !match || !match[1] && context) {
        return !context || context.jquery ? (context || root).find(selector) : this.constructor(context).find(selector);
      }
      if (match[1]) {
        if (context = context instanceof jQuery ? context[0] : context, jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)), rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
          for (match in context) {
            if (jQuery.isFunction(this[match])) {
              this[match](context[match]);
            } else {
              this.attr(match, context[match]);
            }
          }
        }
        return this;
      }
      if (elem = document.getElementById(match[2]), elem && elem.parentNode) {
        if (elem.id !== match[2]) {
          return rootjQuery.find(selector);
        }
        /** @type {number} */
        this.length = 1;
        this[0] = elem;
      }
      return this.context = document, this.selector = selector, this;
    }
    return selector.nodeType ? (this.context = this[0] = selector, this.length = 1, this) : jQuery.isFunction(selector) ? "undefined" != typeof root.ready ? root.ready(selector) : selector(jQuery) : (void 0 !== selector.selector && (this.selector = selector.selector, this.context = selector.context), jQuery.makeArray(selector, this));
  };
  init.prototype = jQuery.fn;
  rootjQuery = jQuery(document);
  /** @type {!RegExp} */
  var testRxp = /^(?:parents|prev(?:Until|All))/;
  var guaranteedUnique = {
    children : true,
    contents : true,
    next : true,
    prev : true
  };
  jQuery.fn.extend({
    has : function(className) {
      var i;
      var obj = jQuery(className, this);
      var length = obj.length;
      return this.filter(function() {
        /** @type {number} */
        i = 0;
        for (; length > i; i++) {
          if (jQuery.contains(this, obj[i])) {
            return true;
          }
        }
      });
    },
    closest : function(selector, context) {
      var cur;
      /** @type {number} */
      var i = 0;
      var l = this.length;
      /** @type {!Array} */
      var ret = [];
      var pos = rneedsContext.test(selector) || "string" != typeof selector ? jQuery(selector, context || this.context) : 0;
      for (; l > i; i++) {
        cur = this[i];
        for (; cur && cur !== context; cur = cur.parentNode) {
          if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : 1 === cur.nodeType && jQuery.find.matchesSelector(cur, selector))) {
            ret.push(cur);
            break;
          }
        }
      }
      return this.pushStack(ret.length > 1 ? jQuery.uniqueSort(ret) : ret);
    },
    index : function(elem) {
      return elem ? "string" == typeof elem ? jQuery.inArray(this[0], jQuery(elem)) : jQuery.inArray(elem.jquery ? elem[0] : elem, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
    },
    add : function(type, name) {
      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(type, name))));
    },
    addBack : function(selector) {
      return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector));
    }
  });
  jQuery.each({
    parent : function(type) {
      var p = type.parentNode;
      return p && 11 !== p.nodeType ? p : null;
    },
    parents : function(elem) {
      return dir(elem, "parentNode");
    },
    parentsUntil : function(elem, i, until) {
      return dir(elem, "parentNode", until);
    },
    next : function(type) {
      return sibling(type, "nextSibling");
    },
    prev : function(type) {
      return sibling(type, "previousSibling");
    },
    nextAll : function(elem) {
      return dir(elem, "nextSibling");
    },
    prevAll : function(elem) {
      return dir(elem, "previousSibling");
    },
    nextUntil : function(elem, i, until) {
      return dir(elem, "nextSibling", until);
    },
    prevUntil : function(elem, i, until) {
      return dir(elem, "previousSibling", until);
    },
    siblings : function(elem) {
      return _sibling((elem.parentNode || {}).firstChild, elem);
    },
    children : function(elem) {
      return _sibling(elem.firstChild);
    },
    contents : function(elem) {
      return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);
    }
  }, function(name, n) {
    /**
     * @param {string} index
     * @param {string} target
     * @return {?}
     */
    jQuery.fn[name] = function(index, target) {
      var ret = jQuery.map(this, n, index);
      return "Until" !== name.slice(-5) && (target = index), target && "string" == typeof target && (ret = jQuery.filter(target, ret)), this.length > 1 && (guaranteedUnique[name] || (ret = jQuery.uniqueSort(ret)), testRxp.test(name) && (ret = ret.reverse())), this.pushStack(ret);
    };
  });
  /** @type {!RegExp} */
  var rnotwhite = /\S+/g;
  /**
   * @param {string} options
   * @return {?}
   */
  jQuery.Callbacks = function(options) {
    options = "string" == typeof options ? createOptions(options) : jQuery.extend({}, options);
    var costSum;
    var t;
    var gasSum;
    var o;
    /** @type {!Array} */
    var list = [];
    /** @type {!Array} */
    var s = [];
    /** @type {number} */
    var i = -1;
    /**
     * @return {undefined}
     */
    var fire = function() {
      o = options.once;
      /** @type {boolean} */
      gasSum = costSum = true;
      for (; s.length; i = -1) {
        t = s.shift();
        for (; ++i < list.length;) {
          if (list[i].apply(t[0], t[1]) === false && options.stopOnFalse) {
            i = list.length;
            /** @type {boolean} */
            t = false;
          }
        }
      }
      if (!options.memory) {
        /** @type {boolean} */
        t = false;
      }
      /** @type {boolean} */
      costSum = false;
      if (o) {
        /** @type {(Array|string)} */
        list = t ? [] : "";
      }
    };
    var self = {
      add : function() {
        return list && (t && !costSum && (i = list.length - 1, s.push(t)), function add(callback) {
          jQuery.each(callback, function(canCreateDiscussions, name) {
            if (jQuery.isFunction(name)) {
              if (!(options.unique && self.has(name))) {
                list.push(name);
              }
            } else {
              if (name && name.length && "string" !== jQuery.type(name)) {
                add(name);
              }
            }
          });
        }(arguments), t && !costSum && fire()), this;
      },
      remove : function() {
        return jQuery.each(arguments, function(canCreateDiscussions, r) {
          var index;
          for (; (index = jQuery.inArray(r, list, index)) > -1;) {
            list.splice(index, 1);
            if (i >= index) {
              i--;
            }
          }
        }), this;
      },
      has : function(className) {
        return className ? jQuery.inArray(className, list) > -1 : list.length > 0;
      },
      empty : function() {
        return list && (list = []), this;
      },
      disable : function() {
        return o = s = [], list = t = "", this;
      },
      disabled : function() {
        return !list;
      },
      lock : function() {
        return o = true, t || self.disable(), this;
      },
      locked : function() {
        return !!o;
      },
      fireWith : function(context, args) {
        return o || (args = args || [], args = [context, args.slice ? args.slice() : args], s.push(args), costSum || fire()), this;
      },
      fire : function() {
        return self.fireWith(this, arguments), this;
      },
      fired : function() {
        return !!gasSum;
      }
    };
    return self;
  };
  jQuery.extend({
    Deferred : function(func) {
      /** @type {!Array} */
      var d = [["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]];
      /** @type {string} */
      var state = "pending";
      var promise = {
        state : function() {
          return state;
        },
        always : function() {
          return deferred.done(arguments).fail(arguments), this;
        },
        then : function() {
          /** @type {!Arguments} */
          var fns = arguments;
          return jQuery.Deferred(function(newDefer) {
            jQuery.each(d, function(i, tuple) {
              var fn = jQuery.isFunction(fns[i]) && fns[i];
              deferred[tuple[1]](function() {
                var returned = fn && fn.apply(this, arguments);
                if (returned && jQuery.isFunction(returned.promise)) {
                  returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                } else {
                  newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                }
              });
            });
            /** @type {null} */
            fns = null;
          }).promise();
        },
        promise : function(error) {
          return null != error ? jQuery.extend(error, promise) : promise;
        }
      };
      var deferred = {};
      return promise.pipe = promise.then, jQuery.each(d, function(x2, tuple) {
        var list = tuple[2];
        var stateString = tuple[3];
        promise[tuple[1]] = list.add;
        if (stateString) {
          list.add(function() {
            state = stateString;
          }, d[1 ^ x2][2].disable, d[2][2].lock);
        }
        /**
         * @return {?}
         */
        deferred[tuple[0]] = function() {
          return deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments), this;
        };
        deferred[tuple[0] + "With"] = list.fireWith;
      }), promise.promise(deferred), func && func.call(deferred, deferred), deferred;
    },
    when : function(object) {
      /** @type {number} */
      var i = 0;
      /** @type {!Array<?>} */
      var resolveValues = slice.call(arguments);
      /** @type {number} */
      var length = resolveValues.length;
      /** @type {number} */
      var index = 1 !== length || object && jQuery.isFunction(object.promise) ? length : 0;
      var deferred = 1 === index ? object : jQuery.Deferred();
      /**
       * @param {number} i
       * @param {number} ctx
       * @param {number} val
       * @return {?}
       */
      var updateFn = function(i, ctx, val) {
        return function(value) {
          ctx[i] = this;
          val[i] = arguments.length > 1 ? slice.call(arguments) : value;
          if (val === progressValues) {
            deferred.notifyWith(ctx, val);
          } else {
            if (!--index) {
              deferred.resolveWith(ctx, val);
            }
          }
        };
      };
      var progressValues;
      var progressContexts;
      var resolveContexts;
      if (length > 1) {
        /** @type {!Array} */
        progressValues = new Array(length);
        /** @type {!Array} */
        progressContexts = new Array(length);
        /** @type {!Array} */
        resolveContexts = new Array(length);
        for (; length > i; i++) {
          if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
            resolveValues[i].promise().progress(updateFn(i, progressContexts, progressValues)).done(updateFn(i, resolveContexts, resolveValues)).fail(deferred.reject);
          } else {
            --index;
          }
        }
      }
      return index || deferred.resolveWith(resolveContexts, resolveValues), deferred.promise();
    }
  });
  var readyList;
  /**
   * @param {string} time
   * @return {?}
   */
  jQuery.fn.ready = function(time) {
    return jQuery.ready.promise().done(time), this;
  };
  jQuery.extend({
    isReady : false,
    readyWait : 1,
    holdReady : function(hold) {
      if (hold) {
        jQuery.readyWait++;
      } else {
        jQuery.ready(true);
      }
    },
    ready : function(wait) {
      if (!(wait === true ? --jQuery.readyWait : jQuery.isReady)) {
        /** @type {boolean} */
        jQuery.isReady = true;
        if (!(wait !== true && --jQuery.readyWait > 0)) {
          readyList.resolveWith(document, [jQuery]);
          if (jQuery.fn.triggerHandler) {
            jQuery(document).triggerHandler("ready");
            jQuery(document).off("ready");
          }
        }
      }
    }
  });
  /**
   * @param {string} obj
   * @return {?}
   */
  jQuery.ready.promise = function(obj) {
    if (!readyList) {
      if (readyList = jQuery.Deferred(), "complete" === document.readyState || "loading" !== document.readyState && !document.documentElement.doScroll) {
        window.setTimeout(jQuery.ready);
      } else {
        if (document.addEventListener) {
          document.addEventListener("DOMContentLoaded", handler);
          window.addEventListener("load", handler);
        } else {
          document.attachEvent("onreadystatechange", handler);
          window.attachEvent("onload", handler);
          /** @type {boolean} */
          var docElement = false;
          try {
            docElement = null == window.frameElement && document.documentElement;
          } catch (r) {
          }
          if (docElement && docElement.doScroll) {
            !function doScrollCheck() {
              if (!jQuery.isReady) {
                try {
                  docElement.doScroll("left");
                } catch (n) {
                  return window.setTimeout(doScrollCheck, 50);
                }
                detach();
                jQuery.ready();
              }
            }();
          }
        }
      }
    }
    return readyList.promise(obj);
  };
  jQuery.ready.promise();
  var i;
  for (i in jQuery(support)) {
    break;
  }
  /** @type {boolean} */
  support.ownFirst = "0" === i;
  /** @type {boolean} */
  support.inlineBlockNeedsLayout = false;
  jQuery(function() {
    var val;
    var tile;
    var elem;
    var container;
    elem = document.getElementsByTagName("body")[0];
    if (elem && elem.style) {
      tile = document.createElement("div");
      container = document.createElement("div");
      /** @type {string} */
      container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
      elem.appendChild(container).appendChild(tile);
      if ("undefined" != typeof tile.style.zoom) {
        /** @type {string} */
        tile.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";
        /** @type {boolean} */
        support.inlineBlockNeedsLayout = val = 3 === tile.offsetWidth;
        if (val) {
          /** @type {number} */
          elem.style.zoom = 1;
        }
      }
      elem.removeChild(container);
    }
  });
  (function() {
    var t = document.createElement("div");
    /** @type {boolean} */
    support.deleteExpando = true;
    try {
      delete t.test;
    } catch (e) {
      /** @type {boolean} */
      support.deleteExpando = false;
    }
    /** @type {null} */
    t = null;
  })();
  /**
   * @param {!Object} elem
   * @return {?}
   */
  var acceptData = function(elem) {
    var noData = jQuery.noData[(elem.nodeName + " ").toLowerCase()];
    /** @type {number} */
    var r = +elem.nodeType || 1;
    return 1 !== r && 9 !== r ? false : !noData || noData !== true && elem.getAttribute("classid") === noData;
  };
  /** @type {!RegExp} */
  var JSON_START = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/;
  /** @type {!RegExp} */
  var regAttr = /([A-Z])/g;
  jQuery.extend({
    cache : {},
    noData : {
      "applet " : true,
      "embed " : true,
      "object " : "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
    },
    hasData : function(elem) {
      return elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando], !!elem && !isEmptyDataObject(elem);
    },
    data : function(type, name, data) {
      return internalData(type, name, data);
    },
    removeData : function(elem, name) {
      return internalRemoveData(elem, name);
    },
    _data : function(elem, name, data) {
      return internalData(elem, name, data, true);
    },
    _removeData : function(elem, name) {
      return internalRemoveData(elem, name, true);
    }
  });
  jQuery.fn.extend({
    data : function(type, name) {
      var i;
      var name;
      var data;
      var elem = this[0];
      var attrs = elem && elem.attributes;
      if (void 0 === type) {
        if (this.length && (data = jQuery.data(elem), 1 === elem.nodeType && !jQuery._data(elem, "parsedAttrs"))) {
          i = attrs.length;
          for (; i--;) {
            if (attrs[i]) {
              name = attrs[i].name;
              if (0 === name.indexOf("data-")) {
                name = jQuery.camelCase(name.slice(5));
                dataAttr(elem, name, data[name]);
              }
            }
          }
          jQuery._data(elem, "parsedAttrs", true);
        }
        return data;
      }
      return "object" == typeof type ? this.each(function() {
        jQuery.data(this, type);
      }) : arguments.length > 1 ? this.each(function() {
        jQuery.data(this, type, name);
      }) : elem ? dataAttr(elem, type, jQuery.data(elem, type)) : void 0;
    },
    removeData : function(name) {
      return this.each(function() {
        jQuery.removeData(this, name);
      });
    }
  });
  jQuery.extend({
    queue : function(elem, type, data) {
      var q;
      return elem ? (type = (type || "fx") + "queue", q = jQuery._data(elem, type), data && (!q || jQuery.isArray(data) ? q = jQuery._data(elem, type, jQuery.makeArray(data)) : q.push(data)), q || []) : void 0;
    },
    dequeue : function(elem, type) {
      type = type || "fx";
      var queue = jQuery.queue(elem, type);
      var i = queue.length;
      var listener = queue.shift();
      var handle = jQuery._queueHooks(elem, type);
      /**
       * @return {undefined}
       */
      var next = function() {
        jQuery.dequeue(elem, type);
      };
      if ("inprogress" === listener) {
        listener = queue.shift();
        i--;
      }
      if (listener) {
        if ("fx" === type) {
          queue.unshift("inprogress");
        }
        delete handle.stop;
        listener.call(elem, next, handle);
      }
      if (!i && handle) {
        handle.empty.fire();
      }
    },
    _queueHooks : function(elem, type) {
      /** @type {string} */
      var key = type + "queueHooks";
      return jQuery._data(elem, key) || jQuery._data(elem, key, {
        empty : jQuery.Callbacks("once memory").add(function() {
          jQuery._removeData(elem, type + "queue");
          jQuery._removeData(elem, key);
        })
      });
    }
  });
  jQuery.fn.extend({
    queue : function(type, data) {
      /** @type {number} */
      var setter = 2;
      return "string" != typeof type && (data = type, type = "fx", setter--), arguments.length < setter ? jQuery.queue(this[0], type) : void 0 === data ? this : this.each(function() {
        var queue = jQuery.queue(this, type, data);
        jQuery._queueHooks(this, type);
        if ("fx" === type && "inprogress" !== queue[0]) {
          jQuery.dequeue(this, type);
        }
      });
    },
    dequeue : function(type) {
      return this.each(function() {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue : function(type) {
      return this.queue(type || "fx", []);
    },
    promise : function(type, result) {
      var tmp;
      /** @type {number} */
      var o = 1;
      var deferred = jQuery.Deferred();
      var self = this;
      var i = this.length;
      /**
       * @return {undefined}
       */
      var resolve = function() {
        if (!--o) {
          deferred.resolveWith(self, [self]);
        }
      };
      if ("string" != typeof type) {
        /** @type {string} */
        result = type;
        type = void 0;
      }
      type = type || "fx";
      for (; i--;) {
        tmp = jQuery._data(self[i], type + "queueHooks");
        if (tmp && tmp.empty) {
          o++;
          tmp.empty.add(resolve);
        }
      }
      return resolve(), deferred.promise(result);
    }
  });
  (function() {
    var shrinkWrapBlocksVal;
    /**
     * @return {?}
     */
    support.shrinkWrapBlocks = function() {
      if (null != shrinkWrapBlocksVal) {
        return shrinkWrapBlocksVal;
      }
      /** @type {boolean} */
      shrinkWrapBlocksVal = false;
      var n;
      var elem;
      var e;
      return elem = document.getElementsByTagName("body")[0], elem && elem.style ? (n = document.createElement("div"), e = document.createElement("div"), e.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", elem.appendChild(e).appendChild(n), "undefined" != typeof n.style.zoom && (n.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1", n.appendChild(document.createElement("div")).style.width = 
      "5px", shrinkWrapBlocksVal = 3 !== n.offsetWidth), elem.removeChild(e), shrinkWrapBlocksVal) : void 0;
    };
  })();
  /** @type {string} */
  var FSSource = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  /** @type {!RegExp} */
  var regex = new RegExp("^(?:([+-])=|)(" + FSSource + ")([a-z%]*)$", "i");
  /** @type {!Array} */
  var cssExpand = ["Top", "Right", "Bottom", "Left"];
  /**
   * @param {!Object} element
   * @param {!Object} component
   * @return {?}
   */
  var toggle = function(element, component) {
    return element = component || element, "none" === jQuery.css(element, "display") || !jQuery.contains(element.ownerDocument, element);
  };
  /**
   * @param {string} elems
   * @param {!Function} fn
   * @param {string} key
   * @param {?} value
   * @param {number} chainable
   * @param {string} emptyGet
   * @param {boolean} raw
   * @return {?}
   */
  var access = function(elems, fn, key, value, chainable, emptyGet, raw) {
    /** @type {number} */
    var i = 0;
    var len = elems.length;
    /** @type {boolean} */
    var bulk = null == key;
    if ("object" === jQuery.type(key)) {
      /** @type {boolean} */
      chainable = true;
      for (i in key) {
        access(elems, fn, i, key[i], true, emptyGet, raw);
      }
    } else {
      if (void 0 !== value && (chainable = true, jQuery.isFunction(value) || (raw = true), bulk && (raw ? (fn.call(elems, value), fn = null) : (bulk = fn, fn = function(elem, n, value) {
        return bulk.call(jQuery(elem), value);
      })), fn)) {
        for (; len > i; i++) {
          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
      }
    }
    return chainable ? elems : bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
  };
  /** @type {!RegExp} */
  var reg = /^(?:checkbox|radio)$/i;
  /** @type {!RegExp} */
  var GoogleImageLayout = /<([\w:-]+)/;
  /** @type {!RegExp} */
  var opacityRe = /^$|\/(?:java|ecma)script/i;
  /** @type {!RegExp} */
  var trueRE = /^\s+/;
  /** @type {string} */
  var componentsStr = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";
  !function() {
    var elem = document.createElement("div");
    var o = document.createDocumentFragment();
    var input = document.createElement("input");
    /** @type {string} */
    elem.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
    /** @type {boolean} */
    support.leadingWhitespace = 3 === elem.firstChild.nodeType;
    /** @type {boolean} */
    support.tbody = !elem.getElementsByTagName("tbody").length;
    /** @type {boolean} */
    support.htmlSerialize = !!elem.getElementsByTagName("link").length;
    /** @type {boolean} */
    support.html5Clone = "<:nav></:nav>" !== document.createElement("nav").cloneNode(true).outerHTML;
    /** @type {string} */
    input.type = "checkbox";
    /** @type {boolean} */
    input.checked = true;
    o.appendChild(input);
    /** @type {boolean} */
    support.appendChecked = input.checked;
    /** @type {string} */
    elem.innerHTML = "<textarea>x</textarea>";
    /** @type {boolean} */
    support.noCloneChecked = !!elem.cloneNode(true).lastChild.defaultValue;
    o.appendChild(elem);
    input = document.createElement("input");
    input.setAttribute("type", "radio");
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");
    elem.appendChild(input);
    support.checkClone = elem.cloneNode(true).cloneNode(true).lastChild.checked;
    /** @type {boolean} */
    support.noCloneEvent = !!elem.addEventListener;
    /** @type {number} */
    elem[jQuery.expando] = 1;
    /** @type {boolean} */
    support.attributes = !elem.getAttribute(jQuery.expando);
  }();
  var wrapMap = {
    option : [1, "<select multiple='multiple'>", "</select>"],
    legend : [1, "<fieldset>", "</fieldset>"],
    area : [1, "<map>", "</map>"],
    param : [1, "<object>", "</object>"],
    thead : [1, "<table>", "</table>"],
    tr : [2, "<table><tbody>", "</tbody></table>"],
    col : [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
    td : [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default : support.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"]
  };
  /** @type {!Array} */
  wrapMap.optgroup = wrapMap.option;
  /** @type {!Array} */
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  /** @type {!Array} */
  wrapMap.th = wrapMap.td;
  /** @type {!RegExp} */
  var re_commas = /<|&#?\w+;/;
  /** @type {!RegExp} */
  var reKeyword = /<tbody/i;
  !function() {
    var i;
    var eventName;
    var b = document.createElement("div");
    for (i in{
      submit : true,
      change : true,
      focusin : true
    }) {
      /** @type {string} */
      eventName = "on" + i;
      if (!(support[i] = eventName in window)) {
        b.setAttribute(eventName, "t");
        /** @type {boolean} */
        support[i] = b.attributes[eventName].expando === false;
      }
    }
    /** @type {null} */
    b = null;
  }();
  /** @type {!RegExp} */
  var rformElems = /^(?:input|select|textarea)$/i;
  /** @type {!RegExp} */
  var SIG_PATTERN = /^key/;
  /** @type {!RegExp} */
  var toggleMaximizeElement = /^(?:mouse|pointer|contextmenu|drag|drop)|click/;
  /** @type {!RegExp} */
  var client = /^(?:focusinfocus|focusoutblur)$/;
  /** @type {!RegExp} */
  var self = /^([^.]*)(?:\.(.+)|)/;
  jQuery.event = {
    global : {},
    add : function(type, name, callback, data, selector) {
      var tmp;
      var events;
      var i;
      var opts;
      var special;
      var fn;
      var handleObj;
      var handlers;
      var key;
      var v;
      var origType;
      var info = jQuery._data(type);
      if (info) {
        if (callback.handler) {
          /** @type {!Object} */
          opts = callback;
          callback = opts.handler;
          selector = opts.selector;
        }
        if (!callback.guid) {
          /** @type {number} */
          callback.guid = jQuery.guid++;
        }
        if (!(events = info.events)) {
          events = info.events = {};
        }
        if (!(fn = info.handle)) {
          /** @type {function(string): ?} */
          fn = info.handle = function(event) {
            return "undefined" == typeof jQuery || event && jQuery.event.triggered === event.type ? void 0 : jQuery.event.dispatch.apply(fn.elem, arguments);
          };
          /** @type {!Object} */
          fn.elem = type;
        }
        name = (name || "").match(rnotwhite) || [""];
        i = name.length;
        for (; i--;) {
          /** @type {!Array} */
          tmp = self.exec(name[i]) || [];
          key = origType = tmp[1];
          v = (tmp[2] || "").split(".").sort();
          if (key) {
            special = jQuery.event.special[key] || {};
            key = (selector ? special.delegateType : special.bindType) || key;
            special = jQuery.event.special[key] || {};
            handleObj = jQuery.extend({
              type : key,
              origType : origType,
              data : data,
              handler : callback,
              guid : callback.guid,
              selector : selector,
              needsContext : selector && jQuery.expr.match.needsContext.test(selector),
              namespace : v.join(".")
            }, opts);
            if (!(handlers = events[key])) {
              /** @type {!Array} */
              handlers = events[key] = [];
              /** @type {number} */
              handlers.delegateCount = 0;
              if (!(special.setup && special.setup.call(type, data, v, fn) !== false)) {
                if (type.addEventListener) {
                  type.addEventListener(key, fn, false);
                } else {
                  if (type.attachEvent) {
                    type.attachEvent("on" + key, fn);
                  }
                }
              }
            }
            if (special.add) {
              special.add.call(type, handleObj);
              if (!handleObj.handler.guid) {
                handleObj.handler.guid = callback.guid;
              }
            }
            if (selector) {
              handlers.splice(handlers.delegateCount++, 0, handleObj);
            } else {
              handlers.push(handleObj);
            }
            /** @type {boolean} */
            jQuery.event.global[key] = true;
          }
        }
        /** @type {null} */
        type = null;
      }
    },
    remove : function(elem, types, fn, selector, mappedTypes) {
      var i;
      var handleObj;
      var tmp;
      var _;
      var t;
      var events;
      var special;
      var handlers;
      var type;
      var m;
      var origType;
      var elemData = jQuery.hasData(elem) && jQuery._data(elem);
      if (elemData && (events = elemData.events)) {
        types = (types || "").match(rnotwhite) || [""];
        t = types.length;
        for (; t--;) {
          if (tmp = self.exec(types[t]) || [], type = origType = tmp[1], m = (tmp[2] || "").split(".").sort(), type) {
            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            handlers = events[type] || [];
            tmp = tmp[2] && new RegExp("(^|\\.)" + m.join("\\.(?:.*\\.|)") + "(\\.|$)");
            _ = i = handlers.length;
            for (; i--;) {
              handleObj = handlers[i];
              if (!(!mappedTypes && origType !== handleObj.origType || fn && fn.guid !== handleObj.guid || tmp && !tmp.test(handleObj.namespace) || selector && selector !== handleObj.selector && ("**" !== selector || !handleObj.selector))) {
                handlers.splice(i, 1);
                if (handleObj.selector) {
                  handlers.delegateCount--;
                }
                if (special.remove) {
                  special.remove.call(elem, handleObj);
                }
              }
            }
            if (_ && !handlers.length) {
              if (!(special.teardown && special.teardown.call(elem, m, elemData.handle) !== false)) {
                jQuery.removeEvent(elem, type, elemData.handle);
              }
              delete events[type];
            }
          } else {
            for (type in events) {
              jQuery.event.remove(elem, type + types[t], fn, selector, true);
            }
          }
        }
        if (jQuery.isEmptyObject(events)) {
          delete elemData.handle;
          jQuery._removeData(elem, "events");
        }
      }
    },
    trigger : function(type, name, elem, data) {
      var handle;
      var ontype;
      var cur;
      var prefix;
      var special;
      var tmp;
      var i;
      /** @type {!Array} */
      var eventPath = [elem || document];
      var key = hasOwn.call(type, "type") ? type.type : type;
      var h = hasOwn.call(type, "namespace") ? type.namespace.split(".") : [];
      if (cur = tmp = elem = elem || document, 3 !== elem.nodeType && 8 !== elem.nodeType && !client.test(key + jQuery.event.triggered) && (key.indexOf(".") > -1 && (h = key.split("."), key = h.shift(), h.sort()), ontype = key.indexOf(":") < 0 && "on" + key, type = type[jQuery.expando] ? type : new jQuery.Event(key, "object" == typeof type && type), type.isTrigger = data ? 2 : 3, type.namespace = h.join("."), type.rnamespace = type.namespace ? new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)") : 
      null, type.result = void 0, type.target || (type.target = elem), name = null == name ? [type] : jQuery.makeArray(name, [type]), special = jQuery.event.special[key] || {}, data || !special.trigger || special.trigger.apply(elem, name) !== false)) {
        if (!data && !special.noBubble && !jQuery.isWindow(elem)) {
          prefix = special.delegateType || key;
          if (!client.test(prefix + key)) {
            cur = cur.parentNode;
          }
          for (; cur; cur = cur.parentNode) {
            eventPath.push(cur);
            tmp = cur;
          }
          if (tmp === (elem.ownerDocument || document)) {
            eventPath.push(tmp.defaultView || tmp.parentWindow || window);
          }
        }
        /** @type {number} */
        i = 0;
        for (; (cur = eventPath[i++]) && !type.isPropagationStopped();) {
          type.type = i > 1 ? prefix : special.bindType || key;
          handle = (jQuery._data(cur, "events") || {})[type.type] && jQuery._data(cur, "handle");
          if (handle) {
            handle.apply(cur, name);
          }
          handle = ontype && cur[ontype];
          if (handle && handle.apply && acceptData(cur)) {
            type.result = handle.apply(cur, name);
            if (type.result === false) {
              type.preventDefault();
            }
          }
        }
        if (type.type = key, !data && !type.isDefaultPrevented() && (!special._default || special._default.apply(eventPath.pop(), name) === false) && acceptData(elem) && ontype && elem[key] && !jQuery.isWindow(elem)) {
          tmp = elem[ontype];
          if (tmp) {
            /** @type {null} */
            elem[ontype] = null;
          }
          jQuery.event.triggered = key;
          try {
            elem[key]();
          } catch (s) {
          }
          jQuery.event.triggered = void 0;
          if (tmp) {
            elem[ontype] = tmp;
          }
        }
        return type.result;
      }
    },
    dispatch : function(event) {
      event = jQuery.event.fix(event);
      var i;
      var j;
      var docs;
      var matched;
      var handleObj;
      /** @type {!Array} */
      var handlerQueue = [];
      /** @type {!Array<?>} */
      var options = slice.call(arguments);
      var handlers = (jQuery._data(this, "events") || {})[event.type] || [];
      var special = jQuery.event.special[event.type] || {};
      if (options[0] = event, event.delegateTarget = this, !special.preDispatch || special.preDispatch.call(this, event) !== false) {
        handlerQueue = jQuery.event.handlers.call(this, event, handlers);
        /** @type {number} */
        i = 0;
        for (; (matched = handlerQueue[i++]) && !event.isPropagationStopped();) {
          event.currentTarget = matched.elem;
          /** @type {number} */
          j = 0;
          for (; (handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped();) {
            if (!(event.rnamespace && !event.rnamespace.test(handleObj.namespace))) {
              event.handleObj = handleObj;
              event.data = handleObj.data;
              docs = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, options);
              if (void 0 !== docs && (event.result = docs) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
        return special.postDispatch && special.postDispatch.call(this, event), event.result;
      }
    },
    handlers : function(event, handlers) {
      var j;
      var matches;
      var id;
      var handleObj;
      /** @type {!Array} */
      var handlerQueue = [];
      var i = handlers.delegateCount;
      var cur = event.target;
      if (i && cur.nodeType && ("click" !== event.type || isNaN(event.button) || event.button < 1)) {
        for (; cur != this; cur = cur.parentNode || this) {
          if (1 === cur.nodeType && (cur.disabled !== true || "click" !== event.type)) {
            /** @type {!Array} */
            matches = [];
            /** @type {number} */
            j = 0;
            for (; i > j; j++) {
              handleObj = handlers[j];
              /** @type {string} */
              id = handleObj.selector + " ";
              if (void 0 === matches[id]) {
                matches[id] = handleObj.needsContext ? jQuery(id, this).index(cur) > -1 : jQuery.find(id, this, null, [cur]).length;
              }
              if (matches[id]) {
                matches.push(handleObj);
              }
            }
            if (matches.length) {
              handlerQueue.push({
                elem : cur,
                handlers : matches
              });
            }
          }
        }
      }
      return i < handlers.length && handlerQueue.push({
        elem : this,
        handlers : handlers.slice(i)
      }), handlerQueue;
    },
    fix : function(event) {
      if (event[jQuery.expando]) {
        return event;
      }
      var i;
      var prop;
      var copy;
      var type = event.type;
      /** @type {!Object} */
      var e = event;
      var fixHook = this.fixHooks[type];
      if (!fixHook) {
        this.fixHooks[type] = fixHook = toggleMaximizeElement.test(type) ? this.mouseHooks : SIG_PATTERN.test(type) ? this.keyHooks : {};
      }
      copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
      event = new jQuery.Event(e);
      i = copy.length;
      for (; i--;) {
        prop = copy[i];
        event[prop] = e[prop];
      }
      return event.target || (event.target = e.srcElement || document), 3 === event.target.nodeType && (event.target = event.target.parentNode), event.metaKey = !!event.metaKey, fixHook.filter ? fixHook.filter(event, e) : event;
    },
    props : "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
    fixHooks : {},
    keyHooks : {
      props : "char charCode key keyCode".split(" "),
      filter : function(type, name) {
        return null == type.which && (type.which = null != name.charCode ? name.charCode : name.keyCode), type;
      }
    },
    mouseHooks : {
      props : "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
      filter : function(type, s) {
        var body;
        var eventDoc;
        var doc;
        var old = s.button;
        var fromElement = s.fromElement;
        return null == type.pageX && null != s.clientX && (eventDoc = type.target.ownerDocument || document, doc = eventDoc.documentElement, body = eventDoc.body, type.pageX = s.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0), type.pageY = s.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)), !type.relatedTarget && fromElement && (type.relatedTarget = fromElement === 
        type.target ? s.toElement : fromElement), type.which || void 0 === old || (type.which = 1 & old ? 1 : 2 & old ? 3 : 4 & old ? 2 : 0), type;
      }
    },
    special : {
      load : {
        noBubble : true
      },
      focus : {
        trigger : function() {
          if (this !== safeActiveElement() && this.focus) {
            try {
              return this.focus(), false;
            } catch (e) {
            }
          }
        },
        delegateType : "focusin"
      },
      blur : {
        trigger : function() {
          return this === safeActiveElement() && this.blur ? (this.blur(), false) : void 0;
        },
        delegateType : "focusout"
      },
      click : {
        trigger : function() {
          return jQuery.nodeName(this, "input") && "checkbox" === this.type && this.click ? (this.click(), false) : void 0;
        },
        _default : function(type) {
          return jQuery.nodeName(type.target, "a");
        }
      },
      beforeunload : {
        postDispatch : function(event) {
          if (void 0 !== event.result && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    },
    simulate : function(type, data, event) {
      var callback = jQuery.extend(new jQuery.Event, event, {
        type : type,
        isSimulated : true
      });
      jQuery.event.trigger(callback, null, data);
      if (callback.isDefaultPrevented()) {
        event.preventDefault();
      }
    }
  };
  /** @type {function(!Object, string, !Function): undefined} */
  jQuery.removeEvent = document.removeEventListener ? function(from, type, n) {
    if (from.removeEventListener) {
      from.removeEventListener(type, n);
    }
  } : function(el, type, PFnc) {
    /** @type {string} */
    var eventName = "on" + type;
    if (el.detachEvent) {
      if ("undefined" == typeof el[eventName]) {
        /** @type {null} */
        el[eventName] = null;
      }
      el.detachEvent(eventName, PFnc);
    }
  };
  /**
   * @param {!Object} event
   * @param {!Object} options
   * @return {?}
   */
  jQuery.Event = function(event, options) {
    return this instanceof jQuery.Event ? (event && event.type ? (this.originalEvent = event, this.type = event.type, this.isDefaultPrevented = event.defaultPrevented || void 0 === event.defaultPrevented && event.returnValue === false ? returnTrue : returnFalse) : this.type = event, options && jQuery.extend(this, options), this.timeStamp = event && event.timeStamp || jQuery.now(), void(this[jQuery.expando] = true)) : new jQuery.Event(event, options);
  };
  jQuery.Event.prototype = {
    constructor : jQuery.Event,
    isDefaultPrevented : returnFalse,
    isPropagationStopped : returnFalse,
    isImmediatePropagationStopped : returnFalse,
    preventDefault : function() {
      var e = this.originalEvent;
      /** @type {function(): ?} */
      this.isDefaultPrevented = returnTrue;
      if (e) {
        if (e.preventDefault) {
          e.preventDefault();
        } else {
          /** @type {boolean} */
          e.returnValue = false;
        }
      }
    },
    stopPropagation : function() {
      var e = this.originalEvent;
      /** @type {function(): ?} */
      this.isPropagationStopped = returnTrue;
      if (e && !this.isSimulated) {
        if (e.stopPropagation) {
          e.stopPropagation();
        }
        /** @type {boolean} */
        e.cancelBubble = true;
      }
    },
    stopImmediatePropagation : function() {
      var e = this.originalEvent;
      /** @type {function(): ?} */
      this.isImmediatePropagationStopped = returnTrue;
      if (e && e.stopImmediatePropagation) {
        e.stopImmediatePropagation();
      }
      this.stopPropagation();
    }
  };
  jQuery.each({
    mouseenter : "mouseover",
    mouseleave : "mouseout",
    pointerenter : "pointerover",
    pointerleave : "pointerout"
  }, function(orig, fix) {
    jQuery.event.special[orig] = {
      delegateType : fix,
      bindType : fix,
      handle : function(event) {
        var _ref12;
        var target = this;
        var body = event.relatedTarget;
        var handleObj = event.handleObj;
        return body && (body === target || jQuery.contains(target, body)) || (event.type = handleObj.origType, _ref12 = handleObj.handler.apply(this, arguments), event.type = fix), _ref12;
      }
    };
  });
  if (!support.submit) {
    jQuery.event.special.submit = {
      setup : function() {
        return jQuery.nodeName(this, "form") ? false : void jQuery.event.add(this, "click._submit keypress._submit", function(options) {
          var elem = options.target;
          var window = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? jQuery.prop(elem, "form") : void 0;
          if (window && !jQuery._data(window, "submit")) {
            jQuery.event.add(window, "submit._submit", function(canCreateDiscussions) {
              /** @type {boolean} */
              canCreateDiscussions._submitBubble = true;
            });
            jQuery._data(window, "submit", true);
          }
        });
      },
      postDispatch : function(event) {
        if (event._submitBubble) {
          delete event._submitBubble;
          if (this.parentNode && !event.isTrigger) {
            jQuery.event.simulate("submit", this.parentNode, event);
          }
        }
      },
      teardown : function() {
        return jQuery.nodeName(this, "form") ? false : void jQuery.event.remove(this, "._submit");
      }
    };
  }
  if (!support.change) {
    jQuery.event.special.change = {
      setup : function() {
        return rformElems.test(this.nodeName) ? ("checkbox" !== this.type && "radio" !== this.type || (jQuery.event.add(this, "propertychange._change", function(event) {
          if ("checked" === event.originalEvent.propertyName) {
            /** @type {boolean} */
            this._justChanged = true;
          }
        }), jQuery.event.add(this, "click._change", function(event) {
          if (this._justChanged && !event.isTrigger) {
            /** @type {boolean} */
            this._justChanged = false;
          }
          jQuery.event.simulate("change", this, event);
        })), false) : void jQuery.event.add(this, "beforeactivate._change", function(options) {
          var elem = options.target;
          if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "change")) {
            jQuery.event.add(elem, "change._change", function(event) {
              if (!(!this.parentNode || event.isSimulated || event.isTrigger)) {
                jQuery.event.simulate("change", this.parentNode, event);
              }
            });
            jQuery._data(elem, "change", true);
          }
        });
      },
      handle : function(event) {
        var elem = event.target;
        return this !== elem || event.isSimulated || event.isTrigger || "radio" !== elem.type && "checkbox" !== elem.type ? event.handleObj.handler.apply(this, arguments) : void 0;
      },
      teardown : function() {
        return jQuery.event.remove(this, "._change"), !rformElems.test(this.nodeName);
      }
    };
  }
  if (!support.focusin) {
    jQuery.each({
      focus : "focusin",
      blur : "focusout"
    }, function(orig, fix) {
      /**
       * @param {!Object} event
       * @return {undefined}
       */
      var handler = function(event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
      };
      jQuery.event.special[fix] = {
        setup : function() {
          var doc = this.ownerDocument || this;
          var attaches = jQuery._data(doc, fix);
          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }
          jQuery._data(doc, fix, (attaches || 0) + 1);
        },
        teardown : function() {
          var doc = this.ownerDocument || this;
          /** @type {number} */
          var display = jQuery._data(doc, fix) - 1;
          if (display) {
            jQuery._data(doc, fix, display);
          } else {
            doc.removeEventListener(orig, handler, true);
            jQuery._removeData(doc, fix);
          }
        }
      };
    });
  }
  jQuery.fn.extend({
    on : function(type, array, args, data) {
      return callback(this, type, array, args, data);
    },
    one : function(type, block, data, x) {
      return callback(this, type, block, data, x, 1);
    },
    off : function(type, callback, handler) {
      var handleObj;
      var i;
      if (type && type.preventDefault && type.handleObj) {
        return handleObj = type.handleObj, jQuery(type.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler), this;
      }
      if ("object" == typeof type) {
        for (i in type) {
          this.off(i, callback, type[i]);
        }
        return this;
      }
      return callback !== false && "function" != typeof callback || (handler = callback, callback = void 0), handler === false && (handler = returnFalse), this.each(function() {
        jQuery.event.remove(this, type, handler, callback);
      });
    },
    trigger : function(type, name) {
      return this.each(function() {
        jQuery.event.trigger(type, name, this);
      });
    },
    triggerHandler : function(type, callback) {
      var value = this[0];
      return value ? jQuery.event.trigger(type, callback, value, true) : void 0;
    }
  });
  /** @type {!RegExp} */
  var RE_findSignForTerm = / jQuery\d+="(?:null|\d+)"/g;
  /** @type {!RegExp} */
  var exactRegExp = new RegExp("<(?:" + componentsStr + ")[\\s/>]", "i");
  /** @type {!RegExp} */
  var repone = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;
  /** @type {!RegExp} */
  var regIsJS = /<script|<style|<link/i;
  /** @type {!RegExp} */
  var _tacet = /checked\s*(?:[^=]|=\s*.checked.)/i;
  /** @type {!RegExp} */
  var rscriptTypeMasked = /^true\/(.*)/;
  /** @type {!RegExp} */
  var code = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
  var safeFragment = createSafeFragment(document);
  var fragmentDiv = safeFragment.appendChild(document.createElement("div"));
  jQuery.extend({
    htmlPrefilter : function(html) {
      return html.replace(repone, "<$1></$2>");
    },
    clone : function(elem, value, build) {
      var destElements;
      var node;
      var clone;
      var i;
      var srcElements;
      var inPage = jQuery.contains(elem.ownerDocument, elem);
      if (support.html5Clone || jQuery.isXMLDoc(elem) || !exactRegExp.test("<" + elem.nodeName + ">") ? clone = elem.cloneNode(true) : (fragmentDiv.innerHTML = elem.outerHTML, fragmentDiv.removeChild(clone = fragmentDiv.firstChild)), !(support.noCloneEvent && support.noCloneChecked || 1 !== elem.nodeType && 11 !== elem.nodeType || jQuery.isXMLDoc(elem))) {
        destElements = getAll(clone);
        srcElements = getAll(elem);
        /** @type {number} */
        i = 0;
        for (; null != (node = srcElements[i]); ++i) {
          if (destElements[i]) {
            fixCloneNodeIssues(node, destElements[i]);
          }
        }
      }
      if (value) {
        if (build) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);
          /** @type {number} */
          i = 0;
          for (; null != (node = srcElements[i]); i++) {
            cloneCopyEvent(node, destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      }
      return destElements = getAll(clone, "script"), destElements.length > 0 && setGlobalEval(destElements, !inPage && getAll(elem, "script")), destElements = srcElements = node = null, clone;
    },
    cleanData : function(data, index) {
      var element;
      var type;
      var id;
      var data;
      /** @type {number} */
      var i = 0;
      var expando = jQuery.expando;
      var cache = jQuery.cache;
      /** @type {boolean} */
      var elem = support.attributes;
      var special = jQuery.event.special;
      for (; null != (element = data[i]); i++) {
        if ((index || acceptData(element)) && (id = element[expando], data = id && cache[id])) {
          if (data.events) {
            for (type in data.events) {
              if (special[type]) {
                jQuery.event.remove(element, type);
              } else {
                jQuery.removeEvent(element, type, data.handle);
              }
            }
          }
          if (cache[id]) {
            delete cache[id];
            if (elem || "undefined" == typeof element.removeAttribute) {
              element[expando] = void 0;
            } else {
              element.removeAttribute(expando);
            }
            arr.push(id);
          }
        }
      }
    }
  });
  jQuery.fn.extend({
    domManip : domManip,
    detach : function(f) {
      return remove(this, f, true);
    },
    remove : function(key) {
      return remove(this, key);
    },
    text : function(type) {
      return access(this, function(t) {
        return void 0 === t ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(t));
      }, null, type, arguments.length);
    },
    append : function() {
      return domManip(this, arguments, function(elem) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    prepend : function() {
      return domManip(this, arguments, function(elem) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    before : function() {
      return domManip(this, arguments, function(elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    after : function() {
      return domManip(this, arguments, function(elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    empty : function() {
      var elem;
      /** @type {number} */
      var i = 0;
      for (; null != (elem = this[i]); i++) {
        if (1 === elem.nodeType) {
          jQuery.cleanData(getAll(elem, false));
        }
        for (; elem.firstChild;) {
          elem.removeChild(elem.firstChild);
        }
        if (elem.options && jQuery.nodeName(elem, "select")) {
          /** @type {number} */
          elem.options.length = 0;
        }
      }
      return this;
    },
    clone : function(type, value) {
      return type = null == type ? false : type, value = null == value ? type : value, this.map(function() {
        return jQuery.clone(this, type, value);
      });
    },
    html : function(type) {
      return access(this, function(value) {
        var elem = this[0] || {};
        /** @type {number} */
        var endIdx = 0;
        var i = this.length;
        if (void 0 === value) {
          return 1 === elem.nodeType ? elem.innerHTML.replace(RE_findSignForTerm, "") : void 0;
        }
        if ("string" == typeof value && !regIsJS.test(value) && (support.htmlSerialize || !exactRegExp.test(value)) && (support.leadingWhitespace || !trueRE.test(value)) && !wrapMap[(GoogleImageLayout.exec(value) || ["", ""])[1].toLowerCase()]) {
          value = jQuery.htmlPrefilter(value);
          try {
            for (; i > endIdx; endIdx++) {
              elem = this[endIdx] || {};
              if (1 === elem.nodeType) {
                jQuery.cleanData(getAll(elem, false));
                /** @type {number} */
                elem.innerHTML = value;
              }
            }
            /** @type {number} */
            elem = 0;
          } catch (n) {
          }
        }
        if (elem) {
          this.empty().append(value);
        }
      }, null, type, arguments.length);
    },
    replaceWith : function() {
      /** @type {!Array} */
      var ignored = [];
      return domManip(this, arguments, function(textualMod) {
        var thisParent = this.parentNode;
        if (jQuery.inArray(this, ignored) < 0) {
          jQuery.cleanData(getAll(this));
          if (thisParent) {
            thisParent.replaceChild(textualMod, this);
          }
        }
      }, ignored);
    }
  });
  jQuery.each({
    appendTo : "append",
    prependTo : "prepend",
    insertBefore : "before",
    insertAfter : "after",
    replaceAll : "replaceWith"
  }, function(original, n) {
    /**
     * @param {?} t
     * @return {?}
     */
    jQuery.fn[original] = function(t) {
      var what;
      /** @type {number} */
      var i = 0;
      /** @type {!Array} */
      var ret = [];
      var a = jQuery(t);
      /** @type {number} */
      var last = a.length - 1;
      for (; last >= i; i++) {
        what = i === last ? this : this.clone(true);
        jQuery(a[i])[n](what);
        push.apply(ret, what.get());
      }
      return this.pushStack(ret);
    };
  });
  var iframe;
  var elemdisplay = {
    HTML : "block",
    BODY : "block"
  };
  /** @type {!RegExp} */
  var namespaces = /^margin/;
  /** @type {!RegExp} */
  var rnumnonpx = new RegExp("^(" + FSSource + ")(?!px)[a-z%]+$", "i");
  /**
   * @param {!Object} elem
   * @param {!Array} options
   * @param {!Function} value
   * @param {!Array} params
   * @return {?}
   */
  var swap = function(elem, options, value, params) {
    var ret;
    var prop;
    var originObject = {};
    for (prop in options) {
      originObject[prop] = elem.style[prop];
      elem.style[prop] = options[prop];
    }
    ret = value.apply(elem, params || []);
    for (prop in options) {
      elem.style[prop] = originObject[prop];
    }
    return ret;
  };
  var root = document.documentElement;
  !function() {
    var wnd;
    var gasSum;
    var _meta;
    var a;
    var costSum;
    var previous_filter;
    var element = document.createElement("div");
    var container = document.createElement("div");
    if (container.style) {
      /**
       * @return {undefined}
       */
      var computeStyleTests = function() {
        var contents;
        var size;
        var documentFragment = document.documentElement;
        documentFragment.appendChild(element);
        /** @type {string} */
        container.style.cssText = "-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%";
        /** @type {boolean} */
        wnd = _meta = previous_filter = false;
        /** @type {boolean} */
        gasSum = costSum = true;
        if (window.getComputedStyle) {
          size = window.getComputedStyle(container);
          /** @type {boolean} */
          wnd = "1%" !== (size || {}).top;
          /** @type {boolean} */
          previous_filter = "2px" === (size || {}).marginLeft;
          /** @type {boolean} */
          _meta = "4px" === (size || {
            width : "4px"
          }).width;
          /** @type {string} */
          container.style.marginRight = "50%";
          /** @type {boolean} */
          gasSum = "4px" === (size || {
            marginRight : "4px"
          }).marginRight;
          contents = container.appendChild(document.createElement("div"));
          /** @type {string} */
          contents.style.cssText = container.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0";
          /** @type {string} */
          contents.style.marginRight = contents.style.width = "0";
          /** @type {string} */
          container.style.width = "1px";
          /** @type {boolean} */
          costSum = !parseFloat((window.getComputedStyle(contents) || {}).marginRight);
          container.removeChild(contents);
        }
        /** @type {string} */
        container.style.display = "none";
        /** @type {boolean} */
        a = 0 === container.getClientRects().length;
        if (a) {
          /** @type {string} */
          container.style.display = "";
          /** @type {string} */
          container.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
          /** @type {string} */
          container.childNodes[0].style.borderCollapse = "separate";
          contents = container.getElementsByTagName("td");
          /** @type {string} */
          contents[0].style.cssText = "margin:0;border:0;padding:0;display:none";
          /** @type {boolean} */
          a = 0 === contents[0].offsetHeight;
          if (a) {
            /** @type {string} */
            contents[0].style.display = "";
            /** @type {string} */
            contents[1].style.display = "none";
            /** @type {boolean} */
            a = 0 === contents[0].offsetHeight;
          }
        }
        documentFragment.removeChild(element);
      };
      /** @type {string} */
      container.style.cssText = "float:left;opacity:.5";
      /** @type {boolean} */
      support.opacity = "0.5" === container.style.opacity;
      /** @type {boolean} */
      support.cssFloat = !!container.style.cssFloat;
      /** @type {string} */
      container.style.backgroundClip = "content-box";
      /** @type {string} */
      container.cloneNode(true).style.backgroundClip = "";
      /** @type {boolean} */
      support.clearCloneStyle = "content-box" === container.style.backgroundClip;
      element = document.createElement("div");
      /** @type {string} */
      element.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute";
      /** @type {string} */
      container.innerHTML = "";
      element.appendChild(container);
      /** @type {boolean} */
      support.boxSizing = "" === container.style.boxSizing || "" === container.style.MozBoxSizing || "" === container.style.WebkitBoxSizing;
      jQuery.extend(support, {
        reliableHiddenOffsets : function() {
          return null == wnd && computeStyleTests(), a;
        },
        boxSizingReliable : function() {
          return null == wnd && computeStyleTests(), _meta;
        },
        pixelMarginRight : function() {
          return null == wnd && computeStyleTests(), gasSum;
        },
        pixelPosition : function() {
          return null == wnd && computeStyleTests(), wnd;
        },
        reliableMarginRight : function() {
          return null == wnd && computeStyleTests(), costSum;
        },
        reliableMarginLeft : function() {
          return null == wnd && computeStyleTests(), previous_filter;
        }
      });
    }
  }();
  var getStyles;
  var curCSS;
  /** @type {!RegExp} */
  var currencyRegExp = /^(top|right|bottom|left)$/;
  if (window.getComputedStyle) {
    /**
     * @param {!Object} elem
     * @return {?}
     */
    getStyles = function(elem) {
      var win = elem.ownerDocument.defaultView;
      return win && win.opener || (win = window), win.getComputedStyle(elem);
    };
    /**
     * @param {!Object} elem
     * @param {!Object} name
     * @param {!Object} computed
     * @return {?}
     */
    curCSS = function(elem, name, computed) {
      var minWidth;
      var width;
      var maxWidth;
      var ret;
      var style = elem.style;
      return computed = computed || getStyles(elem), ret = computed ? computed.getPropertyValue(name) || computed[name] : void 0, "" !== ret && void 0 !== ret || jQuery.contains(elem.ownerDocument, elem) || (ret = jQuery.style(elem, name)), computed && !support.pixelMarginRight() && rnumnonpx.test(ret) && namespaces.test(name) && (minWidth = style.width, width = style.minWidth, maxWidth = style.maxWidth, style.minWidth = style.maxWidth = style.width = ret, ret = computed.width, style.width = minWidth, 
      style.minWidth = width, style.maxWidth = maxWidth), void 0 === ret ? ret : ret + "";
    };
  } else {
    if (root.currentStyle) {
      /**
       * @param {!Object} elem
       * @return {?}
       */
      getStyles = function(elem) {
        return elem.currentStyle;
      };
      /**
       * @param {!HTMLElement} elem
       * @param {string} name
       * @param {string} computed
       * @return {?}
       */
      curCSS = function(elem, name, computed) {
        var left;
        var rs;
        var rsLeft;
        var ret;
        var style = elem.style;
        return computed = computed || getStyles(elem), ret = computed ? computed[name] : void 0, null == ret && style && style[name] && (ret = style[name]), rnumnonpx.test(ret) && !currencyRegExp.test(name) && (left = style.left, rs = elem.runtimeStyle, rsLeft = rs && rs.left, rsLeft && (rs.left = elem.currentStyle.left), style.left = "fontSize" === name ? "1em" : ret, ret = style.pixelLeft + "px", style.left = left, rsLeft && (rs.left = rsLeft)), void 0 === ret ? ret : ret + "" || "auto";
      };
    }
  }
  /** @type {!RegExp} */
  var re = /alpha\([^)]*\)/i;
  /** @type {!RegExp} */
  var flashFilenameRegex = /opacity\s*=\s*([^)]*)/i;
  /** @type {!RegExp} */
  var rdisplayswap = /^(none|table(?!-c[ea]).+)/;
  /** @type {!RegExp} */
  var tagMatcher = new RegExp("^(" + FSSource + ")(.*)$", "i");
  var cssShow = {
    position : "absolute",
    visibility : "hidden",
    display : "block"
  };
  var cssNormalTransform = {
    letterSpacing : "0",
    fontWeight : "400"
  };
  /** @type {!Array} */
  var prefixes = ["Webkit", "O", "Moz", "ms"];
  var style = document.createElement("div").style;
  jQuery.extend({
    cssHooks : {
      opacity : {
        get : function(el, num) {
          if (num) {
            var val = curCSS(el, "opacity");
            return "" === val ? "1" : val;
          }
        }
      }
    },
    cssNumber : {
      animationIterationCount : true,
      columnCount : true,
      fillOpacity : true,
      flexGrow : true,
      flexShrink : true,
      fontWeight : true,
      lineHeight : true,
      opacity : true,
      order : true,
      orphans : true,
      widows : true,
      zIndex : true,
      zoom : true
    },
    cssProps : {
      "float" : support.cssFloat ? "cssFloat" : "styleFloat"
    },
    style : function(type, name, value, data) {
      if (type && 3 !== type.nodeType && 8 !== type.nodeType && type.style) {
        var ret;
        var t;
        var hooks;
        var origName = jQuery.camelCase(name);
        var style = type.style;
        if (name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName), hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName], void 0 === value) {
          return hooks && "get" in hooks && void 0 !== (ret = hooks.get(type, false, data)) ? ret : style[name];
        }
        if (t = typeof value, "string" === t && (ret = regex.exec(value)) && ret[1] && (value = adjustCSS(type, name, ret), t = "number"), null != value && value === value && ("number" === t && (value = value + (ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px"))), support.clearCloneStyle || "" !== value || 0 !== name.indexOf("background") || (style[name] = "inherit"), !(hooks && "set" in hooks && void 0 === (value = hooks.set(type, value, data))))) {
          try {
            /** @type {string} */
            style[name] = value;
          } catch (a) {
          }
        }
      }
    },
    css : function(value, name, extra, styles) {
      var num;
      var val;
      var hooks;
      var origName = jQuery.camelCase(name);
      return name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName), hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName], hooks && "get" in hooks && (val = hooks.get(value, true, extra)), void 0 === val && (val = curCSS(value, name, styles)), "normal" === val && name in cssNormalTransform && (val = cssNormalTransform[name]), "" === extra || extra ? (num = parseFloat(val), extra === true || isFinite(num) ? num || 0 : val) : val;
    }
  });
  jQuery.each(["height", "width"], function(canCreateDiscussions, prop) {
    jQuery.cssHooks[prop] = {
      get : function(elem, e, extra) {
        return e ? rdisplayswap.test(jQuery.css(elem, "display")) && 0 === elem.offsetWidth ? swap(elem, cssShow, function() {
          return getWidthOrHeight(elem, prop, extra);
        }) : getWidthOrHeight(elem, prop, extra) : void 0;
      },
      set : function(type, name, data) {
        var styles = data && getStyles(type);
        return set(type, name, data ? augmentWidthOrHeight(type, prop, data, support.boxSizing && "border-box" === jQuery.css(type, "boxSizing", false, styles), styles) : 0);
      }
    };
  });
  if (!support.opacity) {
    jQuery.cssHooks.opacity = {
      get : function(options, el) {
        return flashFilenameRegex.test((el && options.currentStyle ? options.currentStyle.filter : options.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : el ? "1" : "";
      },
      set : function(type, name) {
        var style = type.style;
        var currentStyle = type.currentStyle;
        /** @type {string} */
        var a = jQuery.isNumeric(name) ? "alpha(opacity=" + 100 * name + ")" : "";
        var b = currentStyle && currentStyle.filter || style.filter || "";
        /** @type {number} */
        style.zoom = 1;
        if (!((name >= 1 || "" === name) && "" === jQuery.trim(b.replace(re, "")) && style.removeAttribute && (style.removeAttribute("filter"), "" === name || currentStyle && !currentStyle.filter))) {
          style.filter = re.test(b) ? b.replace(re, a) : b + " " + a;
        }
      }
    };
  }
  jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function(elem, extra) {
    return extra ? swap(elem, {
      display : "inline-block"
    }, curCSS, [elem, "marginRight"]) : void 0;
  });
  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function(elem, size) {
    return size ? (parseFloat(curCSS(elem, "marginLeft")) || (jQuery.contains(elem.ownerDocument, elem) ? elem.getBoundingClientRect().left - swap(elem, {
      marginLeft : 0
    }, function() {
      return elem.getBoundingClientRect().left;
    }) : 0)) + "px" : void 0;
  });
  jQuery.each({
    margin : "",
    padding : "",
    border : "Width"
  }, function(prefix, suffix) {
    jQuery.cssHooks[prefix + suffix] = {
      expand : function(keys) {
        /** @type {number} */
        var i = 0;
        var expanded = {};
        /** @type {!Array} */
        var stops = "string" == typeof keys ? keys.split(" ") : [keys];
        for (; 4 > i; i++) {
          expanded[prefix + cssExpand[i] + suffix] = stops[i] || stops[i - 2] || stops[0];
        }
        return expanded;
      }
    };
    if (!namespaces.test(prefix)) {
      /** @type {function(string, !Object, string): ?} */
      jQuery.cssHooks[prefix + suffix].set = set;
    }
  });
  jQuery.fn.extend({
    css : function(name, value) {
      return access(this, function(elem, name, undefined) {
        var styles;
        var l;
        var map = {};
        /** @type {number} */
        var i = 0;
        if (jQuery.isArray(name)) {
          styles = getStyles(elem);
          l = name.length;
          for (; l > i; i++) {
            map[name[i]] = jQuery.css(elem, name[i], false, styles);
          }
          return map;
        }
        return void 0 !== undefined ? jQuery.style(elem, name, undefined) : jQuery.css(elem, name);
      }, name, value, arguments.length > 1);
    },
    show : function() {
      return showHide(this, true);
    },
    hide : function() {
      return showHide(this);
    },
    toggle : function(type) {
      return "boolean" == typeof type ? type ? this.show() : this.hide() : this.each(function() {
        if (toggle(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    }
  });
  /** @type {function(!Object, !Object, !Object, !Object, !Object): ?} */
  jQuery.Tween = Tween;
  Tween.prototype = {
    constructor : Tween,
    init : function(canvas, options, prop, end, easing, unit) {
      /** @type {string} */
      this.elem = canvas;
      /** @type {string} */
      this.prop = prop;
      this.easing = easing || jQuery.easing._default;
      /** @type {!Object} */
      this.options = options;
      this.start = this.now = this.cur();
      /** @type {number} */
      this.end = end;
      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
    },
    cur : function() {
      var hooks = Tween.propHooks[this.prop];
      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
    },
    run : function(percent) {
      var eased;
      var hooks = Tween.propHooks[this.prop];
      return this.options.duration ? this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration) : this.pos = eased = percent, this.now = (this.end - this.start) * eased + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), hooks && hooks.set ? hooks.set(this) : Tween.propHooks._default.set(this), this;
    }
  };
  Tween.prototype.init.prototype = Tween.prototype;
  Tween.propHooks = {
    _default : {
      get : function(data) {
        var s;
        return 1 !== data.elem.nodeType || null != data.elem[data.prop] && null == data.elem.style[data.prop] ? data.elem[data.prop] : (s = jQuery.css(data.elem, data.prop, ""), s && "auto" !== s ? s : 0);
      },
      set : function(type) {
        if (jQuery.fx.step[type.prop]) {
          jQuery.fx.step[type.prop](type);
        } else {
          if (1 !== type.elem.nodeType || null == type.elem.style[jQuery.cssProps[type.prop]] && !jQuery.cssHooks[type.prop]) {
            type.elem[type.prop] = type.now;
          } else {
            jQuery.style(type.elem, type.prop, type.now + type.unit);
          }
        }
      }
    }
  };
  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set : function(type) {
      if (type.elem.nodeType && type.elem.parentNode) {
        type.elem[type.prop] = type.now;
      }
    }
  };
  jQuery.easing = {
    linear : function(p) {
      return p;
    },
    swing : function(p) {
      return .5 - Math.cos(p * Math.PI) / 2;
    },
    _default : "swing"
  };
  /** @type {function(string, !Object, string, number, !Object, !Object): undefined} */
  jQuery.fx = Tween.prototype.init;
  jQuery.fx.step = {};
  var fxNow;
  var slideshowtimer;
  /** @type {!RegExp} */
  var patternTimecode = /^(?:toggle|show|hide)$/;
  /** @type {!RegExp} */
  var rrun = /queueHooks$/;
  jQuery.Animation = jQuery.extend(Animation, {
    tweeners : {
      "*" : [function(prop, value) {
        var tween = this.createTween(prop, value);
        return adjustCSS(tween.elem, prop, regex.exec(value), tween), tween;
      }]
    },
    tweener : function(props, callback) {
      if (jQuery.isFunction(props)) {
        /** @type {!Object} */
        callback = props;
        /** @type {!Array} */
        props = ["*"];
      } else {
        props = props.match(rnotwhite);
      }
      var prop;
      /** @type {number} */
      var _l = 0;
      var isFormSubmitted = props.length;
      for (; isFormSubmitted > _l; _l++) {
        prop = props[_l];
        Animation.tweeners[prop] = Animation.tweeners[prop] || [];
        Animation.tweeners[prop].unshift(callback);
      }
    },
    prefilters : [defaultPrefilter],
    prefilter : function(callback, options) {
      if (options) {
        Animation.prefilters.unshift(callback);
      } else {
        Animation.prefilters.push(callback);
      }
    }
  });
  /**
   * @param {string} type
   * @param {!Object} name
   * @param {!Object} text
   * @return {?}
   */
  jQuery.speed = function(type, name, text) {
    var opt = type && "object" == typeof type ? jQuery.extend({}, type) : {
      complete : text || !text && name || jQuery.isFunction(type) && type,
      duration : type,
      easing : text && name || name && !jQuery.isFunction(name) && name
    };
    return opt.duration = jQuery.fx.off ? 0 : "number" == typeof opt.duration ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default, null != opt.queue && opt.queue !== true || (opt.queue = "fx"), opt.old = opt.complete, opt.complete = function() {
      if (jQuery.isFunction(opt.old)) {
        opt.old.call(this);
      }
      if (opt.queue) {
        jQuery.dequeue(this, opt.queue);
      }
    }, opt;
  };
  jQuery.fn.extend({
    fadeTo : function(to, o, fn, callback) {
      return this.filter(toggle).css("opacity", 0).show().end().animate({
        opacity : o
      }, to, fn, callback);
    },
    animate : function(type, name, key, data) {
      var empty = jQuery.isEmptyObject(type);
      var optall = jQuery.speed(name, key, data);
      /**
       * @return {undefined}
       */
      var doAnimation = function() {
        var anim = Animation(this, jQuery.extend({}, type), optall);
        if (empty || jQuery._data(this, "finish")) {
          anim.stop(true);
        }
      };
      return doAnimation.finish = doAnimation, empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
    },
    stop : function(value, key, name) {
      /**
       * @param {!Object} hooks
       * @return {undefined}
       */
      var stopQueue = function(hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(name);
      };
      return "string" != typeof value && (name = key, key = value, value = void 0), key && value !== false && this.queue(value || "fx", []), this.each(function() {
        /** @type {boolean} */
        var is_defun = true;
        /** @type {(boolean|string)} */
        var index = null != value && value + "queueHooks";
        /** @type {!Array} */
        var timers = jQuery.timers;
        var data = jQuery._data(this);
        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }
        /** @type {number} */
        index = timers.length;
        for (; index--;) {
          if (!(timers[index].elem !== this || null != value && timers[index].queue !== value)) {
            timers[index].anim.stop(name);
            /** @type {boolean} */
            is_defun = false;
            timers.splice(index, 1);
          }
        }
        if (!(!is_defun && name)) {
          jQuery.dequeue(this, value);
        }
      });
    },
    finish : function(type) {
      return type !== false && (type = type || "fx"), this.each(function() {
        var index;
        var data = jQuery._data(this);
        var queue = data[type + "queue"];
        var hooks = data[type + "queueHooks"];
        /** @type {!Array} */
        var timers = jQuery.timers;
        var length = queue ? queue.length : 0;
        /** @type {boolean} */
        data.finish = true;
        jQuery.queue(this, type, []);
        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        }
        /** @type {number} */
        index = timers.length;
        for (; index--;) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        }
        /** @type {number} */
        index = 0;
        for (; length > index; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        }
        delete data.finish;
      });
    }
  });
  jQuery.each(["toggle", "show", "hide"], function(canCreateDiscussions, name) {
    var cssFn = jQuery.fn[name];
    /**
     * @param {!Object} x
     * @param {undefined} y
     * @param {?} callback
     * @return {?}
     */
    jQuery.fn[name] = function(x, y, callback) {
      return null == x || "boolean" == typeof x ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), x, y, callback);
    };
  });
  jQuery.each({
    slideDown : genFx("show"),
    slideUp : genFx("hide"),
    slideToggle : genFx("toggle"),
    fadeIn : {
      opacity : "show"
    },
    fadeOut : {
      opacity : "hide"
    },
    fadeToggle : {
      opacity : "toggle"
    }
  }, function(original, value) {
    /**
     * @param {undefined} to
     * @param {undefined} y
     * @param {?} callback
     * @return {?}
     */
    jQuery.fn[original] = function(to, y, callback) {
      return this.animate(value, to, y, callback);
    };
  });
  /** @type {!Array} */
  jQuery.timers = [];
  /**
   * @return {undefined}
   */
  jQuery.fx.tick = function() {
    var timer;
    /** @type {!Array} */
    var timers = jQuery.timers;
    /** @type {number} */
    var i = 0;
    fxNow = jQuery.now();
    for (; i < timers.length; i++) {
      timer = timers[i];
      if (!(timer() || timers[i] !== timer)) {
        timers.splice(i--, 1);
      }
    }
    if (!timers.length) {
      jQuery.fx.stop();
    }
    fxNow = void 0;
  };
  /**
   * @param {?} timer
   * @return {undefined}
   */
  jQuery.fx.timer = function(timer) {
    jQuery.timers.push(timer);
    if (timer()) {
      jQuery.fx.start();
    } else {
      jQuery.timers.pop();
    }
  };
  /** @type {number} */
  jQuery.fx.interval = 13;
  /**
   * @return {undefined}
   */
  jQuery.fx.start = function() {
    if (!slideshowtimer) {
      slideshowtimer = window.setInterval(jQuery.fx.tick, jQuery.fx.interval);
    }
  };
  /**
   * @return {undefined}
   */
  jQuery.fx.stop = function() {
    window.clearInterval(slideshowtimer);
    /** @type {null} */
    slideshowtimer = null;
  };
  jQuery.fx.speeds = {
    slow : 600,
    fast : 200,
    _default : 400
  };
  /**
   * @param {string} time
   * @param {string} type
   * @return {?}
   */
  jQuery.fn.delay = function(time, type) {
    return time = jQuery.fx ? jQuery.fx.speeds[time] || time : time, type = type || "fx", this.queue(type, function(e, incoming_item) {
      var key = window.setTimeout(e, time);
      /**
       * @return {undefined}
       */
      incoming_item.stop = function() {
        window.clearTimeout(key);
      };
    });
  };
  (function() {
    var n;
    var t = document.createElement("input");
    var self = document.createElement("div");
    var select = document.createElement("select");
    var opt = select.appendChild(document.createElement("option"));
    self = document.createElement("div");
    self.setAttribute("className", "t");
    /** @type {string} */
    self.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
    n = self.getElementsByTagName("a")[0];
    t.setAttribute("type", "checkbox");
    self.appendChild(t);
    n = self.getElementsByTagName("a")[0];
    /** @type {string} */
    n.style.cssText = "top:1px";
    /** @type {boolean} */
    support.getSetAttribute = "t" !== self.className;
    /** @type {boolean} */
    support.style = /top/.test(n.getAttribute("style"));
    /** @type {boolean} */
    support.hrefNormalized = "/a" === n.getAttribute("href");
    /** @type {boolean} */
    support.checkOn = !!t.value;
    support.optSelected = opt.selected;
    /** @type {boolean} */
    support.enctype = !!document.createElement("form").enctype;
    /** @type {boolean} */
    select.disabled = true;
    /** @type {boolean} */
    support.optDisabled = !opt.disabled;
    t = document.createElement("input");
    t.setAttribute("value", "");
    /** @type {boolean} */
    support.input = "" === t.getAttribute("value");
    /** @type {string} */
    t.value = "t";
    t.setAttribute("type", "radio");
    /** @type {boolean} */
    support.radioValue = "t" === t.value;
  })();
  /** @type {!RegExp} */
  var a = /\r/g;
  /** @type {!RegExp} */
  var rEscapableCharacters = /[\x20\t\r\n\f]+/g;
  jQuery.fn.extend({
    val : function(type) {
      var hooks;
      var value;
      var val;
      var elem = this[0];
      {
        if (arguments.length) {
          return val = jQuery.isFunction(type), this.each(function(ctx) {
            var value;
            if (1 === this.nodeType) {
              value = val ? type.call(this, ctx, jQuery(this).val()) : type;
              if (null == value) {
                /** @type {string} */
                value = "";
              } else {
                if ("number" == typeof value) {
                  /** @type {string} */
                  value = value + "";
                } else {
                  if (jQuery.isArray(value)) {
                    value = jQuery.map(value, function(value) {
                      return null == value ? "" : value + "";
                    });
                  }
                }
              }
              hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
              if (!(hooks && "set" in hooks && void 0 !== hooks.set(this, value, "value"))) {
                this.value = value;
              }
            }
          });
        }
        if (elem) {
          return hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()], hooks && "get" in hooks && void 0 !== (value = hooks.get(elem, "value")) ? value : (value = elem.value, "string" == typeof value ? value.replace(a, "") : null == value ? "" : value);
        }
      }
    }
  });
  jQuery.extend({
    valHooks : {
      option : {
        get : function(data) {
          var bars = jQuery.find.attr(data, "value");
          return null != bars ? bars : jQuery.trim(jQuery.text(data)).replace(rEscapableCharacters, " ");
        }
      },
      select : {
        get : function(data) {
          var value;
          var option;
          var options = data.options;
          var index = data.selectedIndex;
          /** @type {boolean} */
          var one = "select-one" === data.type || 0 > index;
          /** @type {(Array|null)} */
          var values = one ? null : [];
          var max = one ? index + 1 : options.length;
          var i = 0 > index ? max : one ? index : 0;
          for (; max > i; i++) {
            if (option = options[i], (option.selected || i === index) && (support.optDisabled ? !option.disabled : null === option.getAttribute("disabled")) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
              if (value = jQuery(option).val(), one) {
                return value;
              }
              values.push(value);
            }
          }
          return values;
        },
        set : function(type, name) {
          var outputFn;
          var data;
          var result = type.options;
          var overEls = jQuery.makeArray(name);
          var j = result.length;
          for (; j--;) {
            if (data = result[j], jQuery.inArray(jQuery.valHooks.option.get(data), overEls) > -1) {
              try {
                /** @type {boolean} */
                data.selected = outputFn = true;
              } catch (r) {
                data.scrollHeight;
              }
            } else {
              /** @type {boolean} */
              data.selected = false;
            }
          }
          return outputFn || (type.selectedIndex = -1), result;
        }
      }
    }
  });
  jQuery.each(["radio", "checkbox"], function() {
    jQuery.valHooks[this] = {
      set : function(type, name) {
        return jQuery.isArray(name) ? type.checked = jQuery.inArray(jQuery(type).val(), name) > -1 : void 0;
      }
    };
    if (!support.checkOn) {
      /**
       * @param {!Object} obj
       * @return {?}
       */
      jQuery.valHooks[this].get = function(obj) {
        return null === obj.getAttribute("value") ? "on" : obj.value;
      };
    }
  });
  var object;
  var result;
  var attrHandle = jQuery.expr.attrHandle;
  /** @type {!RegExp} */
  var reBlockName = /^(?:checked|selected)$/i;
  var getSetAttribute = support.getSetAttribute;
  var getSetInput = support.input;
  jQuery.fn.extend({
    attr : function(name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },
    removeAttr : function(name) {
      return this.each(function() {
        jQuery.removeAttr(this, name);
      });
    }
  });
  jQuery.extend({
    attr : function(name, value, val) {
      var index;
      var hooks;
      var i = name.nodeType;
      if (3 !== i && 8 !== i && 2 !== i) {
        return "undefined" == typeof name.getAttribute ? jQuery.prop(name, value, val) : (1 === i && jQuery.isXMLDoc(name) || (value = value.toLowerCase(), hooks = jQuery.attrHooks[value] || (jQuery.expr.match.bool.test(value) ? result : object)), void 0 !== val ? null === val ? void jQuery.removeAttr(name, value) : hooks && "set" in hooks && void 0 !== (index = hooks.set(name, val, value)) ? index : (name.setAttribute(value, val + ""), val) : hooks && "get" in hooks && null !== (index = hooks.get(name, 
        value)) ? index : (index = jQuery.find.attr(name, value), null == index ? void 0 : index));
      }
    },
    attrHooks : {
      type : {
        set : function(type, name) {
          if (!support.radioValue && "radio" === name && jQuery.nodeName(type, "input")) {
            var typeName = type.value;
            return type.setAttribute("type", name), typeName && (type.value = typeName), name;
          }
        }
      }
    },
    removeAttr : function(elem, value) {
      var name;
      var propName;
      /** @type {number} */
      var i = 0;
      var attrNames = value && value.match(rnotwhite);
      if (attrNames && 1 === elem.nodeType) {
        for (; name = attrNames[i++];) {
          propName = jQuery.propFix[name] || name;
          if (jQuery.expr.match.bool.test(name)) {
            if (getSetInput && getSetAttribute || !reBlockName.test(name)) {
              /** @type {boolean} */
              elem[propName] = false;
            } else {
              /** @type {boolean} */
              elem[jQuery.camelCase("default-" + name)] = elem[propName] = false;
            }
          } else {
            jQuery.attr(elem, name, "");
          }
          elem.removeAttribute(getSetAttribute ? name : propName);
        }
      }
    }
  });
  result = {
    set : function(type, s, name) {
      return s === false ? jQuery.removeAttr(type, name) : getSetInput && getSetAttribute || !reBlockName.test(name) ? type.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name) : type[jQuery.camelCase("default-" + name)] = type[name] = true, name;
    }
  };
  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(canCreateDiscussions, name) {
    var clearClassCycle = attrHandle[name] || jQuery.find.attr;
    if (getSetInput && getSetAttribute || !reBlockName.test(name)) {
      /**
       * @param {undefined} me
       * @param {string} name
       * @param {!Array} called
       * @return {?}
       */
      attrHandle[name] = function(me, name, called) {
        var ret;
        var handle;
        return called || (handle = attrHandle[name], attrHandle[name] = ret, ret = null != clearClassCycle(me, name, called) ? name.toLowerCase() : null, attrHandle[name] = handle), ret;
      };
    } else {
      /**
       * @param {?} canCreateDiscussions
       * @param {string} name
       * @param {boolean} isSlidingUp
       * @return {?}
       */
      attrHandle[name] = function(canCreateDiscussions, name, isSlidingUp) {
        return isSlidingUp ? void 0 : canCreateDiscussions[jQuery.camelCase("default-" + name)] ? name.toLowerCase() : null;
      };
    }
  });
  if (!(getSetInput && getSetAttribute)) {
    jQuery.attrHooks.value = {
      set : function(type, name, data) {
        return jQuery.nodeName(type, "input") ? void(type.defaultValue = name) : object && object.set(type, name, data);
      }
    };
  }
  if (!getSetAttribute) {
    object = {
      set : function(type, name, key) {
        var value = type.getAttributeNode(key);
        return value || type.setAttributeNode(value = type.ownerDocument.createAttribute(key)), value.value = name = name + "", "value" === key || name === type.getAttribute(key) ? name : void 0;
      }
    };
    /** @type {function(!Element, ?, !Function): ?} */
    attrHandle.id = attrHandle.name = attrHandle.coords = function(elem, name, res) {
      var cfg;
      return res ? void 0 : (cfg = elem.getAttributeNode(name)) && "" !== cfg.value ? cfg.value : null;
    };
    jQuery.valHooks.button = {
      get : function(obj, name) {
        var attributeNode = obj.getAttributeNode(name);
        return attributeNode && attributeNode.specified ? attributeNode.value : void 0;
      },
      set : object.set
    };
    jQuery.attrHooks.contenteditable = {
      set : function(type, name, data) {
        object.set(type, "" === name ? false : name, data);
      }
    };
    jQuery.each(["width", "height"], function(canCreateDiscussions, id) {
      jQuery.attrHooks[id] = {
        set : function(type, name) {
          return "" === name ? (type.setAttribute(id, "auto"), name) : void 0;
        }
      };
    });
  }
  if (!support.style) {
    jQuery.attrHooks.style = {
      get : function(obj) {
        return obj.style.cssText || void 0;
      },
      set : function(type, name) {
        return type.style.cssText = name + "";
      }
    };
  }
  /** @type {!RegExp} */
  var inputNodeNames = /^(?:input|select|textarea|button|object)$/i;
  /** @type {!RegExp} */
  var srsRegex = /^(?:a|area)$/i;
  jQuery.fn.extend({
    prop : function(value, name) {
      return access(this, jQuery.prop, value, name, arguments.length > 1);
    },
    removeProp : function(name) {
      return name = jQuery.propFix[name] || name, this.each(function() {
        try {
          this[name] = void 0;
          delete this[name];
        } catch (e) {
        }
      });
    }
  });
  jQuery.extend({
    prop : function(value, name, val) {
      var ret;
      var hooks;
      var date = value.nodeType;
      if (3 !== date && 8 !== date && 2 !== date) {
        return 1 === date && jQuery.isXMLDoc(value) || (name = jQuery.propFix[name] || name, hooks = jQuery.propHooks[name]), void 0 !== val ? hooks && "set" in hooks && void 0 !== (ret = hooks.set(value, val, name)) ? ret : value[name] = val : hooks && "get" in hooks && null !== (ret = hooks.get(value, name)) ? ret : value[name];
      }
    },
    propHooks : {
      tabIndex : {
        get : function(target) {
          var b = jQuery.find.attr(target, "tabindex");
          return b ? parseInt(b, 10) : inputNodeNames.test(target.nodeName) || srsRegex.test(target.nodeName) && target.href ? 0 : -1;
        }
      }
    },
    propFix : {
      "for" : "htmlFor",
      "class" : "className"
    }
  });
  if (!support.hrefNormalized) {
    jQuery.each(["href", "src"], function(canCreateDiscussions, name) {
      jQuery.propHooks[name] = {
        get : function(obj) {
          return obj.getAttribute(name, 4);
        }
      };
    });
  }
  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get : function(data) {
        var elem = data.parentNode;
        return elem && (elem.selectedIndex, elem.parentNode && elem.parentNode.selectedIndex), null;
      },
      set : function(type) {
        var target = type.parentNode;
        if (target) {
          target.selectedIndex;
          if (target.parentNode) {
            target.parentNode.selectedIndex;
          }
        }
      }
    };
  }
  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
    jQuery.propFix[this.toLowerCase()] = this;
  });
  if (!support.enctype) {
    /** @type {string} */
    jQuery.propFix.enctype = "encoding";
  }
  /** @type {!RegExp} */
  var reSpace = /[\t\r\n\f]/g;
  jQuery.fn.extend({
    addClass : function(value) {
      var callbackVals;
      var n;
      var val;
      var key;
      var marginA;
      var callbackCount;
      var type;
      /** @type {number} */
      var c = 0;
      if (jQuery.isFunction(value)) {
        return this.each(function(i) {
          jQuery(this).addClass(value.call(this, i, $(this)));
        });
      }
      if ("string" == typeof value && value) {
        /** @type {!Array} */
        callbackVals = value.match(rnotwhite) || [];
        for (; n = this[c++];) {
          if (key = $(n), val = 1 === n.nodeType && (" " + key + " ").replace(reSpace, " ")) {
            /** @type {number} */
            callbackCount = 0;
            for (; marginA = callbackVals[callbackCount++];) {
              if (val.indexOf(" " + marginA + " ") < 0) {
                /** @type {string} */
                val = val + (marginA + " ");
              }
            }
            type = jQuery.trim(val);
            if (key !== type) {
              jQuery.attr(n, "class", type);
            }
          }
        }
      }
      return this;
    },
    removeClass : function(value) {
      var zeroSizeMaxes;
      var a;
      var c;
      var b;
      var zeroSizeMax;
      var callbackCount;
      var val;
      /** @type {number} */
      var d = 0;
      if (jQuery.isFunction(value)) {
        return this.each(function(i) {
          jQuery(this).removeClass(value.call(this, i, $(this)));
        });
      }
      if (!arguments.length) {
        return this.attr("class", "");
      }
      if ("string" == typeof value && value) {
        /** @type {!Array} */
        zeroSizeMaxes = value.match(rnotwhite) || [];
        for (; a = this[d++];) {
          if (b = $(a), c = 1 === a.nodeType && (" " + b + " ").replace(reSpace, " ")) {
            /** @type {number} */
            callbackCount = 0;
            for (; zeroSizeMax = zeroSizeMaxes[callbackCount++];) {
              for (; c.indexOf(" " + zeroSizeMax + " ") > -1;) {
                /** @type {string} */
                c = c.replace(" " + zeroSizeMax + " ", " ");
              }
            }
            val = jQuery.trim(c);
            if (b !== val) {
              jQuery.attr(a, "class", val);
            }
          }
        }
      }
      return this;
    },
    toggleClass : function(name, state) {
      /** @type {string} */
      var undefined = typeof name;
      return "boolean" == typeof state && "string" === undefined ? state ? this.addClass(name) : this.removeClass(name) : jQuery.isFunction(name) ? this.each(function(i) {
        jQuery(this).toggleClass(name.call(this, i, $(this), state), state);
      }) : this.each(function() {
        var value;
        var o;
        var i;
        var rgb;
        if ("string" === undefined) {
          /** @type {number} */
          o = 0;
          i = jQuery(this);
          rgb = name.match(rnotwhite) || [];
          for (; value = rgb[o++];) {
            if (i.hasClass(value)) {
              i.removeClass(value);
            } else {
              i.addClass(value);
            }
          }
        } else {
          if (!(void 0 !== name && "boolean" !== undefined)) {
            value = $(this);
            if (value) {
              jQuery._data(this, "__className__", value);
            }
            jQuery.attr(this, "class", value || name === false ? "" : jQuery._data(this, "__className__") || "");
          }
        }
      });
    },
    hasClass : function(name) {
      var n;
      var brick;
      /** @type {number} */
      var r = 0;
      /** @type {string} */
      n = " " + name + " ";
      for (; brick = this[r++];) {
        if (1 === brick.nodeType && (" " + $(brick) + " ").replace(reSpace, " ").indexOf(n) > -1) {
          return true;
        }
      }
      return false;
    }
  });
  jQuery.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(canCreateDiscussions, type) {
    /**
     * @param {string} callback
     * @param {!Array} fn
     * @return {?}
     */
    jQuery.fn[type] = function(callback, fn) {
      return arguments.length > 0 ? this.on(type, null, callback, fn) : this.trigger(type);
    };
  });
  jQuery.fn.extend({
    hover : function(target, name) {
      return this.mouseenter(target).mouseleave(name || target);
    }
  });
  var location = window.location;
  var widgetUniqueIDIndex = jQuery.now();
  /** @type {!RegExp} */
  var rquery = /\?/;
  /** @type {!RegExp} */
  var separator = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
  /**
   * @param {string} data
   * @return {?}
   */
  jQuery.parseJSON = function(data) {
    if (window.JSON && window.JSON.parse) {
      return window.JSON.parse(data + "");
    }
    var options;
    /** @type {null} */
    var procSuccess = null;
    var name = jQuery.trim(data + "");
    return name && !jQuery.trim(name.replace(separator, function(LABEL_SUCCESS, extreme, b, a) {
      return options && extreme && (procSuccess = 0), 0 === procSuccess ? LABEL_SUCCESS : (options = b || extreme, procSuccess = procSuccess + (!a - !b), "");
    })) ? Function("return " + name)() : jQuery.error("Invalid JSON: " + data);
  };
  /**
   * @param {string} data
   * @return {?}
   */
  jQuery.parseXML = function(data) {
    var doc;
    var domParser;
    if (!data || "string" != typeof data) {
      return null;
    }
    try {
      if (window.DOMParser) {
        domParser = new window.DOMParser;
        doc = domParser.parseFromString(data, "text/xml");
      } else {
        doc = new window.ActiveXObject("Microsoft.XMLDOM");
        /** @type {string} */
        doc.async = "false";
        doc.loadXML(data);
      }
    } catch (r) {
      doc = void 0;
    }
    return doc && doc.documentElement && !doc.getElementsByTagName("parsererror").length || jQuery.error("Invalid XML: " + data), doc;
  };
  /** @type {!RegExp} */
  var savedRegExp = /#.*$/;
  /** @type {!RegExp} */
  var rts = /([?&])_=[^&]*/;
  /** @type {!RegExp} */
  var multipartRegExp = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm;
  /** @type {!RegExp} */
  var rperc = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/;
  /** @type {!RegExp} */
  var loader = /^(?:GET|HEAD)$/;
  /** @type {!RegExp} */
  var jsre = /^\/\//;
  /** @type {!RegExp} */
  var moveRegex = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/;
  var prefilters = {};
  var transports = {};
  /** @type {string} */
  var we = "*/".concat("*");
  var ajaxLocation = location.href;
  /** @type {!Array} */
  var value = moveRegex.exec(ajaxLocation.toLowerCase()) || [];
  jQuery.extend({
    active : 0,
    lastModified : {},
    etag : {},
    ajaxSettings : {
      url : ajaxLocation,
      type : "GET",
      isLocal : rperc.test(value[1]),
      global : true,
      processData : true,
      async : true,
      contentType : "application/x-www-form-urlencoded; charset=UTF-8",
      accepts : {
        "*" : we,
        text : "text/plain",
        html : "text/html",
        xml : "application/xml, text/xml",
        json : "application/json, text/javascript"
      },
      contents : {
        xml : /\bxml\b/,
        html : /\bhtml/,
        json : /\bjson\b/
      },
      responseFields : {
        xml : "responseXML",
        text : "responseText",
        json : "responseJSON"
      },
      converters : {
        "* text" : String,
        "text html" : true,
        "text json" : jQuery.parseJSON,
        "text xml" : jQuery.parseXML
      },
      flatOptions : {
        url : true,
        context : true
      }
    },
    ajaxSetup : function(target, settings) {
      return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
    },
    ajaxPrefilter : addToPrefiltersOrTransports(prefilters),
    ajaxTransport : addToPrefiltersOrTransports(transports),
    ajax : function(url, options) {
      /**
       * @param {number} status
       * @param {!Object} nativeStatusText
       * @param {!Array} responses
       * @param {!Object} headers
       * @return {undefined}
       */
      function done(status, nativeStatusText, responses, headers) {
        var isSuccess;
        var success;
        var error;
        var response;
        var modified;
        /** @type {!Object} */
        var statusText = nativeStatusText;
        if (2 !== otherPropertyName) {
          /** @type {number} */
          otherPropertyName = 2;
          if (showAboveTimeout) {
            window.clearTimeout(showAboveTimeout);
          }
          transport = void 0;
          newValue = headers || "";
          /** @type {number} */
          jqXHR.readyState = status > 0 ? 4 : 0;
          /** @type {boolean} */
          isSuccess = status >= 200 && 300 > status || 304 === status;
          if (responses) {
            response = ajaxHandleResponses(s, jqXHR, responses);
          }
          response = ajaxConvert(s, response, jqXHR, isSuccess);
          if (isSuccess) {
            if (s.ifModified) {
              modified = jqXHR.getResponseHeader("Last-Modified");
              if (modified) {
                jQuery.lastModified[cacheURL] = modified;
              }
              modified = jqXHR.getResponseHeader("etag");
              if (modified) {
                jQuery.etag[cacheURL] = modified;
              }
            }
            if (204 === status || "HEAD" === s.type) {
              /** @type {string} */
              statusText = "nocontent";
            } else {
              if (304 === status) {
                /** @type {string} */
                statusText = "notmodified";
              } else {
                statusText = response.state;
                success = response.data;
                error = response.error;
                /** @type {boolean} */
                isSuccess = !error;
              }
            }
          } else {
            error = statusText;
            if (!(!status && statusText)) {
              /** @type {string} */
              statusText = "error";
              if (0 > status) {
                /** @type {number} */
                status = 0;
              }
            }
          }
          /** @type {number} */
          jqXHR.status = status;
          /** @type {string} */
          jqXHR.statusText = (nativeStatusText || statusText) + "";
          if (isSuccess) {
            deferred.resolveWith(obj, [success, statusText, jqXHR]);
          } else {
            deferred.rejectWith(obj, [jqXHR, statusText, error]);
          }
          jqXHR.statusCode(statusCode);
          statusCode = void 0;
          if (p) {
            globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
          }
          completeDeferred.fireWith(obj, [jqXHR, statusText]);
          if (p) {
            globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
            if (!--jQuery.active) {
              jQuery.event.trigger("ajaxStop");
            }
          }
        }
      }
      if ("object" == typeof url) {
        /** @type {!Object} */
        options = url;
        url = void 0;
      }
      options = options || {};
      var filterParameters;
      var i;
      var cacheURL;
      var newValue;
      var showAboveTimeout;
      var p;
      var transport;
      var args;
      var s = jQuery.ajaxSetup({}, options);
      var obj = s.context || s;
      var globalEventContext = s.context && (obj.nodeType || obj.jquery) ? jQuery(obj) : jQuery.event;
      var deferred = jQuery.Deferred();
      var completeDeferred = jQuery.Callbacks("once memory");
      var statusCode = s.statusCode || {};
      var data = {};
      var requestHeadersNames = {};
      /** @type {number} */
      var otherPropertyName = 0;
      /** @type {string} */
      var status = "canceled";
      var jqXHR = {
        readyState : 0,
        getResponseHeader : function(name) {
          var v;
          if (2 === otherPropertyName) {
            if (!args) {
              args = {};
              for (; v = multipartRegExp.exec(newValue);) {
                /** @type {string} */
                args[v[1].toLowerCase()] = v[2];
              }
            }
            v = args[name.toLowerCase()];
          }
          return null == v ? null : v;
        },
        getAllResponseHeaders : function() {
          return 2 === otherPropertyName ? newValue : null;
        },
        setRequestHeader : function(name, value) {
          var lname = name.toLowerCase();
          return otherPropertyName || (name = requestHeadersNames[lname] = requestHeadersNames[lname] || name, data[name] = value), this;
        },
        overrideMimeType : function(type) {
          return otherPropertyName || (s.mimeType = type), this;
        },
        statusCode : function(map) {
          var tmp;
          if (map) {
            if (2 > otherPropertyName) {
              for (tmp in map) {
                /** @type {!Array} */
                statusCode[tmp] = [statusCode[tmp], map[tmp]];
              }
            } else {
              jqXHR.always(map[jqXHR.status]);
            }
          }
          return this;
        },
        abort : function(error) {
          var statusText = error || status;
          return transport && transport.abort(statusText), done(0, statusText), this;
        }
      };
      if (deferred.promise(jqXHR).complete = completeDeferred.add, jqXHR.success = jqXHR.done, jqXHR.error = jqXHR.fail, s.url = ((url || s.url || ajaxLocation) + "").replace(savedRegExp, "").replace(jsre, value[1] + "//"), s.type = options.method || options.type || s.method || s.type, s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""], null == s.crossDomain && (filterParameters = moveRegex.exec(s.url.toLowerCase()), s.crossDomain = !(!filterParameters || filterParameters[1] === 
      value[1] && filterParameters[2] === value[2] && (filterParameters[3] || ("http:" === filterParameters[1] ? "80" : "443")) === (value[3] || ("http:" === value[1] ? "80" : "443")))), s.data && s.processData && "string" != typeof s.data && (s.data = jQuery.param(s.data, s.traditional)), inspectPrefiltersOrTransports(prefilters, s, options, jqXHR), 2 === otherPropertyName) {
        return jqXHR;
      }
      p = jQuery.event && s.global;
      if (p && 0 === jQuery.active++) {
        jQuery.event.trigger("ajaxStart");
      }
      s.type = s.type.toUpperCase();
      /** @type {boolean} */
      s.hasContent = !loader.test(s.type);
      /** @type {string} */
      cacheURL = s.url;
      if (!s.hasContent) {
        if (s.data) {
          /** @type {string} */
          cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;
          delete s.data;
        }
        if (s.cache === false) {
          /** @type {string} */
          s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + widgetUniqueIDIndex++) : cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + widgetUniqueIDIndex++;
        }
      }
      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
        }
        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
        }
      }
      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
        jqXHR.setRequestHeader("Content-Type", s.contentType);
      }
      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + ("*" !== s.dataTypes[0] ? ", " + we + "; q=0.01" : "") : s.accepts["*"]);
      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      }
      if (s.beforeSend && (s.beforeSend.call(obj, jqXHR, s) === false || 2 === otherPropertyName)) {
        return jqXHR.abort();
      }
      /** @type {string} */
      status = "abort";
      for (i in{
        success : 1,
        error : 1,
        complete : 1
      }) {
        jqXHR[i](s[i]);
      }
      if (transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR)) {
        if (jqXHR.readyState = 1, p && globalEventContext.trigger("ajaxSend", [jqXHR, s]), 2 === otherPropertyName) {
          return jqXHR;
        }
        if (s.async && s.timeout > 0) {
          showAboveTimeout = window.setTimeout(function() {
            jqXHR.abort("timeout");
          }, s.timeout);
        }
        try {
          /** @type {number} */
          otherPropertyName = 1;
          transport.send(data, done);
        } catch (success) {
          if (!(2 > otherPropertyName)) {
            throw success;
          }
          done(-1, success);
        }
      } else {
        done(-1, "No Transport");
      }
      return jqXHR;
    },
    getJSON : function(data, url, options) {
      return jQuery.get(data, url, options, "json");
    },
    getScript : function(data, options) {
      return jQuery.get(data, void 0, options, "script");
    }
  });
  jQuery.each(["get", "post"], function(canCreateDiscussions, method) {
    /**
     * @param {string} url
     * @param {!Object} v
     * @param {!Object} s
     * @param {!Object} o
     * @return {?}
     */
    jQuery[method] = function(url, v, s, o) {
      return jQuery.isFunction(v) && (o = o || s, s = v, v = void 0), jQuery.ajax(jQuery.extend({
        url : url,
        type : method,
        dataType : o,
        data : v,
        success : s
      }, jQuery.isPlainObject(url) && url));
    };
  });
  /**
   * @param {string} url
   * @return {?}
   */
  jQuery._evalUrl = function(url) {
    return jQuery.ajax({
      url : url,
      type : "GET",
      dataType : "script",
      cache : true,
      async : false,
      global : false,
      "throws" : true
    });
  };
  jQuery.fn.extend({
    wrapAll : function(target) {
      if (jQuery.isFunction(target)) {
        return this.each(function(i) {
          jQuery(this).wrapAll(target.call(this, i));
        });
      }
      if (this[0]) {
        var n = jQuery(target, this[0].ownerDocument).eq(0).clone(true);
        if (this[0].parentNode) {
          n.insertBefore(this[0]);
        }
        n.map(function() {
          var elem = this;
          for (; elem.firstChild && 1 === elem.firstChild.nodeType;) {
            elem = elem.firstChild;
          }
          return elem;
        }).append(this);
      }
      return this;
    },
    wrapInner : function(content) {
      return jQuery.isFunction(content) ? this.each(function(i) {
        jQuery(this).wrapInner(content.call(this, i));
      }) : this.each(function() {
        var cElement = jQuery(this);
        var self = cElement.contents();
        if (self.length) {
          self.wrapAll(content);
        } else {
          cElement.append(content);
        }
      });
    },
    wrap : function(html) {
      var isFunction = jQuery.isFunction(html);
      return this.each(function(i) {
        jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
      });
    },
    unwrap : function() {
      return this.parent().each(function() {
        if (!jQuery.nodeName(this, "body")) {
          jQuery(this).replaceWith(this.childNodes);
        }
      }).end();
    }
  });
  /**
   * @param {!Object} type
   * @return {?}
   */
  jQuery.expr.filters.hidden = function(type) {
    return support.reliableHiddenOffsets() ? type.offsetWidth <= 0 && type.offsetHeight <= 0 && !type.getClientRects().length : close(type);
  };
  /**
   * @param {undefined} elem
   * @return {?}
   */
  jQuery.expr.filters.visible = function(elem) {
    return !jQuery.expr.filters.hidden(elem);
  };
  /** @type {!RegExp} */
  var REGEX_ESCAPE_EXPR = /%20/g;
  /** @type {!RegExp} */
  var regCls = /\[\]$/;
  /** @type {!RegExp} */
  var allDoubleQuoteRE = /\r?\n/g;
  /** @type {!RegExp} */
  var reHasHexPrefix = /^(?:submit|button|image|reset|file)$/i;
  /** @type {!RegExp} */
  var rsubmittable = /^(?:input|select|textarea|keygen)/i;
  /**
   * @param {!Object} object
   * @param {string} key
   * @return {?}
   */
  jQuery.param = function(object, key) {
    var i;
    /** @type {!Array} */
    var displayUsedBy = [];
    /**
     * @param {?} t
     * @param {string} value
     * @return {undefined}
     */
    var add = function(t, value) {
      value = jQuery.isFunction(value) ? value() : null == value ? "" : value;
      /** @type {string} */
      displayUsedBy[displayUsedBy.length] = encodeURIComponent(t) + "=" + encodeURIComponent(value);
    };
    if (void 0 === key && (key = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional), jQuery.isArray(object) || object.jquery && !jQuery.isPlainObject(object)) {
      jQuery.each(object, function() {
        add(this.name, this.value);
      });
    } else {
      for (i in object) {
        merge(i, object[i], key, add);
      }
    }
    return displayUsedBy.join("&").replace(REGEX_ESCAPE_EXPR, "+");
  };
  jQuery.fn.extend({
    serialize : function() {
      return jQuery.param(this.serializeArray());
    },
    serializeArray : function() {
      return this.map(function() {
        var elements = jQuery.prop(this, "elements");
        return elements ? jQuery.makeArray(elements) : this;
      }).filter(function() {
        var string = this.type;
        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !reHasHexPrefix.test(string) && (this.checked || !reg.test(string));
      }).map(function(canCreateDiscussions, ctlParams) {
        var val = jQuery(this).val();
        return null == val ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
          return {
            name : ctlParams.name,
            value : val.replace(allDoubleQuoteRE, "\r\n")
          };
        }) : {
          name : ctlParams.name,
          value : val.replace(allDoubleQuoteRE, "\r\n")
        };
      }).get();
    }
  });
  /** @type {function(): ?} */
  jQuery.ajaxSettings.xhr = void 0 !== window.ActiveXObject ? function() {
    return this.isLocal ? getNewXmlHttpRequest() : document.documentMode > 8 ? createStandardXHR() : /^(get|post|head|put|delete|options)$/i.test(this.type) && createStandardXHR() || getNewXmlHttpRequest();
  } : createStandardXHR;
  /** @type {number} */
  var syncTaskCounter = 0;
  var args = {};
  var xmlHttp = jQuery.ajaxSettings.xhr();
  if (window.attachEvent) {
    window.attachEvent("onunload", function() {
      var arg;
      for (arg in args) {
        args[arg](void 0, true);
      }
    });
  }
  /** @type {boolean} */
  support.cors = !!xmlHttp && "withCredentials" in xmlHttp;
  /** @type {boolean} */
  xmlHttp = support.ajax = !!xmlHttp;
  if (xmlHttp) {
    jQuery.ajaxTransport(function(options) {
      if (!options.crossDomain || support.cors) {
        var callback;
        return {
          send : function(headers, callback) {
            var name;
            var xhr = options.xhr();
            /** @type {number} */
            var asyncCbParam = ++syncTaskCounter;
            if (xhr.open(options.type, options.url, options.async, options.username, options.password), options.xhrFields) {
              for (name in options.xhrFields) {
                xhr[name] = options.xhrFields[name];
              }
            }
            if (options.mimeType && xhr.overrideMimeType) {
              xhr.overrideMimeType(options.mimeType);
            }
            if (!(options.crossDomain || headers["X-Requested-With"])) {
              /** @type {string} */
              headers["X-Requested-With"] = "XMLHttpRequest";
            }
            for (name in headers) {
              if (void 0 !== headers[name]) {
                xhr.setRequestHeader(name, headers[name] + "");
              }
            }
            xhr.send(options.hasContent && options.data || null);
            /**
             * @param {!Object} _
             * @param {string} isAbort
             * @return {undefined}
             */
            callback = function(_, isAbort) {
              var _name;
              var statusText;
              var responses;
              if (callback && (isAbort || 4 === xhr.readyState)) {
                if (delete args[asyncCbParam], callback = void 0, xhr.onreadystatechange = jQuery.noop, isAbort) {
                  if (4 !== xhr.readyState) {
                    xhr.abort();
                  }
                } else {
                  responses = {};
                  _name = xhr.status;
                  if ("string" == typeof xhr.responseText) {
                    /** @type {string} */
                    responses.text = xhr.responseText;
                  }
                  try {
                    statusText = xhr.statusText;
                  } catch (s) {
                    /** @type {string} */
                    statusText = "";
                  }
                  if (_name || !options.isLocal || options.crossDomain) {
                    if (1223 === _name) {
                      /** @type {number} */
                      _name = 204;
                    }
                  } else {
                    /** @type {number} */
                    _name = responses.text ? 200 : 404;
                  }
                }
              }
              if (responses) {
                callback(_name, statusText, responses, xhr.getAllResponseHeaders());
              }
            };
            if (options.async) {
              if (4 === xhr.readyState) {
                window.setTimeout(callback);
              } else {
                /** @type {function(!Object, string): undefined} */
                xhr.onreadystatechange = args[asyncCbParam] = callback;
              }
            } else {
              callback();
            }
          },
          abort : function() {
            if (callback) {
              callback(void 0, true);
            }
          }
        };
      }
    });
  }
  jQuery.ajaxSetup({
    accepts : {
      script : "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
    },
    contents : {
      script : /\b(?:java|ecma)script\b/
    },
    converters : {
      "text script" : function(value) {
        return jQuery.globalEval(value), value;
      }
    }
  });
  jQuery.ajaxPrefilter("script", function(settings) {
    if (void 0 === settings.cache) {
      /** @type {boolean} */
      settings.cache = false;
    }
    if (settings.crossDomain) {
      /** @type {string} */
      settings.type = "GET";
      /** @type {boolean} */
      settings.global = false;
    }
  });
  jQuery.ajaxTransport("script", function(s) {
    if (s.crossDomain) {
      var script;
      var head = document.head || jQuery("head")[0] || document.documentElement;
      return {
        send : function(packets, callback) {
          script = document.createElement("script");
          /** @type {boolean} */
          script.async = true;
          if (s.scriptCharset) {
            script.charset = s.scriptCharset;
          }
          script.src = s.url;
          /** @type {function(string, string): undefined} */
          script.onload = script.onreadystatechange = function(event, data) {
            if (data || !script.readyState || /loaded|complete/.test(script.readyState)) {
              /** @type {null} */
              script.onload = script.onreadystatechange = null;
              if (script.parentNode) {
                script.parentNode.removeChild(script);
              }
              /** @type {null} */
              script = null;
              if (!data) {
                callback(200, "success");
              }
            }
          };
          head.insertBefore(script, head.firstChild);
        },
        abort : function() {
          if (script) {
            script.onload(void 0, true);
          }
        }
      };
    }
  });
  /** @type {!Array} */
  var oldCallbacks = [];
  /** @type {!RegExp} */
  var t = /(=)\?(?=&|$)|\?\?/;
  jQuery.ajaxSetup({
    jsonp : "callback",
    jsonpCallback : function() {
      var indexLookupKey = oldCallbacks.pop() || jQuery.expando + "_" + widgetUniqueIDIndex++;
      return this[indexLookupKey] = true, indexLookupKey;
    }
  });
  jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, scanners) {
    var callbackName;
    var overwritten;
    var responseContainer;
    /** @type {(boolean|string)} */
    var i = s.jsonp !== false && (t.test(s.url) ? "url" : "string" == typeof s.data && 0 === (s.contentType || "").indexOf("application/x-www-form-urlencoded") && t.test(s.data) && "data");
    return i || "jsonp" === s.dataTypes[0] ? (callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback, i ? s[i] = s[i].replace(t, "$1" + callbackName) : s.jsonp !== false && (s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName), s.converters["script json"] = function() {
      return responseContainer || jQuery.error(callbackName + " was not called"), responseContainer[0];
    }, s.dataTypes[0] = "json", overwritten = window[callbackName], window[callbackName] = function() {
      /** @type {!Arguments} */
      responseContainer = arguments;
    }, scanners.always(function() {
      if (void 0 === overwritten) {
        jQuery(window).removeProp(callbackName);
      } else {
        window[callbackName] = overwritten;
      }
      if (s[callbackName]) {
        s.jsonpCallback = originalSettings.jsonpCallback;
        oldCallbacks.push(callbackName);
      }
      if (responseContainer && jQuery.isFunction(overwritten)) {
        overwritten(responseContainer[0]);
      }
      responseContainer = overwritten = void 0;
    }), "script") : void 0;
  });
  /**
   * @param {string} data
   * @param {!Object} context
   * @param {!Function} keepScripts
   * @return {?}
   */
  jQuery.parseHTML = function(data, context, keepScripts) {
    if (!data || "string" != typeof data) {
      return null;
    }
    if ("boolean" == typeof context) {
      /** @type {!Object} */
      keepScripts = context;
      /** @type {boolean} */
      context = false;
    }
    context = context || document;
    /** @type {(Array<string>|null)} */
    var parsed = rsingleTag.exec(data);
    /** @type {(Array|boolean)} */
    var b = !keepScripts && [];
    return parsed ? [context.createElement(parsed[1])] : (parsed = buildFragment([data], context, b), b && b.length && jQuery(b).remove(), jQuery.merge([], parsed.childNodes));
  };
  /** @type {function(string, !Object, !Function): ?} */
  var proxyStoreLoad = jQuery.fn.load;
  /**
   * @param {string} target
   * @param {!Object} value
   * @param {!Function} callback
   * @return {?}
   */
  jQuery.fn.load = function(target, value, callback) {
    if ("string" != typeof target && proxyStoreLoad) {
      return proxyStoreLoad.apply(this, arguments);
    }
    var selector;
    var method;
    var args;
    var self = this;
    var type = target.indexOf(" ");
    return type > -1 && (selector = jQuery.trim(target.slice(type, target.length)), target = target.slice(0, type)), jQuery.isFunction(value) ? (callback = value, value = void 0) : value && "object" == typeof value && (method = "POST"), self.length > 0 && jQuery.ajax({
      url : target,
      type : method || "GET",
      dataType : "html",
      data : value
    }).done(function(responseText) {
      /** @type {!Arguments} */
      args = arguments;
      self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
    }).always(callback && function(type, name) {
      self.each(function() {
        callback.apply(this, args || [type.responseText, name, type]);
      });
    }), this;
  };
  jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(canCreateDiscussions, type) {
    /**
     * @param {undefined} e
     * @return {?}
     */
    jQuery.fn[type] = function(e) {
      return this.on(type, e);
    };
  });
  /**
   * @param {?} elem
   * @return {?}
   */
  jQuery.expr.filters.animated = function(elem) {
    return jQuery.grep(jQuery.timers, function(fn) {
      return elem === fn.elem;
    }).length;
  };
  jQuery.offset = {
    setOffset : function(element, options, x) {
      var _arg;
      var x;
      var curCSSTop;
      var i;
      var curOffset;
      var curCSSLeft;
      var p;
      var propertyName = jQuery.css(element, "position");
      var f = jQuery(element);
      var o = {};
      if ("static" === propertyName) {
        /** @type {string} */
        element.style.position = "relative";
      }
      curOffset = f.offset();
      curCSSTop = jQuery.css(element, "top");
      curCSSLeft = jQuery.css(element, "left");
      /** @type {boolean} */
      p = ("absolute" === propertyName || "fixed" === propertyName) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1;
      if (p) {
        _arg = f.position();
        i = _arg.top;
        x = _arg.left;
      } else {
        /** @type {number} */
        i = parseFloat(curCSSTop) || 0;
        /** @type {number} */
        x = parseFloat(curCSSLeft) || 0;
      }
      if (jQuery.isFunction(options)) {
        options = options.call(element, x, jQuery.extend({}, curOffset));
      }
      if (null != options.top) {
        /** @type {number} */
        o.top = options.top - curOffset.top + i;
      }
      if (null != options.left) {
        /** @type {number} */
        o.left = options.left - curOffset.left + x;
      }
      if ("using" in options) {
        options.using.call(element, o);
      } else {
        f.css(o);
      }
    }
  };
  jQuery.fn.extend({
    offset : function(x) {
      if (arguments.length) {
        return void 0 === x ? this : this.each(function(i) {
          jQuery.offset.setOffset(this, x, i);
        });
      }
      var doc;
      var win;
      var result = {
        top : 0,
        left : 0
      };
      var node = this[0];
      var elem = node && node.ownerDocument;
      if (elem) {
        return doc = elem.documentElement, jQuery.contains(doc, node) ? ("undefined" != typeof node.getBoundingClientRect && (result = node.getBoundingClientRect()), win = getWindow(elem), {
          top : result.top + (win.pageYOffset || doc.scrollTop) - (doc.clientTop || 0),
          left : result.left + (win.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0)
        }) : result;
      }
    },
    position : function() {
      if (this[0]) {
        var offsetParent;
        var offset;
        var parentOffset = {
          top : 0,
          left : 0
        };
        var i = this[0];
        return "fixed" === jQuery.css(i, "position") ? offset = i.getBoundingClientRect() : (offsetParent = this.offsetParent(), offset = this.offset(), jQuery.nodeName(offsetParent[0], "html") || (parentOffset = offsetParent.offset()), parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true), parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true)), {
          top : offset.top - parentOffset.top - jQuery.css(i, "marginTop", true),
          left : offset.left - parentOffset.left - jQuery.css(i, "marginLeft", true)
        };
      }
    },
    offsetParent : function() {
      return this.map(function() {
        var elem = this.offsetParent;
        for (; elem && !jQuery.nodeName(elem, "html") && "static" === jQuery.css(elem, "position");) {
          elem = elem.offsetParent;
        }
        return elem || root;
      });
    }
  });
  jQuery.each({
    scrollLeft : "pageXOffset",
    scrollTop : "pageYOffset"
  }, function(type, prop) {
    /** @type {boolean} */
    var top = /Y/.test(prop);
    /**
     * @param {?} value
     * @return {?}
     */
    jQuery.fn[type] = function(value) {
      return access(this, function(elem, method, val) {
        var win = getWindow(elem);
        return void 0 === val ? win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method] : void(win ? win.scrollTo(top ? jQuery(win).scrollLeft() : val, top ? val : jQuery(win).scrollTop()) : elem[method] = val);
      }, type, value, arguments.length, null);
    };
  });
  jQuery.each(["top", "left"], function(canCreateDiscussions, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, val) {
      return val ? (val = curCSS(elem, prop), rnumnonpx.test(val) ? jQuery(elem).position()[prop] + "px" : val) : void 0;
    });
  });
  jQuery.each({
    Height : "height",
    Width : "width"
  }, function(name, type) {
    jQuery.each({
      padding : "inner" + name,
      content : type,
      "" : "outer" + name
    }, function(defaultExtra, original) {
      /**
       * @param {!Object} margin
       * @param {boolean} value
       * @return {?}
       */
      jQuery.fn[original] = function(margin, value) {
        var chainable = arguments.length && (defaultExtra || "boolean" != typeof margin);
        var extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
        return access(this, function(elem, key, undefined) {
          var doc;
          return jQuery.isWindow(elem) ? elem.document.documentElement["client" + name] : 9 === elem.nodeType ? (doc = elem.documentElement, Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name])) : void 0 === undefined ? jQuery.css(elem, key, extra) : jQuery.style(elem, key, undefined, extra);
        }, type, chainable ? margin : void 0, chainable, null);
      };
    });
  });
  jQuery.fn.extend({
    bind : function(type, name, fn) {
      return this.on(type, null, name, fn);
    },
    unbind : function(type, fn) {
      return this.off(type, null, fn);
    },
    delegate : function(filter, event, fn, t) {
      return this.on(event, filter, fn, t);
    },
    undelegate : function(selector, event, fn) {
      return 1 === arguments.length ? this.off(selector, "**") : this.off(event, selector || "**", fn);
    }
  });
  /**
   * @return {?}
   */
  jQuery.fn.size = function() {
    return this.length;
  };
  jQuery.fn.andSelf = jQuery.fn.addBack;
  if ("function" == typeof define && define.amd) {
    define("jquery", [], function() {
      return jQuery;
    });
  }
  var _jQuery = window.jQuery;
  var old$ = window.$;
  return jQuery.noConflict = function(deep) {
    return window.$ === jQuery && (window.$ = old$), deep && window.jQuery === jQuery && (window.jQuery = _jQuery), jQuery;
  }, zoomAware || (window.jQuery = window.$ = jQuery), jQuery;
});
(function(factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery"], function(a0) {
      return factory(a0);
    });
  } else {
    if (typeof module === "object" && typeof module.exports === "object") {
      module.exports = factory(require("jquery"));
    } else {
      factory(window.jQuery);
    }
  }
})(function(jQuery) {
  /**
   * @param {string} ua
   * @return {?}
   */
  function uaMatch(ua) {
    if (ua === undefined) {
      /** @type {string} */
      ua = window.navigator.userAgent;
    }
    ua = ua.toLowerCase();
    /** @type {!Array<string>} */
    var o = /(edge)\/([\w.]+)/.exec(ua) || /(opr)[\/]([\w.]+)/.exec(ua) || /(chrome)[ \/]([\w.]+)/.exec(ua) || /(iemobile)[\/]([\w.]+)/.exec(ua) || /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 
    0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
    /** @type {!Array} */
    var BROWSER_ENGINES = /(ipad)/.exec(ua) || /(ipod)/.exec(ua) || /(windows phone)/.exec(ua) || /(iphone)/.exec(ua) || /(kindle)/.exec(ua) || /(silk)/.exec(ua) || /(android)/.exec(ua) || /(win)/.exec(ua) || /(mac)/.exec(ua) || /(linux)/.exec(ua) || /(cros)/.exec(ua) || /(playbook)/.exec(ua) || /(bb)/.exec(ua) || /(blackberry)/.exec(ua) || [];
    var browser = {};
    var matched = {
      browser : o[5] || o[3] || o[1] || "",
      version : o[2] || o[4] || "0",
      versionNumber : o[4] || o[2] || "0",
      platform : BROWSER_ENGINES[0] || ""
    };
    if (matched.browser) {
      /** @type {boolean} */
      browser[matched.browser] = true;
      /** @type {string} */
      browser.version = matched.version;
      /** @type {number} */
      browser.versionNumber = parseInt(matched.versionNumber, 10);
    }
    if (matched.platform) {
      /** @type {boolean} */
      browser[matched.platform] = true;
    }
    if (browser.android || browser.bb || browser.blackberry || browser.ipad || browser.iphone || browser.ipod || browser.kindle || browser.playbook || browser.silk || browser["windows phone"]) {
      /** @type {boolean} */
      browser.mobile = true;
    }
    if (browser.cros || browser.mac || browser.linux || browser.win) {
      /** @type {boolean} */
      browser.desktop = true;
    }
    if (browser.chrome || browser.opr || browser.safari) {
      /** @type {boolean} */
      browser.webkit = true;
    }
    if (browser.rv || browser.iemobile) {
      /** @type {string} */
      var ie = "msie";
      /** @type {string} */
      matched.browser = ie;
      /** @type {boolean} */
      browser[ie] = true;
    }
    if (browser.edge) {
      delete browser.edge;
      /** @type {string} */
      var msedge = "msedge";
      /** @type {string} */
      matched.browser = msedge;
      /** @type {boolean} */
      browser[msedge] = true;
    }
    if (browser.safari && browser.blackberry) {
      /** @type {string} */
      var blackberry = "blackberry";
      /** @type {string} */
      matched.browser = blackberry;
      /** @type {boolean} */
      browser[blackberry] = true;
    }
    if (browser.safari && browser.playbook) {
      /** @type {string} */
      var playbook = "playbook";
      /** @type {string} */
      matched.browser = playbook;
      /** @type {boolean} */
      browser[playbook] = true;
    }
    if (browser.bb) {
      /** @type {string} */
      var blackberry = "blackberry";
      /** @type {string} */
      matched.browser = blackberry;
      /** @type {boolean} */
      browser[blackberry] = true;
    }
    if (browser.opr) {
      /** @type {string} */
      var opera = "opera";
      /** @type {string} */
      matched.browser = opera;
      /** @type {boolean} */
      browser[opera] = true;
    }
    if (browser.safari && browser.android) {
      /** @type {string} */
      var android = "android";
      /** @type {string} */
      matched.browser = android;
      /** @type {boolean} */
      browser[android] = true;
    }
    if (browser.safari && browser.kindle) {
      /** @type {string} */
      var kindle = "kindle";
      /** @type {string} */
      matched.browser = kindle;
      /** @type {boolean} */
      browser[kindle] = true;
    }
    if (browser.safari && browser.silk) {
      /** @type {string} */
      var silk = "silk";
      /** @type {string} */
      matched.browser = silk;
      /** @type {boolean} */
      browser[silk] = true;
    }
    /** @type {string} */
    browser.name = matched.browser;
    browser.platform = matched.platform;
    return browser;
  }
  window.jQBrowser = uaMatch(window.navigator.userAgent);
  /** @type {function(string): ?} */
  window.jQBrowser.uaMatch = uaMatch;
  if (jQuery) {
    jQuery.browser = window.jQBrowser;
  }
  return window.jQBrowser;
});
(function(factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery", "./version"], factory);
  } else {
    factory(jQuery);
  }
})(function($) {
  /** @type {number} */
  var uuid = 0;
  /** @type {function(this:(IArrayLike<T>|string), *=, *=): !Array<T>} */
  var slice = Array.prototype.slice;
  $.cleanData = function(origRelativeNext) {
    return function(checkSet) {
      var events;
      var elem;
      var i;
      /** @type {number} */
      i = 0;
      for (; (elem = checkSet[i]) != null; i++) {
        try {
          events = $._data(elem, "events");
          if (events && events.remove) {
            $(elem).triggerHandler("remove");
          }
        } catch (r) {
        }
      }
      origRelativeNext(checkSet);
    };
  }($.cleanData);
  /**
   * @param {string} name
   * @param {!Function} base
   * @param {!Object} prototype
   * @return {?}
   */
  $.widget = function(name, base, prototype) {
    var existingConstructor;
    var constructor;
    var basePrototype;
    var proxiedPrototype = {};
    var namespace = name.split(".")[0];
    name = name.split(".")[1];
    /** @type {string} */
    var n = namespace + "-" + name;
    if (!prototype) {
      /** @type {!Function} */
      prototype = base;
      /** @type {function(): undefined} */
      base = $.Widget;
    }
    if ($.isArray(prototype)) {
      prototype = $.extend.apply(null, [{}].concat(prototype));
    }
    /**
     * @param {undefined} e
     * @return {?}
     */
    $.expr[":"][n.toLowerCase()] = function(e) {
      return !!$.data(e, n);
    };
    $[namespace] = $[namespace] || {};
    existingConstructor = $[namespace][name];
    /** @type {function(string, !Object): ?} */
    constructor = $[namespace][name] = function(options, element) {
      if (!this._createWidget) {
        return new constructor(options, element);
      }
      if (arguments.length) {
        this._createWidget(options, element);
      }
    };
    $.extend(constructor, existingConstructor, {
      version : prototype.version,
      _proto : $.extend({}, prototype),
      _childConstructors : []
    });
    basePrototype = new base;
    basePrototype.options = $.widget.extend({}, basePrototype.options);
    $.each(prototype, function(prop, value) {
      if (!$.isFunction(value)) {
        /** @type {!Function} */
        proxiedPrototype[prop] = value;
        return;
      }
      proxiedPrototype[prop] = function() {
        /**
         * @return {?}
         */
        function _super() {
          return base.prototype[prop].apply(this, arguments);
        }
        /**
         * @param {!Object} args
         * @return {?}
         */
        function _superApply(args) {
          return base.prototype[prop].apply(this, args);
        }
        return function() {
          var tmp = this._super;
          var __superApply = this._superApply;
          var _ref12;
          /** @type {function(): ?} */
          this._super = _super;
          /** @type {function(!Object): ?} */
          this._superApply = _superApply;
          _ref12 = value.apply(this, arguments);
          this._super = tmp;
          this._superApply = __superApply;
          return _ref12;
        };
      }();
    });
    constructor.prototype = $.widget.extend(basePrototype, {
      widgetEventPrefix : existingConstructor ? basePrototype.widgetEventPrefix || name : name
    }, proxiedPrototype, {
      constructor : constructor,
      namespace : namespace,
      widgetName : name,
      widgetFullName : n
    });
    if (existingConstructor) {
      $.each(existingConstructor._childConstructors, function(canCreateDiscussions, child) {
        var childPrototype = child.prototype;
        $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto);
      });
      delete existingConstructor._childConstructors;
    } else {
      base._childConstructors.push(constructor);
    }
    $.widget.bridge(name, constructor);
    return constructor;
  };
  /**
   * @param {string} target
   * @return {?}
   */
  $.widget.extend = function(target) {
    /** @type {!Array<?>} */
    var result = slice.call(arguments, 1);
    /** @type {number} */
    var i = 0;
    /** @type {number} */
    var trlen = result.length;
    var key;
    var value;
    for (; i < trlen; i++) {
      for (key in result[i]) {
        value = result[i][key];
        if (result[i].hasOwnProperty(key) && value !== undefined) {
          if ($.isPlainObject(value)) {
            target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : $.widget.extend({}, value);
          } else {
            target[key] = value;
          }
        }
      }
    }
    return target;
  };
  /**
   * @param {string} name
   * @param {!Function} object
   * @return {undefined}
   */
  $.widget.bridge = function(name, object) {
    var id = object.prototype.widgetFullName || name;
    /**
     * @param {?} options
     * @return {?}
     */
    $.fn[name] = function(options) {
      /** @type {boolean} */
      var userProvidedMessage = typeof options === "string";
      /** @type {!Array<?>} */
      var args = slice.call(arguments, 1);
      var returnValue = this;
      if (userProvidedMessage) {
        this.each(function() {
          var methodValue;
          var instance = $.data(this, id);
          if (options === "instance") {
            returnValue = instance;
            return false;
          }
          if (!instance) {
            return $.error("cannot call methods on " + name + " prior to initialization; attempted to call method '" + options + "'");
          }
          if (!$.isFunction(instance[options]) || options.charAt(0) === "_") {
            return $.error("no such method '" + options + "' for " + name + " widget instance");
          }
          methodValue = instance[options].apply(instance, args);
          if (methodValue !== instance && methodValue !== undefined) {
            returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;
            return false;
          }
        });
      } else {
        if (args.length) {
          options = $.widget.extend.apply(null, [options].concat(args));
        }
        this.each(function() {
          var instance = $.data(this, id);
          if (instance) {
            instance.option(options || {});
            if (instance._init) {
              instance._init();
            }
          } else {
            $.data(this, id, new object(options, this));
          }
        });
      }
      return returnValue;
    };
  };
  /**
   * @return {undefined}
   */
  $.Widget = function() {
  };
  /** @type {!Array} */
  $.Widget._childConstructors = [];
  $.Widget.prototype = {
    widgetName : "widget",
    widgetEventPrefix : "",
    defaultElement : "<div>",
    options : {
      classes : {},
      disabled : false,
      create : null
    },
    _createWidget : function(options, element) {
      element = $(element || this.defaultElement || this)[0];
      this.element = $(element);
      /** @type {number} */
      this.uuid = uuid++;
      /** @type {string} */
      this.eventNamespace = "." + this.widgetName + this.uuid;
      this.bindings = $();
      this.hoverable = $();
      this.focusable = $();
      this.classesElementLookup = {};
      if (element !== this) {
        $.data(element, this.widgetFullName, this);
        this._on(true, this.element, {
          remove : function(item) {
            if (item.target === element) {
              this.destroy();
            }
          }
        });
        this.document = $(element.style ? element.ownerDocument : element.document || element);
        this.window = $(this.document[0].defaultView || this.document[0].parentWindow);
      }
      this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);
      this._create();
      if (this.options.disabled) {
        this._setOptionDisabled(this.options.disabled);
      }
      this._trigger("create", null, this._getCreateEventData());
      this._init();
    },
    _getCreateOptions : function() {
      return {};
    },
    _getCreateEventData : $.noop,
    _create : $.noop,
    _init : $.noop,
    destroy : function() {
      var that = this;
      this._destroy();
      $.each(this.classesElementLookup, function(key, value) {
        that._removeClass(value, key);
      });
      this.element.off(this.eventNamespace).removeData(this.widgetFullName);
      this.widget().off(this.eventNamespace).removeAttr("aria-disabled");
      this.bindings.off(this.eventNamespace);
    },
    _destroy : $.noop,
    widget : function() {
      return this.element;
    },
    option : function(name, value) {
      /** @type {string} */
      var options = name;
      var parts;
      var current;
      var i;
      if (arguments.length === 0) {
        return $.widget.extend({}, this.options);
      }
      if (typeof name === "string") {
        options = {};
        /** @type {!Array<string>} */
        parts = name.split(".");
        /** @type {string} */
        name = parts.shift();
        if (parts.length) {
          current = options[name] = $.widget.extend({}, this.options[name]);
          /** @type {number} */
          i = 0;
          for (; i < parts.length - 1; i++) {
            current[parts[i]] = current[parts[i]] || {};
            current = current[parts[i]];
          }
          /** @type {string} */
          name = parts.pop();
          if (arguments.length === 1) {
            return current[name] === undefined ? null : current[name];
          }
          /** @type {!Object} */
          current[name] = value;
        } else {
          if (arguments.length === 1) {
            return this.options[name] === undefined ? null : this.options[name];
          }
          /** @type {!Object} */
          options[name] = value;
        }
      }
      this._setOptions(options);
      return this;
    },
    _setOptions : function(options) {
      var key;
      for (key in options) {
        this._setOption(key, options[key]);
      }
      return this;
    },
    _setOption : function(key, value) {
      if (key === "classes") {
        this._setOptionClasses(value);
      }
      /** @type {!Object} */
      this.options[key] = value;
      if (key === "disabled") {
        this._setOptionDisabled(value);
      }
      return this;
    },
    _setOptionClasses : function(value) {
      var classKey;
      var elements;
      var currentElements;
      for (classKey in value) {
        currentElements = this.classesElementLookup[classKey];
        if (value[classKey] === this.options.classes[classKey] || !currentElements || !currentElements.length) {
          continue;
        }
        elements = $(currentElements.get());
        this._removeClass(currentElements, classKey);
        elements.addClass(this._classes({
          element : elements,
          keys : classKey,
          classes : value,
          add : true
        }));
      }
    },
    _setOptionDisabled : function(value) {
      this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, !!value);
      if (value) {
        this._removeClass(this.hoverable, null, "ui-state-hover");
        this._removeClass(this.focusable, null, "ui-state-focus");
      }
    },
    enable : function() {
      return this._setOptions({
        disabled : false
      });
    },
    disable : function() {
      return this._setOptions({
        disabled : true
      });
    },
    _classes : function(options) {
      /**
       * @param {!Array} classes
       * @param {boolean} checkOption
       * @return {undefined}
       */
      function processClassString(classes, checkOption) {
        var a;
        var i;
        /** @type {number} */
        i = 0;
        for (; i < classes.length; i++) {
          a = that.classesElementLookup[classes[i]] || $();
          if (options.add) {
            a = $($.unique(a.get().concat(options.element.get())));
          } else {
            a = $(a.not(options.element).get());
          }
          that.classesElementLookup[classes[i]] = a;
          remainingClasses.push(classes[i]);
          if (checkOption && options.classes[classes[i]]) {
            remainingClasses.push(options.classes[classes[i]]);
          }
        }
      }
      /** @type {!Array} */
      var remainingClasses = [];
      var that = this;
      options = $.extend({
        element : this.element,
        classes : this.options.classes || {}
      }, options);
      if (options.keys) {
        processClassString(options.keys.match(/\S+/g) || [], true);
      }
      if (options.extra) {
        processClassString(options.extra.match(/\S+/g) || []);
      }
      return remainingClasses.join(" ");
    },
    _removeClass : function(name, value, extra) {
      return this._toggleClass(name, value, extra, false);
    },
    _addClass : function(name, value, extra) {
      return this._toggleClass(name, value, extra, true);
    },
    _toggleClass : function(element, keys, extra, add) {
      add = typeof add === "boolean" ? add : extra;
      /** @type {boolean} */
      var shift = typeof element === "string" || element === null;
      var options = {
        extra : shift ? keys : extra,
        keys : shift ? element : keys,
        element : shift ? this.element : element,
        add : add
      };
      options.element.toggleClass(this._classes(options), add);
      return this;
    },
    _on : function(type, element, fn) {
      var delegateElement;
      var instance = this;
      if (typeof type !== "boolean") {
        fn = element;
        /** @type {string} */
        element = type;
        /** @type {boolean} */
        type = false;
      }
      if (!fn) {
        fn = element;
        element = this.element;
        delegateElement = this.widget();
      } else {
        element = delegateElement = $(element);
        this.bindings = this.bindings.add(element);
      }
      $.each(fn, function(_testModuleName, handler) {
        /**
         * @return {?}
         */
        function handlerProxy() {
          if (!type && (instance.options.disabled === true || $(this).hasClass("ui-state-disabled"))) {
            return;
          }
          return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
        }
        if (typeof handler !== "string") {
          handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++;
        }
        var match = _testModuleName.match(/^([\w:-]*)\s*(.*)$/);
        var eventName = match[1] + instance.eventNamespace;
        var selector = match[2];
        if (selector) {
          delegateElement.on(eventName, selector, handlerProxy);
        } else {
          element.on(eventName, handlerProxy);
        }
      });
    },
    _off : function(t, eventName) {
      eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace;
      t.off(eventName).off(eventName);
      this.bindings = $(this.bindings.not(t).get());
      this.focusable = $(this.focusable.not(t).get());
      this.hoverable = $(this.hoverable.not(t).get());
    },
    _delay : function(handler, delay) {
      /**
       * @return {?}
       */
      function handlerProxy() {
        return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
      }
      var instance = this;
      return setTimeout(handlerProxy, delay || 0);
    },
    _hoverable : function(t) {
      this.hoverable = this.hoverable.add(t);
      this._on(t, {
        mouseenter : function(type) {
          this._addClass($(type.currentTarget), null, "ui-state-hover");
        },
        mouseleave : function(type) {
          this._removeClass($(type.currentTarget), null, "ui-state-hover");
        }
      });
    },
    _focusable : function(t) {
      this.focusable = this.focusable.add(t);
      this._on(t, {
        focusin : function(event) {
          this._addClass($(event.currentTarget), null, "ui-state-focus");
        },
        focusout : function(event) {
          this._removeClass($(event.currentTarget), null, "ui-state-focus");
        }
      });
    },
    _trigger : function(type, event, data) {
      var prop;
      var orig;
      var callback = this.options[type];
      data = data || {};
      event = $.Event(event);
      event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();
      event.target = this.element[0];
      orig = event.originalEvent;
      if (orig) {
        for (prop in orig) {
          if (!(prop in event)) {
            event[prop] = orig[prop];
          }
        }
      }
      this.element.trigger(event, data);
      return !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented());
    }
  };
  $.each({
    show : "fadeIn",
    hide : "fadeOut"
  }, function(method, defaultEffect) {
    /**
     * @param {!Object} element
     * @param {!Object} options
     * @param {!Function} callback
     * @return {undefined}
     */
    $.Widget.prototype["_" + method] = function(element, options, callback) {
      if (typeof options === "string") {
        options = {
          effect : options
        };
      }
      var hasOptions;
      var effectName = !options ? method : options === true || typeof options === "number" ? defaultEffect : options.effect || defaultEffect;
      options = options || {};
      if (typeof options === "number") {
        options = {
          duration : options
        };
      }
      /** @type {boolean} */
      hasOptions = !$.isEmptyObject(options);
      /** @type {!Function} */
      options.complete = callback;
      if (options.delay) {
        element.delay(options.delay);
      }
      if (hasOptions && $.effects && $.effects.effect[effectName]) {
        element[method](options);
      } else {
        if (effectName !== method && element[effectName]) {
          element[effectName](options.duration, options.easing, callback);
        } else {
          element.queue(function(saveNotifs) {
            $(this)[method]();
            if (callback) {
              callback.call(element[0]);
            }
            saveNotifs();
          });
        }
      }
    };
  });
  return $.widget;
});
(function(factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else {
    if (typeof exports === "object") {
      module.exports = factory(require("jquery"));
    } else {
      factory(jQuery);
    }
  }
})(function($) {
  /**
   * @param {string} value
   * @return {?}
   */
  function encode(value) {
    return config.raw ? value : encodeURIComponent(value);
  }
  /**
   * @param {string} s
   * @return {?}
   */
  function decode(s) {
    return config.raw ? s : decodeURIComponent(s);
  }
  /**
   * @param {!Array} value
   * @return {?}
   */
  function stringifyCookieValue(value) {
    return encode(config.json ? JSON.stringify(value) : String(value));
  }
  /**
   * @param {string} s
   * @return {?}
   */
  function parseCookieValue(s) {
    if (s.indexOf('"') === 0) {
      s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, "\\");
    }
    try {
      /** @type {string} */
      s = decodeURIComponent(s.replace(pattern, " "));
      return config.json ? JSON.parse(s) : s;
    } catch (i) {
    }
  }
  /**
   * @param {string} s
   * @param {!Array} value
   * @return {?}
   */
  function read(s, value) {
    var defaultValue = config.raw ? s : parseCookieValue(s);
    return $.isFunction(value) ? value(defaultValue) : defaultValue;
  }
  /** @type {!RegExp} */
  var pattern = /\+/g;
  /** @type {function(string, ?, !Object): ?} */
  var config = $.cookie = function(value, path, options) {
    if (arguments.length > 1 && !$.isFunction(path)) {
      options = $.extend({}, config.defaults, options);
      if (typeof options.expires === "number") {
        /** @type {number} */
        var days = options.expires;
        /** @type {!Date} */
        var startViewDate = options.expires = new Date;
        startViewDate.setMilliseconds(startViewDate.getMilliseconds() + days * 864e+5);
      }
      return document.cookie = [encode(value), "=", stringifyCookieValue(path), options.expires ? "; expires=" + options.expires.toUTCString() : "", options.path ? "; path=" + options.path : "", options.domain ? "; domain=" + options.domain : "", options.secure ? "; secure" : ""].join("");
    }
    /** @type {(undefined|{})} */
    var result = value ? undefined : {};
    /** @type {!Array} */
    var m = document.cookie ? document.cookie.split("; ") : [];
    /** @type {number} */
    var j = 0;
    /** @type {number} */
    var c = m.length;
    for (; j < c; j++) {
      var headersAndBody = m[j].split("=");
      var name = decode(headersAndBody.shift());
      var cookie = headersAndBody.join("=");
      if (value === name) {
        result = read(cookie, path);
        break;
      }
      if (!value && (cookie = read(cookie)) !== undefined) {
        result[name] = cookie;
      }
    }
    return result;
  };
  config.defaults = {};
  /**
   * @param {string} name
   * @param {?} options
   * @return {?}
   */
  $.removeCookie = function(name, options) {
    $.cookie(name, "", $.extend({}, options, {
      expires : -1
    }));
    return !$.cookie(name);
  };
});
(function(factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery", "jquery.ui.widget"], factory);
  } else {
    factory(window.jQuery);
  }
})(function($) {
  /** @type {boolean} */
  $.support.fileInput = !((new RegExp("(Android (1\\.[0156]|2\\.[01]))|(Windows Phone (OS 7|8\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)|(w(eb)?OSBrowser)|(webOS)|(Kindle/(1\\.0|2\\.[05]|3\\.0))")).test(window.navigator.userAgent) || $('<input type="file">').prop("disabled"));
  /** @type {boolean} */
  $.support.xhrFileUpload = !!(window.ProgressEvent && window.FileReader);
  /** @type {boolean} */
  $.support.xhrFormDataFileUpload = !!window.FormData;
  $.support.blobSlice = window.Blob && (Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice);
  $.widget("blueimp.fileupload", {
    options : {
      dropZone : $(document),
      pasteZone : $(document),
      fileInput : undefined,
      replaceFileInput : true,
      paramName : undefined,
      singleFileUploads : true,
      limitMultiFileUploads : undefined,
      limitMultiFileUploadSize : undefined,
      limitMultiFileUploadSizeOverhead : 512,
      sequentialUploads : false,
      limitConcurrentUploads : undefined,
      forceIframeTransport : false,
      redirect : undefined,
      redirectParamName : undefined,
      postMessage : undefined,
      multipart : true,
      maxChunkSize : undefined,
      uploadedBytes : undefined,
      recalculateProgress : true,
      progressInterval : 100,
      bitrateInterval : 500,
      autoUpload : true,
      messages : {
        uploadedBytes : "Uploaded bytes exceed file size"
      },
      i18n : function(message, args) {
        message = this.messages[message] || message.toString();
        if (args) {
          $.each(args, function(canCreateDiscussions, value) {
            message = message.replace("{" + canCreateDiscussions + "}", value);
          });
        }
        return message;
      },
      formData : function(type) {
        return type.serializeArray();
      },
      add : function(type, name) {
        if (type.isDefaultPrevented()) {
          return false;
        }
        if (name.autoUpload || name.autoUpload !== false && $(this).fileupload("option", "autoUpload")) {
          name.process().done(function() {
            name.submit();
          });
        }
      },
      processData : false,
      contentType : false,
      cache : false
    },
    _specialOptions : ["fileInput", "dropZone", "pasteZone", "multipart", "forceIframeTransport"],
    _blobSlice : $.support.blobSlice && function() {
      var slice = this.slice || this.webkitSlice || this.mozSlice;
      return slice.apply(this, arguments);
    },
    _BitrateTimer : function() {
      /** @type {number} */
      this.timestamp = Date.now ? Date.now() : (new Date).getTime();
      /** @type {number} */
      this.loaded = 0;
      /** @type {number} */
      this.bitrate = 0;
      /**
       * @param {number} now
       * @param {number} loaded
       * @param {number} interval
       * @return {?}
       */
      this.getBitrate = function(now, loaded, interval) {
        /** @type {number} */
        var timeDiff = now - this.timestamp;
        if (!this.bitrate || !interval || timeDiff > interval) {
          /** @type {number} */
          this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;
          /** @type {number} */
          this.loaded = loaded;
          /** @type {number} */
          this.timestamp = now;
        }
        return this.bitrate;
      };
    },
    _isXHRUpload : function(options) {
      return !options.forceIframeTransport && (!options.multipart && $.support.xhrFileUpload || $.support.xhrFormDataFileUpload);
    },
    _getFormData : function(options) {
      var formData;
      if ($.type(options.formData) === "function") {
        return options.formData(options.form);
      }
      if ($.isArray(options.formData)) {
        return options.formData;
      }
      if ($.type(options.formData) === "object") {
        /** @type {!Array} */
        formData = [];
        $.each(options.formData, function(newPrinter, command_module_id) {
          formData.push({
            name : newPrinter,
            value : command_module_id
          });
        });
        return formData;
      }
      return [];
    },
    _getTotal : function(files) {
      /** @type {number} */
      var total = 0;
      $.each(files, function(canCreateDiscussions, fileOne) {
        total = total + (fileOne.size || 1);
      });
      return total;
    },
    _initProgressObject : function(obj) {
      var progress = {
        loaded : 0,
        total : 0,
        bitrate : 0
      };
      if (obj._progress) {
        $.extend(obj._progress, progress);
      } else {
        obj._progress = progress;
      }
    },
    _initResponseObject : function(obj) {
      var prop;
      if (obj._response) {
        for (prop in obj._response) {
          if (obj._response.hasOwnProperty(prop)) {
            delete obj._response[prop];
          }
        }
      } else {
        obj._response = {};
      }
    },
    _onProgress : function(e, data) {
      if (e.lengthComputable) {
        /** @type {number} */
        var now = Date.now ? Date.now() : (new Date).getTime();
        var loaded;
        if (data._time && data.progressInterval && now - data._time < data.progressInterval && e.loaded !== e.total) {
          return;
        }
        /** @type {number} */
        data._time = now;
        loaded = Math.floor(e.loaded / e.total * (data.chunkSize || data._progress.total)) + (data.uploadedBytes || 0);
        this._progress.loaded += loaded - data._progress.loaded;
        this._progress.bitrate = this._bitrateTimer.getBitrate(now, this._progress.loaded, data.bitrateInterval);
        data._progress.loaded = data.loaded = loaded;
        data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(now, loaded, data.bitrateInterval);
        this._trigger("progress", $.Event("progress", {
          delegatedEvent : e
        }), data);
        this._trigger("progressall", $.Event("progressall", {
          delegatedEvent : e
        }), this._progress);
      }
    },
    _initProgressListener : function(options) {
      var that = this;
      var xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();
      if (xhr.upload) {
        $(xhr.upload).bind("progress", function(e) {
          var oe = e.originalEvent;
          e.lengthComputable = oe.lengthComputable;
          e.loaded = oe.loaded;
          e.total = oe.total;
          that._onProgress(e, options);
        });
        /**
         * @return {?}
         */
        options.xhr = function() {
          return xhr;
        };
      }
    },
    _isInstanceOf : function(type, obj) {
      return Object.prototype.toString.call(obj) === "[object " + type + "]";
    },
    _initXHRData : function(options) {
      var that = this;
      var formData;
      var file = options.files[0];
      var multipart = options.multipart || !$.support.xhrFileUpload;
      var paramName = $.type(options.paramName) === "array" ? options.paramName[0] : options.paramName;
      options.headers = $.extend({}, options.headers);
      if (options.contentRange) {
        options.headers["Content-Range"] = options.contentRange;
      }
      if (!multipart || options.blob || !this._isInstanceOf("File", file)) {
        /** @type {string} */
        options.headers["Content-Disposition"] = 'attachment; filename="' + encodeURI(file.name) + '"';
      }
      if (!multipart) {
        options.contentType = file.type || "application/octet-stream";
        options.data = options.blob || file;
      } else {
        if ($.support.xhrFormDataFileUpload) {
          if (options.postMessage) {
            formData = this._getFormData(options);
            if (options.blob) {
              formData.push({
                name : paramName,
                value : options.blob
              });
            } else {
              $.each(options.files, function(index, command_module_id) {
                formData.push({
                  name : $.type(options.paramName) === "array" && options.paramName[index] || paramName,
                  value : command_module_id
                });
              });
            }
          } else {
            if (that._isInstanceOf("FormData", options.formData)) {
              formData = options.formData;
            } else {
              /** @type {!FormData} */
              formData = new FormData;
              $.each(this._getFormData(options), function(canCreateDiscussions, options) {
                formData.append(options.name, options.value);
              });
            }
            if (options.blob) {
              formData.append(paramName, options.blob, file.name);
            } else {
              $.each(options.files, function(index, file) {
                if (that._isInstanceOf("File", file) || that._isInstanceOf("Blob", file)) {
                  formData.append($.type(options.paramName) === "array" && options.paramName[index] || paramName, file, file.uploadName || file.name);
                }
              });
            }
          }
          options.data = formData;
        }
      }
      /** @type {null} */
      options.blob = null;
    },
    _initIframeSettings : function(options) {
      var targetHost = $("<a></a>").prop("href", options.url).prop("host");
      /** @type {string} */
      options.dataType = "iframe " + (options.dataType || "");
      options.formData = this._getFormData(options);
      if (options.redirect && targetHost && targetHost !== location.host) {
        options.formData.push({
          name : options.redirectParamName || "redirect",
          value : options.redirect
        });
      }
    },
    _initDataSettings : function(options) {
      if (this._isXHRUpload(options)) {
        if (!this._chunkedUpload(options, true)) {
          if (!options.data) {
            this._initXHRData(options);
          }
          this._initProgressListener(options);
        }
        if (options.postMessage) {
          /** @type {string} */
          options.dataType = "postmessage " + (options.dataType || "");
        }
      } else {
        this._initIframeSettings(options);
      }
    },
    _getParamName : function(options) {
      var n = $(options.fileInput);
      var paramName = options.paramName;
      if (!paramName) {
        /** @type {!Array} */
        paramName = [];
        n.each(function() {
          var t = $(this);
          var i = t.prop("name") || "files[]";
          var iv_size = (t.prop("files") || [1]).length;
          for (; iv_size;) {
            paramName.push(i);
            /** @type {number} */
            iv_size = iv_size - 1;
          }
        });
        if (!paramName.length) {
          /** @type {!Array} */
          paramName = [n.prop("name") || "files[]"];
        }
      } else {
        if (!$.isArray(paramName)) {
          /** @type {!Array} */
          paramName = [paramName];
        }
      }
      return paramName;
    },
    _initFormSettings : function(options) {
      if (!options.form || !options.form.length) {
        options.form = $(options.fileInput.prop("form"));
        if (!options.form.length) {
          options.form = $(this.options.fileInput.prop("form"));
        }
      }
      options.paramName = this._getParamName(options);
      if (!options.url) {
        options.url = options.form.prop("action") || location.href;
      }
      options.type = (options.type || $.type(options.form.prop("method")) === "string" && options.form.prop("method") || "").toUpperCase();
      if (options.type !== "POST" && options.type !== "PUT" && options.type !== "PATCH") {
        /** @type {string} */
        options.type = "POST";
      }
      if (!options.formAcceptCharset) {
        options.formAcceptCharset = options.form.attr("accept-charset");
      }
    },
    _getAJAXSettings : function(data) {
      var options = $.extend({}, this.options, data);
      this._initFormSettings(options);
      this._initDataSettings(options);
      return options;
    },
    _getDeferredState : function(deferred) {
      if (deferred.state) {
        return deferred.state();
      }
      if (deferred.isResolved()) {
        return "resolved";
      }
      if (deferred.isRejected()) {
        return "rejected";
      }
      return "pending";
    },
    _enhancePromise : function(promise) {
      promise.success = promise.done;
      promise.error = promise.fail;
      promise.complete = promise.always;
      return promise;
    },
    _getXHRPromise : function(resolveOrReject, context, args) {
      var dfd = $.Deferred();
      var promise = dfd.promise();
      context = context || this.options.context || promise;
      if (resolveOrReject === true) {
        dfd.resolveWith(context, args);
      } else {
        if (resolveOrReject === false) {
          dfd.rejectWith(context, args);
        }
      }
      promise.abort = dfd.promise;
      return this._enhancePromise(promise);
    },
    _addConvenienceMethods : function(e, data) {
      var that = this;
      /**
       * @param {!Array} args
       * @return {?}
       */
      var getPromise = function(args) {
        return $.Deferred().resolveWith(that, args).promise();
      };
      /**
       * @param {number} resolveFunc
       * @param {boolean} rejectFunc
       * @return {?}
       */
      data.process = function(resolveFunc, rejectFunc) {
        if (resolveFunc || rejectFunc) {
          data._processQueue = this._processQueue = (this._processQueue || getPromise([this])).pipe(function() {
            if (data.errorThrown) {
              return $.Deferred().rejectWith(that, [data]).promise();
            }
            return getPromise(arguments);
          }).pipe(resolveFunc, rejectFunc);
        }
        return this._processQueue || getPromise([this]);
      };
      /**
       * @return {?}
       */
      data.submit = function() {
        if (this.state() !== "pending") {
          data.jqXHR = this.jqXHR = that._trigger("submit", $.Event("submit", {
            delegatedEvent : e
          }), this) !== false && that._onSend(e, this);
        }
        return this.jqXHR || that._getXHRPromise();
      };
      /**
       * @return {?}
       */
      data.abort = function() {
        if (this.jqXHR) {
          return this.jqXHR.abort();
        }
        /** @type {string} */
        this.errorThrown = "abort";
        that._trigger("fail", null, this);
        return that._getXHRPromise(false);
      };
      /**
       * @return {?}
       */
      data.state = function() {
        if (this.jqXHR) {
          return that._getDeferredState(this.jqXHR);
        }
        if (this._processQueue) {
          return that._getDeferredState(this._processQueue);
        }
      };
      /**
       * @return {?}
       */
      data.processing = function() {
        return !this.jqXHR && this._processQueue && that._getDeferredState(this._processQueue) === "pending";
      };
      /**
       * @return {?}
       */
      data.progress = function() {
        return this._progress;
      };
      /**
       * @return {?}
       */
      data.response = function() {
        return this._response;
      };
    },
    _getUploadedBytes : function(jqXHR) {
      var range = jqXHR.getResponseHeader("Range");
      var parts = range && range.split("-");
      var n = parts && parts.length > 1 && parseInt(parts[1], 10);
      return n && n + 1;
    },
    _chunkedUpload : function(options, testOnly) {
      options.uploadedBytes = options.uploadedBytes || 0;
      var that = this;
      var file = options.files[0];
      var fs = file.size;
      var ub = options.uploadedBytes;
      var mcs = options.maxChunkSize || fs;
      var slice = this._blobSlice;
      var dfd = $.Deferred();
      var promise = dfd.promise();
      var ioRequest;
      var upload;
      if (!(this._isXHRUpload(options) && slice && (ub || mcs < fs)) || options.data) {
        return false;
      }
      if (testOnly) {
        return true;
      }
      if (ub >= fs) {
        file.error = options.i18n("uploadedBytes");
        return this._getXHRPromise(false, options.context, [null, "error", file.error]);
      }
      /**
       * @return {undefined}
       */
      upload = function() {
        var o = $.extend({}, options);
        var currentLoaded = o._progress.loaded;
        o.blob = slice.call(file, ub, ub + mcs, file.type);
        o.chunkSize = o.blob.size;
        /** @type {string} */
        o.contentRange = "bytes " + ub + "-" + (ub + o.chunkSize - 1) + "/" + fs;
        that._initXHRData(o);
        that._initProgressListener(o);
        ioRequest = (that._trigger("chunksend", null, o) !== false && $.ajax(o) || that._getXHRPromise(false, o.context)).done(function(result, textStatus, jqXHR) {
          ub = that._getUploadedBytes(jqXHR) || ub + o.chunkSize;
          if (currentLoaded + o.chunkSize - o._progress.loaded) {
            that._onProgress($.Event("progress", {
              lengthComputable : true,
              loaded : ub - o.uploadedBytes,
              total : ub - o.uploadedBytes
            }), o);
          }
          options.uploadedBytes = o.uploadedBytes = ub;
          /** @type {!Object} */
          o.result = result;
          o.textStatus = textStatus;
          /** @type {!Object} */
          o.jqXHR = jqXHR;
          that._trigger("chunkdone", null, o);
          that._trigger("chunkalways", null, o);
          if (ub < fs) {
            upload();
          } else {
            dfd.resolveWith(o.context, [result, textStatus, jqXHR]);
          }
        }).fail(function(jqXHR, textStatus, errorThrown) {
          /** @type {!Array} */
          o.jqXHR = jqXHR;
          o.textStatus = textStatus;
          /** @type {string} */
          o.errorThrown = errorThrown;
          that._trigger("chunkfail", null, o);
          that._trigger("chunkalways", null, o);
          dfd.rejectWith(o.context, [jqXHR, textStatus, errorThrown]);
        });
      };
      this._enhancePromise(promise);
      /**
       * @return {?}
       */
      promise.abort = function() {
        return ioRequest.abort();
      };
      upload();
      return promise;
    },
    _beforeSend : function(e, data) {
      if (this._active === 0) {
        this._trigger("start");
        this._bitrateTimer = new this._BitrateTimer;
        /** @type {number} */
        this._progress.loaded = this._progress.total = 0;
        /** @type {number} */
        this._progress.bitrate = 0;
      }
      this._initResponseObject(data);
      this._initProgressObject(data);
      data._progress.loaded = data.loaded = data.uploadedBytes || 0;
      data._progress.total = data.total = this._getTotal(data.files) || 1;
      /** @type {number} */
      data._progress.bitrate = data.bitrate = 0;
      this._active += 1;
      this._progress.loaded += data.loaded;
      this._progress.total += data.total;
    },
    _onDone : function(result, textStatus, jqXHR, options) {
      var total = options._progress.total;
      var response = options._response;
      if (options._progress.loaded < total) {
        this._onProgress($.Event("progress", {
          lengthComputable : true,
          loaded : total,
          total : total
        }), options);
      }
      response.result = options.result = result;
      response.textStatus = options.textStatus = textStatus;
      response.jqXHR = options.jqXHR = jqXHR;
      this._trigger("done", null, options);
    },
    _onFail : function(jqXHR, textStatus, errorThrown, options) {
      var response = options._response;
      if (options.recalculateProgress) {
        this._progress.loaded -= options._progress.loaded;
        this._progress.total -= options._progress.total;
      }
      response.jqXHR = options.jqXHR = jqXHR;
      response.textStatus = options.textStatus = textStatus;
      response.errorThrown = options.errorThrown = errorThrown;
      this._trigger("fail", null, options);
    },
    _onAlways : function(jqXHRorResult, textStatus, jqXHRorError, options) {
      this._trigger("always", null, options);
    },
    _onSend : function(e, data) {
      if (!data.submit) {
        this._addConvenienceMethods(e, data);
      }
      var that = this;
      var jqXHR;
      var aborted;
      var slot;
      var pipe;
      var options = that._getAJAXSettings(data);
      /**
       * @return {?}
       */
      var send = function() {
        that._sending += 1;
        options._bitrateTimer = new that._BitrateTimer;
        jqXHR = jqXHR || ((aborted || that._trigger("send", $.Event("send", {
          delegatedEvent : e
        }), options) === false) && that._getXHRPromise(false, options.context, aborted) || that._chunkedUpload(options) || $.ajax(options)).done(function(result, textStatus, jqXHR) {
          that._onDone(result, textStatus, jqXHR, options);
        }).fail(function(jqXHR, textStatus, errorThrown) {
          that._onFail(jqXHR, textStatus, errorThrown, options);
        }).always(function(jqXHRorResult, textStatus, jqXHRorError) {
          that._onAlways(jqXHRorResult, textStatus, jqXHRorError, options);
          that._sending -= 1;
          that._active -= 1;
          if (options.limitConcurrentUploads && options.limitConcurrentUploads > that._sending) {
            var nextSlot = that._slots.shift();
            for (; nextSlot;) {
              if (that._getDeferredState(nextSlot) === "pending") {
                nextSlot.resolve();
                break;
              }
              nextSlot = that._slots.shift();
            }
          }
          if (that._active === 0) {
            that._trigger("stop");
          }
        });
        return jqXHR;
      };
      this._beforeSend(e, options);
      if (this.options.sequentialUploads || this.options.limitConcurrentUploads && this.options.limitConcurrentUploads <= this._sending) {
        if (this.options.limitConcurrentUploads > 1) {
          slot = $.Deferred();
          this._slots.push(slot);
          pipe = slot.pipe(send);
        } else {
          this._sequence = this._sequence.pipe(send, send);
          pipe = this._sequence;
        }
        /**
         * @return {?}
         */
        pipe.abort = function() {
          /** @type {!Array} */
          aborted = [undefined, "abort", "abort"];
          if (!jqXHR) {
            if (slot) {
              slot.rejectWith(options.context, aborted);
            }
            return send();
          }
          return jqXHR.abort();
        };
        return this._enhancePromise(pipe);
      }
      return send();
    },
    _onAdd : function(e, data) {
      var that = this;
      /** @type {boolean} */
      var result = true;
      var options = $.extend({}, this.options, data);
      var files = data.files;
      var filesLength = files.length;
      var limit = options.limitMultiFileUploads;
      var limitSize = options.limitMultiFileUploadSize;
      var overhead = options.limitMultiFileUploadSizeOverhead;
      /** @type {number} */
      var batchSize = 0;
      var paramName = this._getParamName(options);
      var paramNameSet;
      var paramNameSlice;
      var fileSet;
      var i;
      /** @type {number} */
      var j = 0;
      if (limitSize && (!filesLength || files[0].size === undefined)) {
        limitSize = undefined;
      }
      if (!(options.singleFileUploads || limit || limitSize) || !this._isXHRUpload(options)) {
        /** @type {!Array} */
        fileSet = [files];
        /** @type {!Array} */
        paramNameSet = [paramName];
      } else {
        if (!(options.singleFileUploads || limitSize) && limit) {
          /** @type {!Array} */
          fileSet = [];
          /** @type {!Array} */
          paramNameSet = [];
          /** @type {number} */
          i = 0;
          for (; i < filesLength; i = i + limit) {
            fileSet.push(files.slice(i, i + limit));
            paramNameSlice = paramName.slice(i, i + limit);
            if (!paramNameSlice.length) {
              paramNameSlice = paramName;
            }
            paramNameSet.push(paramNameSlice);
          }
        } else {
          if (!options.singleFileUploads && limitSize) {
            /** @type {!Array} */
            fileSet = [];
            /** @type {!Array} */
            paramNameSet = [];
            /** @type {number} */
            i = 0;
            for (; i < filesLength; i = i + 1) {
              batchSize = batchSize + (files[i].size + overhead);
              if (i + 1 === filesLength || batchSize + files[i + 1].size + overhead > limitSize || limit && i + 1 - j >= limit) {
                fileSet.push(files.slice(j, i + 1));
                paramNameSlice = paramName.slice(j, i + 1);
                if (!paramNameSlice.length) {
                  paramNameSlice = paramName;
                }
                paramNameSet.push(paramNameSlice);
                /** @type {number} */
                j = i + 1;
                /** @type {number} */
                batchSize = 0;
              }
            }
          } else {
            paramNameSet = paramName;
          }
        }
      }
      data.originalFiles = files;
      $.each(fileSet || files, function(index, element) {
        var newData = $.extend({}, data);
        newData.files = fileSet ? element : [element];
        newData.paramName = paramNameSet[index];
        that._initResponseObject(newData);
        that._initProgressObject(newData);
        that._addConvenienceMethods(e, newData);
        result = that._trigger("add", $.Event("add", {
          delegatedEvent : e
        }), newData);
        return result;
      });
      return result;
    },
    _replaceFileInput : function(input) {
      var element = input.clone(true);
      $("<form></form>").append(element)[0].reset();
      input.after(element).detach();
      $.cleanData(input.unbind("remove"));
      this.options.fileInput = this.options.fileInput.map(function(canCreateDiscussions, el) {
        if (el === input[0]) {
          return element[0];
        }
        return el;
      });
      if (input[0] === this.element[0]) {
        this.element = element;
      }
    },
    _handleFileTreeEntry : function(entry, path) {
      var that = this;
      var dfd = $.Deferred();
      /**
       * @param {!Object} e
       * @return {undefined}
       */
      var callback = function(e) {
        if (e && !e.entry) {
          /** @type {!Object} */
          e.entry = entry;
        }
        dfd.resolve([e]);
      };
      var rootReader;
      path = path || "";
      if (entry.isFile) {
        if (entry._file) {
          /** @type {string} */
          entry._file.relativePath = path;
          dfd.resolve(entry._file);
        } else {
          entry.file(function(module) {
            module.relativePath = path;
            dfd.resolve(module);
          }, callback);
        }
      } else {
        if (entry.isDirectory) {
          rootReader = entry.createReader();
          rootReader.readEntries(function(entries) {
            that._handleFileTreeEntries(entries, path + entry.name + "/").done(function(viewOrUrlOrId) {
              dfd.resolve(viewOrUrlOrId);
            }).fail(callback);
          }, callback);
        } else {
          dfd.resolve([]);
        }
      }
      return dfd.promise();
    },
    _handleFileTreeEntries : function(entries, path) {
      var that = this;
      return $.when.apply($, $.map(entries, function(entry) {
        return that._handleFileTreeEntry(entry, path);
      })).pipe(function() {
        return Array.prototype.concat.apply([], arguments);
      });
    },
    _getDroppedFiles : function(dataTransfer) {
      dataTransfer = dataTransfer || {};
      var items = dataTransfer.items;
      if (items && items.length && (items[0].webkitGetAsEntry || items[0].getAsEntry)) {
        return this._handleFileTreeEntries($.map(items, function(item) {
          var entry;
          if (item.webkitGetAsEntry) {
            entry = item.webkitGetAsEntry();
            if (entry) {
              entry._file = item.getAsFile();
            }
            return entry;
          }
          return item.getAsEntry();
        }));
      }
      return $.Deferred().resolve($.makeArray(dataTransfer.files)).promise();
    },
    _getSingleFileInputFiles : function(fileInput) {
      fileInput = $(fileInput);
      var entries = fileInput.prop("webkitEntries") || fileInput.prop("entries");
      var files;
      var SAMLResponse;
      if (entries && entries.length) {
        return this._handleFileTreeEntries(entries);
      }
      files = $.makeArray(fileInput.prop("files"));
      if (!files.length) {
        SAMLResponse = fileInput.prop("value");
        if (!SAMLResponse) {
          return $.Deferred().resolve([]).promise();
        }
        /** @type {!Array} */
        files = [{
          name : SAMLResponse.replace(/^.*\\/, "")
        }];
      } else {
        if (files[0].name === undefined && files[0].fileName) {
          $.each(files, function(canCreateDiscussions, file) {
            file.name = file.fileName;
            file.size = file.fileSize;
          });
        }
      }
      return $.Deferred().resolve(files).promise();
    },
    _getFileInputFiles : function(fileInput) {
      if (!(fileInput instanceof $) || fileInput.length === 1) {
        return this._getSingleFileInputFiles(fileInput);
      }
      return $.when.apply($, $.map(fileInput, this._getSingleFileInputFiles)).pipe(function() {
        return Array.prototype.concat.apply([], arguments);
      });
    },
    _onChange : function(e) {
      var that = this;
      var data = {
        fileInput : $(e.target),
        form : $(e.target.form)
      };
      this._getFileInputFiles(data.fileInput).always(function(results) {
        /** @type {!Object} */
        data.files = results;
        if (that.options.replaceFileInput) {
          that._replaceFileInput(data.fileInput);
        }
        if (that._trigger("change", $.Event("change", {
          delegatedEvent : e
        }), data) !== false) {
          that._onAdd(e, data);
        }
      });
    },
    _onPaste : function(e) {
      var invalid = e.originalEvent && e.originalEvent.clipboardData && e.originalEvent.clipboardData.items;
      var data = {
        files : []
      };
      if (invalid && invalid.length) {
        $.each(invalid, function(canCreateDiscussions, item) {
          var falseySection = item.getAsFile && item.getAsFile();
          if (falseySection) {
            data.files.push(falseySection);
          }
        });
        if (this._trigger("paste", $.Event("paste", {
          delegatedEvent : e
        }), data) !== false) {
          this._onAdd(e, data);
        }
      }
    },
    _onDrop : function(e) {
      e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;
      var that = this;
      var dataTransfer = e.dataTransfer;
      var data = {};
      if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {
        e.preventDefault();
        this._getDroppedFiles(dataTransfer).always(function(results) {
          /** @type {!Object} */
          data.files = results;
          if (that._trigger("drop", $.Event("drop", {
            delegatedEvent : e
          }), data) !== false) {
            that._onAdd(e, data);
          }
        });
      }
    },
    _onDragOver : function(e) {
      e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;
      var dataTransfer = e.dataTransfer;
      if (dataTransfer && $.inArray("Files", dataTransfer.types) !== -1 && this._trigger("dragover", $.Event("dragover", {
        delegatedEvent : e
      })) !== false) {
        e.preventDefault();
        /** @type {string} */
        dataTransfer.dropEffect = "copy";
      }
    },
    _initEventHandlers : function() {
      if (this._isXHRUpload(this.options)) {
        this._on(this.options.dropZone, {
          dragover : this._onDragOver,
          drop : this._onDrop
        });
        this._on(this.options.pasteZone, {
          paste : this._onPaste
        });
      }
      if ($.support.fileInput) {
        this._on(this.options.fileInput, {
          change : this._onChange
        });
      }
    },
    _destroyEventHandlers : function() {
      this._off(this.options.dropZone, "dragover drop");
      this._off(this.options.pasteZone, "paste");
      this._off(this.options.fileInput, "change");
    },
    _setOption : function(key, value) {
      /** @type {boolean} */
      var n = $.inArray(key, this._specialOptions) !== -1;
      if (n) {
        this._destroyEventHandlers();
      }
      this._super(key, value);
      if (n) {
        this._initSpecialOptions();
        this._initEventHandlers();
      }
    },
    _initSpecialOptions : function() {
      var options = this.options;
      if (options.fileInput === undefined) {
        options.fileInput = this.element.is('input[type="file"]') ? this.element : this.element.find('input[type="file"]');
      } else {
        if (!(options.fileInput instanceof $)) {
          options.fileInput = $(options.fileInput);
        }
      }
      if (!(options.dropZone instanceof $)) {
        options.dropZone = $(options.dropZone);
      }
      if (!(options.pasteZone instanceof $)) {
        options.pasteZone = $(options.pasteZone);
      }
    },
    _getRegExp : function(str) {
      var t = str.split("/");
      var opt = t.pop();
      t.shift();
      return new RegExp(t.join("/"), opt);
    },
    _isRegExpOption : function(key, value) {
      return key !== "url" && $.type(value) === "string" && /^\/.*\/[igm]{0,3}$/.test(value);
    },
    _initDataAttributes : function() {
      var that = this;
      var options = this.options;
      $.each($(this.element[0].cloneNode(false)).data(), function(key, value) {
        if (that._isRegExpOption(key, value)) {
          value = that._getRegExp(value);
        }
        /** @type {string} */
        options[key] = value;
      });
    },
    _create : function() {
      this._initDataAttributes();
      this._initSpecialOptions();
      /** @type {!Array} */
      this._slots = [];
      this._sequence = this._getXHRPromise(true);
      /** @type {number} */
      this._sending = this._active = 0;
      this._initProgressObject(this);
      this._initEventHandlers();
    },
    active : function() {
      return this._active;
    },
    progress : function() {
      return this._progress;
    },
    add : function(type) {
      var me = this;
      if (!type || this.options.disabled) {
        return;
      }
      if (type.fileInput && !type.files) {
        this._getFileInputFiles(type.fileInput).always(function(result) {
          /** @type {!Object} */
          type.files = result;
          me._onAdd(null, type);
        });
      } else {
        type.files = $.makeArray(type.files);
        this._onAdd(null, type);
      }
    },
    send : function(data) {
      if (data && !this.options.disabled) {
        if (data.fileInput && !data.files) {
          var that = this;
          var dfd = $.Deferred();
          var promise = dfd.promise();
          var ioRequest;
          var s;
          /**
           * @return {?}
           */
          promise.abort = function() {
            /** @type {boolean} */
            s = true;
            if (ioRequest) {
              return ioRequest.abort();
            }
            dfd.reject(null, "abort", "abort");
            return promise;
          };
          this._getFileInputFiles(data.fileInput).always(function(results) {
            if (s) {
              return;
            }
            if (!results.length) {
              dfd.reject();
              return;
            }
            /** @type {!Object} */
            data.files = results;
            ioRequest = that._onSend(null, data).then(function(viewOrUrlOrId, textStatus, jqXHR) {
              dfd.resolve(viewOrUrlOrId, textStatus, jqXHR);
            }, function(value, callback, errorThrown) {
              dfd.reject(value, callback, errorThrown);
            });
          });
          return this._enhancePromise(promise);
        }
        data.files = $.makeArray(data.files);
        if (data.files.length) {
          return this._onSend(null, data);
        }
      }
      return this._getXHRPromise(false, data && data.context);
    }
  });
});
(function(factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else {
    factory(typeof jQuery != "undefined" ? jQuery : window.Zepto);
  }
})(function($) {
  /**
   * @param {!Object} e
   * @return {undefined}
   */
  function handler(e) {
    var options = e.data;
    if (!e.isDefaultPrevented()) {
      e.preventDefault();
      $(e.target).ajaxSubmit(options);
    }
  }
  /**
   * @param {!Event} e
   * @return {undefined}
   */
  function clickHandler(e) {
    var target = e.target;
    var $tar = $(target);
    if (!$tar.is("[type=submit],[type=image]")) {
      var pathsMatches = $tar.closest("[type=submit]");
      if (pathsMatches.length === 0) {
        return;
      }
      target = pathsMatches[0];
    }
    var form = this;
    form.clk = target;
    if (target.type == "image") {
      if (e.offsetX !== undefined) {
        form.clk_x = e.offsetX;
        form.clk_y = e.offsetY;
      } else {
        if (typeof $.fn.offset == "function") {
          var offset = $tar.offset();
          /** @type {number} */
          form.clk_x = e.pageX - offset.left;
          /** @type {number} */
          form.clk_y = e.pageY - offset.top;
        } else {
          /** @type {number} */
          form.clk_x = e.pageX - target.offsetLeft;
          /** @type {number} */
          form.clk_y = e.pageY - target.offsetTop;
        }
      }
    }
    setTimeout(function() {
      /** @type {null} */
      form.clk = form.clk_x = form.clk_y = null;
    }, 100);
  }
  /**
   * @return {undefined}
   */
  function log() {
    if (!$.fn.ajaxSubmit.debug) {
      return;
    }
    /** @type {string} */
    var text = "[jquery.form] " + Array.prototype.join.call(arguments, "");
    if (window.console && window.console.log) {
      window.console.log(text);
    } else {
      if (window.opera && window.opera.postError) {
        window.opera.postError(text);
      }
    }
  }
  var feature = {};
  /** @type {boolean} */
  feature.fileapi = $("<input type='file'/>").get(0).files !== undefined;
  /** @type {boolean} */
  feature.formdata = window.FormData !== undefined;
  /** @type {boolean} */
  var n = !!$.fn.prop;
  /**
   * @return {?}
   */
  $.fn.attr2 = function() {
    if (!n) {
      return this.attr.apply(this, arguments);
    }
    var val = this.prop.apply(this, arguments);
    if (val && val.jquery || typeof val === "string") {
      return val;
    }
    return this.attr.apply(this, arguments);
  };
  /**
   * @param {(Object|string)} options
   * @return {?}
   */
  $.fn.ajaxSubmit = function(options) {
    /**
     * @param {!Object} query
     * @return {?}
     */
    function deepSerialize(query) {
      var splits = $.param(query, options.traditional).split("&");
      var klen = splits.length;
      /** @type {!Array} */
      var result = [];
      var j;
      var parsedQR;
      /** @type {number} */
      j = 0;
      for (; j < klen; j++) {
        splits[j] = splits[j].replace(/\+/g, " ");
        parsedQR = splits[j].split("=");
        result.push([decodeURIComponent(parsedQR[0]), decodeURIComponent(parsedQR[1])]);
      }
      return result;
    }
    /**
     * @param {!NodeList} a
     * @return {?}
     */
    function fileUploadXhr(a) {
      /** @type {!FormData} */
      var formdata = new FormData;
      /** @type {number} */
      var i = 0;
      for (; i < a.length; i++) {
        formdata.append(a[i].name, a[i].value);
      }
      if (options.extraData) {
        var serializedData = deepSerialize(options.extraData);
        /** @type {number} */
        i = 0;
        for (; i < serializedData.length; i++) {
          if (serializedData[i]) {
            formdata.append(serializedData[i][0], serializedData[i][1]);
          }
        }
      }
      /** @type {null} */
      options.data = null;
      var s = $.extend(true, {}, $.ajaxSettings, options, {
        contentType : false,
        processData : false,
        cache : false,
        type : method || "POST"
      });
      if (options.uploadProgress) {
        /**
         * @return {?}
         */
        s.xhr = function() {
          var myXhr = $.ajaxSettings.xhr();
          if (myXhr.upload) {
            myXhr.upload.addEventListener("progress", function(event) {
              /** @type {number} */
              var percent = 0;
              var position = event.loaded || event.position;
              var total = event.total;
              if (event.lengthComputable) {
                /** @type {number} */
                percent = Math.ceil(position / total * 100);
              }
              options.uploadProgress(event, position, total, percent);
            }, false);
          }
          return myXhr;
        };
      }
      /** @type {null} */
      s.data = null;
      /** @type {function(?, !Object): undefined} */
      var beforeSend = s.beforeSend;
      /**
       * @param {?} xhr
       * @param {!Object} o
       * @return {undefined}
       */
      s.beforeSend = function(xhr, o) {
        if (options.formData) {
          o.data = options.formData;
        } else {
          /** @type {!FormData} */
          o.data = formdata;
        }
        if (beforeSend) {
          beforeSend.call(this, xhr, o);
        }
      };
      return $.ajax(s);
    }
    /**
     * @param {?} a
     * @return {?}
     */
    function fileUploadIframe(a) {
      /**
       * @param {!Element} frame
       * @return {?}
       */
      function getDoc(frame) {
        /** @type {null} */
        var doc = null;
        try {
          if (frame.contentWindow) {
            doc = frame.contentWindow.document;
          }
        } catch (CalcMethod) {
          log("cannot get iframe.contentWindow document: " + CalcMethod);
        }
        if (doc) {
          return doc;
        }
        try {
          doc = frame.contentDocument ? frame.contentDocument : frame.document;
        } catch (CalcMethod) {
          log("cannot get iframe.contentDocument: " + CalcMethod);
          doc = frame.document;
        }
        return doc;
      }
      /**
       * @return {undefined}
       */
      function doSubmit() {
        /**
         * @return {undefined}
         */
        function checkState() {
          try {
            var state = getDoc(io).readyState;
            log("state = " + state);
            if (state && state.toLowerCase() == "uninitialized") {
              setTimeout(checkState, 50);
            }
          } catch (clip) {
            log("Server abort: ", clip, " (", clip.name, ")");
            cb(SERVER_ABORT);
            if (click_timeout_id) {
              clearTimeout(click_timeout_id);
            }
            click_timeout_id = undefined;
          }
        }
        var f = $form.attr2("target");
        var a = $form.attr2("action");
        /** @type {string} */
        var encoding = "multipart/form-data";
        var action_url = $form.attr("enctype") || $form.attr("encoding") || encoding;
        form.setAttribute("target", id);
        if (!method || /post/i.test(method)) {
          form.setAttribute("method", "POST");
        }
        if (a != s.url) {
          form.setAttribute("action", s.url);
        }
        if (!s.skipEncodingOverride && (!method || /post/i.test(method))) {
          $form.attr({
            encoding : "multipart/form-data",
            enctype : "multipart/form-data"
          });
        }
        if (s.timeout) {
          /** @type {number} */
          click_timeout_id = setTimeout(function() {
            /** @type {boolean} */
            S = true;
            cb(CLIENT_TIMEOUT_ABORT);
          }, s.timeout);
        }
        /** @type {!Array} */
        var puzzle = [];
        try {
          if (s.extraData) {
            var n;
            for (n in s.extraData) {
              if (s.extraData.hasOwnProperty(n)) {
                if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty("name") && s.extraData[n].hasOwnProperty("value")) {
                  puzzle.push($('<input type="hidden" name="' + s.extraData[n].name + '">').val(s.extraData[n].value).appendTo(form)[0]);
                } else {
                  puzzle.push($('<input type="hidden" name="' + n + '">').val(s.extraData[n]).appendTo(form)[0]);
                }
              }
            }
          }
          if (!s.iframeTarget) {
            $io.appendTo("body");
          }
          if (io.attachEvent) {
            io.attachEvent("onload", cb);
          } else {
            io.addEventListener("load", cb, false);
          }
          setTimeout(checkState, 15);
          try {
            form.submit();
          } catch (n) {
            var submitFn = document.createElement("form").submit;
            submitFn.apply(form);
          }
        } finally {
          form.setAttribute("action", a);
          form.setAttribute("enctype", action_url);
          if (f) {
            form.setAttribute("target", f);
          } else {
            $form.removeAttr("target");
          }
          $(puzzle).remove();
        }
      }
      /**
       * @param {number} e
       * @return {undefined}
       */
      function cb(e) {
        if (xhr.aborted || callbackProcessed) {
          return;
        }
        doc = getDoc(io);
        if (!doc) {
          log("cannot access response document");
          /** @type {number} */
          e = SERVER_ABORT;
        }
        if (e === CLIENT_TIMEOUT_ABORT && xhr) {
          xhr.abort("timeout");
          deferred.reject(xhr, "timeout");
          return;
        } else {
          if (e == SERVER_ABORT && xhr) {
            xhr.abort("server abort");
            deferred.reject(xhr, "error", "server abort");
            return;
          }
        }
        if (!doc || doc.location.href == s.iframeSrc) {
          if (!S) {
            return;
          }
        }
        if (io.detachEvent) {
          io.detachEvent("onload", cb);
        } else {
          io.removeEventListener("load", cb, false);
        }
        /** @type {string} */
        var status = "success";
        var errMsg;
        try {
          if (S) {
            throw "timeout";
          }
          var isXml = s.dataType == "xml" || doc.XMLDocument || $.isXMLDoc(doc);
          log("isXml=" + isXml);
          if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) {
            if (--N) {
              log("requeing onLoad callback, DOM not available");
              setTimeout(cb, 250);
              return;
            }
          }
          var docRoot = doc.body ? doc.body : doc.documentElement;
          xhr.responseText = docRoot ? docRoot.innerHTML : null;
          xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
          if (isXml) {
            /** @type {string} */
            s.dataType = "xml";
          }
          /**
           * @param {string} name
           * @return {?}
           */
          xhr.getResponseHeader = function(name) {
            var default_headers = {
              "content-type" : s.dataType
            };
            return default_headers[name.toLowerCase()];
          };
          if (docRoot) {
            xhr.status = Number(docRoot.getAttribute("status")) || xhr.status;
            xhr.statusText = docRoot.getAttribute("statusText") || xhr.statusText;
          }
          var dt = (s.dataType || "").toLowerCase();
          /** @type {boolean} */
          var scr = /(json|script|text)/.test(dt);
          if (scr || s.textarea) {
            var ta = doc.getElementsByTagName("textarea")[0];
            if (ta) {
              xhr.responseText = ta.value;
              xhr.status = Number(ta.getAttribute("status")) || xhr.status;
              xhr.statusText = ta.getAttribute("statusText") || xhr.statusText;
            } else {
              if (scr) {
                var pre = doc.getElementsByTagName("pre")[0];
                var b = doc.getElementsByTagName("body")[0];
                if (pre) {
                  xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;
                } else {
                  if (b) {
                    xhr.responseText = b.textContent ? b.textContent : b.innerText;
                  }
                }
              }
            }
          } else {
            if (dt == "xml" && !xhr.responseXML && xhr.responseText) {
              xhr.responseXML = toXml(xhr.responseText);
            }
          }
          try {
            data = httpData(xhr, dt, s);
          } catch (e) {
            /** @type {string} */
            status = "parsererror";
            xhr.error = errMsg = e || status;
          }
        } catch (e) {
          log("error caught: ", e);
          /** @type {string} */
          status = "error";
          xhr.error = errMsg = e || status;
        }
        if (xhr.aborted) {
          log("upload aborted");
          /** @type {null} */
          status = null;
        }
        if (xhr.status) {
          /** @type {string} */
          status = xhr.status >= 200 && xhr.status < 300 || xhr.status === 304 ? "success" : "error";
        }
        if (status === "success") {
          if (s.success) {
            s.success.call(s.context, data, "success", xhr);
          }
          deferred.resolve(xhr.responseText, "success", xhr);
          if (g) {
            $.event.trigger("ajaxSuccess", [xhr, s]);
          }
        } else {
          if (status) {
            if (errMsg === undefined) {
              errMsg = xhr.statusText;
            }
            if (s.error) {
              s.error.call(s.context, xhr, status, errMsg);
            }
            deferred.reject(xhr, "error", errMsg);
            if (g) {
              $.event.trigger("ajaxError", [xhr, s, errMsg]);
            }
          }
        }
        if (g) {
          $.event.trigger("ajaxComplete", [xhr, s]);
        }
        if (g && !--$.active) {
          $.event.trigger("ajaxStop");
        }
        if (s.complete) {
          s.complete.call(s.context, xhr, status);
        }
        /** @type {boolean} */
        callbackProcessed = true;
        if (s.timeout) {
          clearTimeout(click_timeout_id);
        }
        setTimeout(function() {
          if (!s.iframeTarget) {
            $io.remove();
          } else {
            $io.attr("src", s.iframeSrc);
          }
          /** @type {null} */
          xhr.responseXML = null;
        }, 100);
      }
      var form = $form[0];
      var $aidlBtn;
      var i;
      var s;
      var g;
      var id;
      var $io;
      var io;
      var xhr;
      var sub;
      var n;
      var S;
      var click_timeout_id;
      var deferred = $.Deferred();
      /**
       * @param {string} error
       * @return {undefined}
       */
      deferred.abort = function(error) {
        xhr.abort(error);
      };
      if (a) {
        /** @type {number} */
        i = 0;
        for (; i < elements.length; i++) {
          $aidlBtn = $(elements[i]);
          if (n) {
            $aidlBtn.prop("disabled", false);
          } else {
            $aidlBtn.removeAttr("disabled");
          }
        }
      }
      s = $.extend(true, {}, $.ajaxSettings, options);
      s.context = s.context || s;
      /** @type {string} */
      id = "jqFormIO" + (new Date).getTime();
      if (s.iframeTarget) {
        $io = $(s.iframeTarget);
        n = $io.attr2("name");
        if (!n) {
          $io.attr2("name", id);
        } else {
          id = n;
        }
      } else {
        $io = $('<iframe name="' + id + '" src="' + s.iframeSrc + '" />');
        $io.css({
          position : "absolute",
          top : "-1000px",
          left : "-1000px"
        });
      }
      io = $io[0];
      xhr = {
        aborted : 0,
        responseText : null,
        responseXML : null,
        status : 0,
        statusText : "n/a",
        getAllResponseHeaders : function() {
        },
        getResponseHeader : function() {
        },
        setRequestHeader : function() {
        },
        abort : function(error) {
          /** @type {string} */
          var e = error === "timeout" ? "timeout" : "aborted";
          log("aborting upload... " + e);
          /** @type {number} */
          this.aborted = 1;
          try {
            if (io.contentWindow.document.execCommand) {
              io.contentWindow.document.execCommand("Stop");
            }
          } catch (i) {
          }
          $io.attr("src", s.iframeSrc);
          /** @type {string} */
          xhr.error = e;
          if (s.error) {
            s.error.call(s.context, xhr, e, error);
          }
          if (g) {
            $.event.trigger("ajaxError", [xhr, s, e]);
          }
          if (s.complete) {
            s.complete.call(s.context, xhr, e);
          }
        }
      };
      g = s.global;
      if (g && 0 === $.active++) {
        $.event.trigger("ajaxStart");
      }
      if (g) {
        $.event.trigger("ajaxSend", [xhr, s]);
      }
      if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {
        if (s.global) {
          $.active--;
        }
        deferred.reject();
        return deferred;
      }
      if (xhr.aborted) {
        deferred.reject();
        return deferred;
      }
      sub = form.clk;
      if (sub) {
        n = sub.name;
        if (n && !sub.disabled) {
          s.extraData = s.extraData || {};
          s.extraData[n] = sub.value;
          if (sub.type == "image") {
            s.extraData[n + ".x"] = form.clk_x;
            s.extraData[n + ".y"] = form.clk_y;
          }
        }
      }
      /** @type {number} */
      var CLIENT_TIMEOUT_ABORT = 1;
      /** @type {number} */
      var SERVER_ABORT = 2;
      var c = $("meta[name=csrf-token]").attr("content");
      var p = $("meta[name=csrf-param]").attr("content");
      if (p && c) {
        s.extraData = s.extraData || {};
        s.extraData[p] = c;
      }
      if (s.forceSync) {
        doSubmit();
      } else {
        setTimeout(doSubmit, 10);
      }
      var data;
      var doc;
      /** @type {number} */
      var N = 50;
      var callbackProcessed;
      var toXml = $.parseXML || function(xmlString, doc) {
        if (window.ActiveXObject) {
          doc = new ActiveXObject("Microsoft.XMLDOM");
          /** @type {string} */
          doc.async = "false";
          doc.loadXML(xmlString);
        } else {
          /** @type {(Document|null)} */
          doc = (new DOMParser).parseFromString(xmlString, "text/xml");
        }
        return doc && doc.documentElement && doc.documentElement.nodeName != "parsererror" ? doc : null;
      };
      var parseJSON = $.parseJSON || function(type) {
        return window["eval"]("(" + type + ")");
      };
      /**
       * @param {!Object} xhr
       * @param {string} type
       * @param {string} s
       * @return {?}
       */
      var httpData = function(xhr, type, s) {
        var ct = xhr.getResponseHeader("content-type") || "";
        /** @type {boolean} */
        var xml = type === "xml" || !type && ct.indexOf("xml") >= 0;
        var data = xml ? xhr.responseXML : xhr.responseText;
        if (xml && data.documentElement.nodeName === "parsererror") {
          if ($.error) {
            $.error("parsererror");
          }
        }
        if (s && s.dataFilter) {
          data = s.dataFilter(data, type);
        }
        if (typeof data === "string") {
          if (type === "json" || !type && ct.indexOf("json") >= 0) {
            data = parseJSON(data);
          } else {
            if (type === "script" || !type && ct.indexOf("javascript") >= 0) {
              $.globalEval(data);
            }
          }
        }
        return data;
      };
      return deferred;
    }
    if (!this.length) {
      log("ajaxSubmit: skipping submit process - no element selected");
      return this;
    }
    var method;
    var selector;
    var url;
    var $form = this;
    if (typeof options == "function") {
      options = {
        success : options
      };
    } else {
      if (options === undefined) {
        options = {};
      }
    }
    method = options.type || this.attr2("method");
    selector = options.url || this.attr2("action");
    url = typeof selector === "string" ? $.trim(selector) : "";
    url = url || window.location.href || "";
    if (url) {
      url = (url.match(/^([^#]+)/) || [])[1];
    }
    options = $.extend(true, {
      url : url,
      success : $.ajaxSettings.success,
      type : method || $.ajaxSettings.type,
      iframeSrc : /^https/i.test(window.location.href || "") ? "javascript:false" : "about:blank"
    }, options);
    var veto = {};
    this.trigger("form-pre-serialize", [this, options, veto]);
    if (veto.veto) {
      log("ajaxSubmit: submit vetoed via form-pre-serialize trigger");
      return this;
    }
    if (options.beforeSerialize && options.beforeSerialize(this, options) === false) {
      log("ajaxSubmit: submit aborted via beforeSerialize callback");
      return this;
    }
    var traditional = options.traditional;
    if (traditional === undefined) {
      traditional = $.ajaxSettings.traditional;
    }
    /** @type {!Array} */
    var elements = [];
    var qx;
    var a = this.formToArray(options.semantic, elements);
    if (options.data) {
      options.extraData = options.data;
      qx = $.param(options.data, traditional);
    }
    if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {
      log("ajaxSubmit: submit aborted via beforeSubmit callback");
      return this;
    }
    this.trigger("form-submit-validate", [a, this, options, veto]);
    if (veto.veto) {
      log("ajaxSubmit: submit vetoed via form-submit-validate trigger");
      return this;
    }
    var q = $.param(a, traditional);
    if (qx) {
      q = q ? q + "&" + qx : qx;
    }
    if (options.type.toUpperCase() == "GET") {
      options.url += (options.url.indexOf("?") >= 0 ? "&" : "?") + q;
      /** @type {null} */
      options.data = null;
    } else {
      options.data = q;
    }
    /** @type {!Array} */
    var callbacks = [];
    if (options.resetForm) {
      callbacks.push(function() {
        $form.resetForm();
      });
    }
    if (options.clearForm) {
      callbacks.push(function() {
        $form.clearForm(options.includeHidden);
      });
    }
    if (!options.dataType && options.target) {
      /** @type {!Function} */
      var A = options.success || function() {
      };
      callbacks.push(function(val) {
        /** @type {string} */
        var fn = options.replaceTarget ? "replaceWith" : "html";
        $(options.target)[fn](val).each(A, arguments);
      });
    } else {
      if (options.success) {
        callbacks.push(options.success);
      }
    }
    /**
     * @param {string} type
     * @param {!Object} name
     * @param {!Object} data
     * @return {undefined}
     */
    options.success = function(type, name, data) {
      var s = options.context || this;
      /** @type {number} */
      var i = 0;
      /** @type {number} */
      var len = callbacks.length;
      for (; i < len; i++) {
        callbacks[i].apply(s, [type, name, data || $form, $form]);
      }
    };
    if (options.error) {
      var callback = options.error;
      /**
       * @param {string} type
       * @param {!Object} name
       * @param {!Object} data
       * @return {undefined}
       */
      options.error = function(type, name, data) {
        var _this2 = options.context || this;
        callback.apply(_this2, [type, name, data, $form]);
      };
    }
    if (options.complete) {
      var oldComplete = options.complete;
      /**
       * @param {string} type
       * @param {!Object} name
       * @return {undefined}
       */
      options.complete = function(type, name) {
        var context = options.context || this;
        oldComplete.apply(context, [type, name, $form]);
      };
    }
    var expRecords = $("input[type=file]:enabled", this).filter(function() {
      return $(this).val() !== "";
    });
    /** @type {boolean} */
    var hasFileInputs = expRecords.length > 0;
    /** @type {string} */
    var mp = "multipart/form-data";
    /** @type {boolean} */
    var multipart = $form.attr("enctype") == mp || $form.attr("encoding") == mp;
    /** @type {boolean} */
    var fileAPI = feature.fileapi && feature.formdata;
    log("fileAPI :" + fileAPI);
    /** @type {boolean} */
    var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;
    var i;
    if (options.iframe !== false && (options.iframe || shouldUseFrame)) {
      if (options.closeKeepAlive) {
        $.get(options.closeKeepAlive, function() {
          i = fileUploadIframe(a);
        });
      } else {
        i = fileUploadIframe(a);
      }
    } else {
      if ((hasFileInputs || multipart) && fileAPI) {
        i = fileUploadXhr(a);
      } else {
        i = $.ajax(options);
      }
    }
    $form.removeData("jqxhr").data("jqxhr", i);
    /** @type {number} */
    var elementIndex = 0;
    for (; elementIndex < elements.length; elementIndex++) {
      /** @type {null} */
      elements[elementIndex] = null;
    }
    this.trigger("form-submit-notify", [this, options]);
    return this;
  };
  /**
   * @param {!Object} options
   * @return {?}
   */
  $.fn.ajaxForm = function(options) {
    options = options || {};
    options.delegation = options.delegation && $.isFunction($.fn.on);
    if (!options.delegation && this.length === 0) {
      var map = {
        s : this.selector,
        c : this.context
      };
      if (!$.isReady && map.s) {
        log("DOM not ready, queuing ajaxForm");
        $(function() {
          $(map.s, map.c).ajaxForm(options);
        });
        return this;
      }
      log("terminating; zero elements found by selector" + ($.isReady ? "" : " (DOM not ready)"));
      return this;
    }
    if (options.delegation) {
      $(document).off("submit.form-plugin", this.selector, handler).off("click.form-plugin", this.selector, clickHandler).on("submit.form-plugin", this.selector, options, handler).on("click.form-plugin", this.selector, options, clickHandler);
      return this;
    }
    return this.ajaxFormUnbind().bind("submit.form-plugin", options, handler).bind("click.form-plugin", options, clickHandler);
  };
  /**
   * @return {?}
   */
  $.fn.ajaxFormUnbind = function() {
    return this.unbind("submit.form-plugin click.form-plugin");
  };
  /**
   * @param {(HTMLDocument|boolean)} semantic
   * @param {!Array} elements
   * @return {?}
   */
  $.fn.formToArray = function(semantic, elements) {
    /** @type {!Array} */
    var a = [];
    if (this.length === 0) {
      return a;
    }
    var form = this[0];
    var epframe = this.attr("id");
    var els = semantic ? form.getElementsByTagName("*") : form.elements;
    var pre;
    if (els && !/MSIE [678]/.test(navigator.userAgent)) {
      els = $(els).get();
    }
    if (epframe) {
      pre = $(':input[form="' + epframe + '"]').get();
      if (pre.length) {
        els = (els || []).concat(pre);
      }
    }
    if (!els || !els.length) {
      return a;
    }
    var l;
    var y;
    var n;
    var value;
    var el;
    var i;
    var yl;
    /** @type {number} */
    l = 0;
    i = els.length;
    for (; l < i; l++) {
      el = els[l];
      n = el.name;
      if (!n || el.disabled) {
        continue;
      }
      if (semantic && form.clk && el.type == "image") {
        if (form.clk == el) {
          a.push({
            name : n,
            value : $(el).val(),
            type : el.type
          });
          a.push({
            name : n + ".x",
            value : form.clk_x
          }, {
            name : n + ".y",
            value : form.clk_y
          });
        }
        continue;
      }
      value = $.fieldValue(el, true);
      if (value && value.constructor == Array) {
        if (elements) {
          elements.push(el);
        }
        /** @type {number} */
        y = 0;
        yl = value.length;
        for (; y < yl; y++) {
          a.push({
            name : n,
            value : value[y]
          });
        }
      } else {
        if (feature.fileapi && el.type == "file") {
          if (elements) {
            elements.push(el);
          }
          var temp = el.files;
          if (temp.length) {
            /** @type {number} */
            y = 0;
            for (; y < temp.length; y++) {
              a.push({
                name : n,
                value : temp[y],
                type : el.type
              });
            }
          } else {
            a.push({
              name : n,
              value : "",
              type : el.type
            });
          }
        } else {
          if (value !== null && typeof value != "undefined") {
            if (elements) {
              elements.push(el);
            }
            a.push({
              name : n,
              value : value,
              type : el.type,
              required : el.required
            });
          }
        }
      }
    }
    if (!semantic && form.clk) {
      var element = $(form.clk);
      var o = element[0];
      n = o.name;
      if (n && !o.disabled && o.type == "image") {
        a.push({
          name : n,
          value : element.val()
        });
        a.push({
          name : n + ".x",
          value : form.clk_x
        }, {
          name : n + ".y",
          value : form.clk_y
        });
      }
    }
    return a;
  };
  /**
   * @param {?} semantic
   * @return {?}
   */
  $.fn.formSerialize = function(semantic) {
    return $.param(this.formToArray(semantic));
  };
  /**
   * @param {boolean} successful
   * @return {?}
   */
  $.fn.fieldSerialize = function(successful) {
    /** @type {!Array} */
    var parameters = [];
    this.each(function() {
      var name = this.name;
      if (!name) {
        return;
      }
      var v = $.fieldValue(this, successful);
      if (v && v.constructor == Array) {
        /** @type {number} */
        var j = 0;
        var vLen = v.length;
        for (; j < vLen; j++) {
          parameters.push({
            name : name,
            value : v[j]
          });
        }
      } else {
        if (v !== null && typeof v != "undefined") {
          parameters.push({
            name : this.name,
            value : v
          });
        }
      }
    });
    return $.param(parameters);
  };
  /**
   * @param {boolean} successful
   * @return {?}
   */
  $.fn.fieldValue = function(successful) {
    /** @type {!Array} */
    var a = [];
    /** @type {number} */
    var i = 0;
    var l = this.length;
    for (; i < l; i++) {
      var el = this[i];
      var v = $.fieldValue(el, successful);
      if (v === null || typeof v == "undefined" || v.constructor == Array && !v.length) {
        continue;
      }
      if (v.constructor == Array) {
        $.merge(a, v);
      } else {
        a.push(v);
      }
    }
    return a;
  };
  /**
   * @param {!Object} el
   * @param {boolean} successful
   * @return {?}
   */
  $.fieldValue = function(el, successful) {
    var n = el.name;
    var t = el.type;
    var name = el.tagName.toLowerCase();
    if (successful === undefined) {
      /** @type {boolean} */
      successful = true;
    }
    if (successful && (!n || el.disabled || t == "reset" || t == "button" || (t == "checkbox" || t == "radio") && !el.checked || (t == "submit" || t == "image") && el.form && el.form.clk != el || name == "select" && el.selectedIndex == -1)) {
      return null;
    }
    if (name == "select") {
      var index = el.selectedIndex;
      if (index < 0) {
        return null;
      }
      /** @type {!Array} */
      var a = [];
      var options = el.options;
      /** @type {boolean} */
      var one = t == "select-one";
      var max = one ? index + 1 : options.length;
      var i = one ? index : 0;
      for (; i < max; i++) {
        var option = options[i];
        if (option.selected) {
          var val = option.value;
          if (!val) {
            val = option.attributes && option.attributes.value && !option.attributes.value.specified ? option.text : option.value;
          }
          if (one) {
            return val;
          }
          a.push(val);
        }
      }
      return a;
    }
    return $(el).val();
  };
  /**
   * @param {?} includeHidden
   * @return {?}
   */
  $.fn.clearForm = function(includeHidden) {
    return this.each(function() {
      $("input,select,textarea", this).clearFields(includeHidden);
    });
  };
  /** @type {function(string): ?} */
  $.fn.clearFields = $.fn.clearInputs = function(item) {
    /** @type {!RegExp} */
    var r = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;
    return this.each(function() {
      var t = this.type;
      var tag = this.tagName.toLowerCase();
      if (r.test(t) || tag == "textarea") {
        /** @type {string} */
        this.value = "";
      } else {
        if (t == "checkbox" || t == "radio") {
          /** @type {boolean} */
          this.checked = false;
        } else {
          if (tag == "select") {
            /** @type {number} */
            this.selectedIndex = -1;
          } else {
            if (t == "file") {
              if (/MSIE/.test(navigator.userAgent)) {
                $(this).replaceWith($(this).clone(true));
              } else {
                $(this).val("");
              }
            } else {
              if (item) {
                if (item === true && /hidden/.test(t) || typeof item == "string" && $(this).is(item)) {
                  /** @type {string} */
                  this.value = "";
                }
              }
            }
          }
        }
      }
    });
  };
  /**
   * @return {?}
   */
  $.fn.resetForm = function() {
    return this.each(function() {
      if (typeof this.reset == "function" || typeof this.reset == "object" && !this.reset.nodeType) {
        this.reset();
      }
    });
  };
  /**
   * @param {boolean} b
   * @return {?}
   */
  $.fn.enable = function(b) {
    if (b === undefined) {
      /** @type {boolean} */
      b = true;
    }
    return this.each(function() {
      /** @type {boolean} */
      this.disabled = !b;
    });
  };
  /**
   * @param {string} type
   * @return {?}
   */
  $.fn.selected = function(type) {
    if (type === undefined) {
      /** @type {boolean} */
      type = true;
    }
    return this.each(function() {
      var type = this.type;
      if (type == "checkbox" || type == "radio") {
        this.checked = type;
      } else {
        if (this.tagName.toLowerCase() == "option") {
          var data = $(this).parent("select");
          if (type && data[0] && data[0].type == "select-one") {
            data.find("option").selected(false);
          }
          /** @type {string} */
          this.selected = type;
        }
      }
    });
  };
  /** @type {boolean} */
  $.fn.ajaxSubmit.debug = false;
});
(function(jQuery) {
  /**
   * @param {!Object} type
   * @return {undefined}
   */
  function keyHandler(type) {
    if (typeof type.data === "string") {
      type.data = {
        keys : type.data
      };
    }
    if (!type.data || !type.data.keys || typeof type.data.keys !== "string") {
      return;
    }
    /** @type {function(!Object): ?} */
    var j = type.handler;
    /** @type {!Array<string>} */
    var keys = type.data.keys.toLowerCase().split(" ");
    /** @type {!Array} */
    var textAcceptingInputTypes = ["text", "password", "number", "email", "url", "range", "date", "month", "week", "time", "datetime", "datetime-local", "search", "color", "tel"];
    /**
     * @param {!Object} event
     * @return {?}
     */
    type.handler = function(event) {
      if (this !== event.target && (/textarea|select/i.test(event.target.nodeName) || jQuery.inArray(event.target.type, textAcceptingInputTypes) > -1)) {
        return;
      }
      var special = jQuery.hotkeys.specialKeys[event.keyCode];
      /** @type {string} */
      var character = String.fromCharCode(event.which).toLowerCase();
      /** @type {string} */
      var modif = "";
      var possible = {};
      jQuery.each(["alt", "ctrl", "meta", "shift"], function(canCreateDiscussions, specialKey) {
        if (event[specialKey + "Key"] && special !== specialKey) {
          modif = modif + (specialKey + "+");
        }
      });
      modif = modif.replace("alt+ctrl+meta+shift", "hyper");
      if (special) {
        /** @type {boolean} */
        possible[modif + special] = true;
      }
      if (character) {
        /** @type {boolean} */
        possible[modif + character] = true;
        /** @type {boolean} */
        possible[modif + jQuery.hotkeys.shiftNums[character]] = true;
        if (modif === "shift+") {
          /** @type {boolean} */
          possible[jQuery.hotkeys.shiftNums[character]] = true;
        }
      }
      /** @type {number} */
      var i = 0;
      /** @type {number} */
      var l = keys.length;
      for (; i < l; i++) {
        if (possible[keys[i]]) {
          return j.apply(this, arguments);
        }
      }
    };
  }
  jQuery.hotkeys = {
    version : "0.8",
    specialKeys : {
      8 : "backspace",
      9 : "tab",
      10 : "return",
      13 : "return",
      16 : "shift",
      17 : "ctrl",
      18 : "alt",
      19 : "pause",
      20 : "capslock",
      27 : "esc",
      32 : "space",
      33 : "pageup",
      34 : "pagedown",
      35 : "end",
      36 : "home",
      37 : "left",
      38 : "up",
      39 : "right",
      40 : "down",
      45 : "insert",
      46 : "del",
      59 : ";",
      61 : "=",
      96 : "0",
      97 : "1",
      98 : "2",
      99 : "3",
      100 : "4",
      101 : "5",
      102 : "6",
      103 : "7",
      104 : "8",
      105 : "9",
      106 : "*",
      107 : "+",
      109 : "-",
      110 : ".",
      111 : "/",
      112 : "f1",
      113 : "f2",
      114 : "f3",
      115 : "f4",
      116 : "f5",
      117 : "f6",
      118 : "f7",
      119 : "f8",
      120 : "f9",
      121 : "f10",
      122 : "f11",
      123 : "f12",
      144 : "numlock",
      145 : "scroll",
      173 : "-",
      186 : ";",
      187 : "=",
      188 : ",",
      189 : "-",
      190 : ".",
      191 : "/",
      192 : "`",
      219 : "[",
      220 : "\\",
      221 : "]",
      222 : "'"
    },
    shiftNums : {
      "`" : "~",
      1 : "!",
      2 : "@",
      3 : "#",
      4 : "$",
      5 : "%",
      6 : "^",
      7 : "&",
      8 : "*",
      9 : "(",
      0 : ")",
      "-" : "_",
      "=" : "+",
      ";" : ": ",
      "'" : '"',
      "," : "<",
      "." : ">",
      "/" : "?",
      "\\" : "|"
    }
  };
  jQuery.each(["keydown", "keyup", "keypress"], function() {
    jQuery.event.special[this] = {
      add : keyHandler
    };
  });
})(this.jQuery);
(function($) {
  if (typeof $.browser === "undefined" || !$.browser) {
    var l = {};
    $.extend(l);
  }
  var data = {
    flash : {
      activex : ["ShockwaveFlash.ShockwaveFlash", "ShockwaveFlash.ShockwaveFlash.3", "ShockwaveFlash.ShockwaveFlash.4", "ShockwaveFlash.ShockwaveFlash.5", "ShockwaveFlash.ShockwaveFlash.6", "ShockwaveFlash.ShockwaveFlash.7"],
      plugin : /flash/gim
    },
    sl : {
      activex : ["AgControl.AgControl"],
      plugin : /silverlight/gim
    },
    pdf : {
      activex : ["acroPDF.PDF.1", "PDF.PdfCtrl.1", "PDF.PdfCtrl.4", "PDF.PdfCtrl.5", "PDF.PdfCtrl.6"],
      plugin : /adobe\s?acrobat/gim
    },
    qtime : {
      activex : ["QuickTime.QuickTime", "QuickTimeCheckObject.QuickTimeCheck.1", "QuickTime.QuickTime.4"],
      plugin : /quicktime/gim
    },
    wmp : {
      activex : ["WMPlayer.OCX", "MediaPlayer.MediaPlayer.1"],
      plugin : /(windows\smedia)|(Microsoft)/gim
    },
    shk : {
      activex : ["SWCtl.SWCtl", "SWCt1.SWCt1.7", "SWCt1.SWCt1.8", "SWCt1.SWCt1.9", "ShockwaveFlash.ShockwaveFlash.1"],
      plugin : /shockwave/gim
    },
    rp : {
      activex : ["RealPlayer", "rmocx.RealPlayer G2 Control.1"],
      plugin : /realplayer/gim
    }
  };
  /**
   * @param {?} name
   * @return {undefined}
   */
  var handler = function(name) {
    if (window.ActiveXObject) {
      /** @type {boolean} */
      $.browser[name] = false;
      /** @type {number} */
      i = 0;
      for (; i < data[name].activex.length; i++) {
        try {
          new ActiveXObject(data[name].activex[i]);
          /** @type {boolean} */
          $.browser[name] = true;
        } catch (l) {
        }
      }
    } else {
      $.each(navigator.plugins, function() {
        if (this.name.match(data[name].plugin)) {
          /** @type {boolean} */
          $.browser[name] = true;
          return false;
        } else {
          /** @type {boolean} */
          $.browser[name] = false;
        }
      });
    }
  };
  $.each(data, function(key, a) {
    handler(key);
  });
})(jQuery);
(function($) {
  $.extend($.fn, {
    livequery : function(type, fn, fn2) {
      var self = this;
      var q;
      if ($.isFunction(type)) {
        /** @type {!Function} */
        fn2 = fn;
        /** @type {!Function} */
        fn = type;
        type = undefined;
      }
      $.each($.livequery.queries, function(s, query) {
        if (self.selector == query.selector && self.context == query.context && type == query.type && (!fn || fn.$lqguid == query.fn.$lqguid) && (!fn2 || fn2.$lqguid == query.fn2.$lqguid)) {
          return (q = query) && false;
        }
      });
      q = q || new $.livequery(this.selector, this.context, type, fn, fn2);
      /** @type {boolean} */
      q.stopped = false;
      q.run();
      return this;
    },
    expire : function(type, fn, fn2) {
      var self = this;
      if ($.isFunction(type)) {
        /** @type {string} */
        fn2 = fn;
        /** @type {string} */
        fn = type;
        type = undefined;
      }
      $.each($.livequery.queries, function(s, query) {
        if (self.selector == query.selector && self.context == query.context && (!type || type == query.type) && (!fn || fn.$lqguid == query.fn.$lqguid) && (!fn2 || fn2.$lqguid == query.fn2.$lqguid) && !this.stopped) {
          $.livequery.stop(query.id);
        }
      });
      return this;
    }
  });
  /**
   * @param {string} selector
   * @param {!Object} context
   * @param {!Object} type
   * @param {!Function} fn
   * @param {string} fn2
   * @return {?}
   */
  $.livequery = function(selector, context, type, fn, fn2) {
    /** @type {string} */
    this.selector = selector;
    /** @type {!Object} */
    this.context = context;
    /** @type {!Object} */
    this.type = type;
    /** @type {!Function} */
    this.fn = fn;
    /** @type {string} */
    this.fn2 = fn2;
    /** @type {!Array} */
    this.elements = [];
    /** @type {boolean} */
    this.stopped = false;
    /** @type {number} */
    this.id = $.livequery.queries.push(this) - 1;
    fn.$lqguid = fn.$lqguid || $.livequery.guid++;
    if (fn2) {
      fn2.$lqguid = fn2.$lqguid || $.livequery.guid++;
    }
    return this;
  };
  $.livequery.prototype = {
    stop : function() {
      var templates = this;
      if (this.type) {
        this.elements.unbind(this.type, this.fn);
      } else {
        if (this.fn2) {
          this.elements.each(function(i, asyncWebdriverObject) {
            templates.fn2.apply(asyncWebdriverObject);
          });
        }
      }
      /** @type {!Array} */
      this.elements = [];
      /** @type {boolean} */
      this.stopped = true;
    },
    run : function() {
      if (this.stopped) {
        return;
      }
      var query = this;
      var el = this.elements;
      var els = $(this.selector, this.context);
      var nEls = els.not(el);
      this.elements = els;
      if (this.type) {
        nEls.bind(this.type, this.fn);
        if (el.length > 0) {
          $.each(el, function(i, n) {
            if ($.inArray(n, els) < 0) {
              $.event.remove(n, query.type, query.fn);
            }
          });
        }
      } else {
        nEls.each(function() {
          query.fn.apply(this);
        });
        if (this.fn2 && el.length > 0) {
          $.each(el, function(i, n) {
            if ($.inArray(n, els) < 0) {
              query.fn2.apply(n);
            }
          });
        }
      }
    }
  };
  $.extend($.livequery, {
    guid : 0,
    queries : [],
    queue : [],
    running : false,
    timeout : null,
    checkQueue : function() {
      if ($.livequery.running && $.livequery.queue.length) {
        var i = $.livequery.queue.length;
        for (; i--;) {
          $.livequery.queries[$.livequery.queue.shift()].run();
        }
      }
    },
    pause : function() {
      /** @type {boolean} */
      $.livequery.running = false;
    },
    play : function() {
      /** @type {boolean} */
      $.livequery.running = true;
      $.livequery.run();
    },
    registerPlugin : function() {
      $.each(arguments, function(i, operator) {
        if (!$.fn[operator]) {
          return;
        }
        var handler = $.fn[operator];
        /**
         * @return {?}
         */
        $.fn[operator] = function() {
          var cssobj = handler.apply(this, arguments);
          $.livequery.run();
          return cssobj;
        };
      });
    },
    run : function(w) {
      if (w != undefined) {
        if ($.inArray(w, $.livequery.queue) < 0) {
          $.livequery.queue.push(w);
        }
      } else {
        $.each($.livequery.queries, function(i) {
          if ($.inArray(i, $.livequery.queue) < 0) {
            $.livequery.queue.push(i);
          }
        });
      }
      if ($.livequery.timeout) {
        clearTimeout($.livequery.timeout);
      }
      /** @type {number} */
      $.livequery.timeout = setTimeout($.livequery.checkQueue, 20);
    },
    stop : function(id) {
      if (id != undefined) {
        $.livequery.queries[id].stop();
      } else {
        $.each($.livequery.queries, function(i) {
          $.livequery.queries[i].stop();
        });
      }
    }
  });
  $.livequery.registerPlugin("append", "prepend", "after", "before", "wrap", "attr", "removeAttr", "addClass", "removeClass", "toggleClass", "empty", "remove", "html");
  $(function() {
    $.livequery.play();
  });
})(jQuery);
(function(factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else {
    if (typeof module !== "undefined" && module.exports) {
      module.exports = factory(require("jquery"));
    } else {
      factory(jQuery);
    }
  }
})(function($) {
  /**
   * @param {!Object} elem
   * @return {?}
   */
  function isWin(elem) {
    return !elem.nodeName || $.inArray(elem.nodeName.toLowerCase(), ["iframe", "#document", "html", "body"]) !== -1;
  }
  /**
   * @param {number} a
   * @return {?}
   */
  function both(a) {
    return $.isFunction(a) || $.isPlainObject(a) ? a : {
      top : a,
      left : a
    };
  }
  /** @type {function(number, number, !Object): ?} */
  var $scrollTo = $.scrollTo = function(target, duration, time) {
    return $(window).scrollTo(target, duration, time);
  };
  $scrollTo.defaults = {
    axis : "xy",
    duration : 0,
    limit : true
  };
  /**
   * @param {string} target
   * @param {number} duration
   * @param {!Object} settings
   * @return {?}
   */
  $.fn.scrollTo = function(target, duration, settings) {
    if (typeof duration === "object") {
      /** @type {number} */
      settings = duration;
      /** @type {number} */
      duration = 0;
    }
    if (typeof settings === "function") {
      settings = {
        onAfter : settings
      };
    }
    if (target === "max") {
      /** @type {number} */
      target = 9e9;
    }
    settings = $.extend({}, $scrollTo.defaults, settings);
    duration = duration || settings.duration;
    var f = settings.queue && settings.axis.length > 1;
    if (f) {
      /** @type {number} */
      duration = duration / 2;
    }
    settings.offset = both(settings.offset);
    settings.over = both(settings.over);
    return this.each(function() {
      /**
       * @param {(!Function|string)} callback
       * @return {undefined}
       */
      function animate(callback) {
        var css = $.extend({}, settings, {
          queue : true,
          duration : duration,
          complete : callback && function() {
            callback.call(elem, targ, settings);
          }
        });
        data.animate(attr, css);
      }
      if (target === null) {
        return;
      }
      var win = isWin(this);
      var elem = win ? this.contentWindow || window : this;
      var data = $(elem);
      var targ = target;
      var attr = {};
      var toff;
      switch(typeof targ) {
        case "number":
        case "string":
          if (/^([+-]=?)?\d+(\.\d+)?(px|%)?$/.test(targ)) {
            targ = both(targ);
            break;
          }
          targ = win ? $(targ) : $(targ, elem);
        case "object":
          if (targ.length === 0) {
            return;
          }
          if (targ.is || targ.style) {
            toff = (targ = $(targ)).offset();
          }
      }
      var layer2mapA = $.isFunction(settings.offset) && settings.offset(elem, targ) || settings.offset;
      $.each(settings.axis.split(""), function(n, axis) {
        /** @type {string} */
        var Pos = axis === "x" ? "Left" : "Top";
        /** @type {string} */
        var pos = Pos.toLowerCase();
        /** @type {string} */
        var key = "scroll" + Pos;
        var prev = data[key]();
        var i = $scrollTo.max(elem, axis);
        if (toff) {
          attr[key] = toff[pos] + (win ? 0 : prev - data.offset()[pos]);
          if (settings.margin) {
            attr[key] -= parseInt(targ.css("margin" + Pos), 10) || 0;
            attr[key] -= parseInt(targ.css("border" + Pos + "Width"), 10) || 0;
          }
          attr[key] += layer2mapA[pos] || 0;
          if (settings.over[pos]) {
            attr[key] += targ[axis === "x" ? "width" : "height"]() * settings.over[pos];
          }
        } else {
          var c = targ[pos];
          attr[key] = c.slice && c.slice(-1) === "%" ? parseFloat(c) / 100 * i : c;
        }
        if (settings.limit && /^\d+$/.test(attr[key])) {
          /** @type {number} */
          attr[key] = attr[key] <= 0 ? 0 : Math.min(attr[key], i);
        }
        if (!n && settings.axis.length > 1) {
          if (prev === attr[key]) {
            attr = {};
          } else {
            if (f) {
              animate(settings.onAfterFirst);
              attr = {};
            }
          }
        }
      });
      animate(settings.onAfter);
    });
  };
  /**
   * @param {?} var_args
   * @param {?} x
   * @return {?}
   */
  $scrollTo.max = function(var_args, x) {
    /** @type {string} */
    var Dim = x === "x" ? "Width" : "Height";
    /** @type {string} */
    var scroll = "scroll" + Dim;
    if (!isWin(var_args)) {
      return var_args[scroll] - $(var_args)[Dim.toLowerCase()]();
    }
    /** @type {string} */
    var size = "client" + Dim;
    var doc = var_args.ownerDocument || var_args.document;
    var html = doc.documentElement;
    var body = doc.body;
    return Math.max(html[scroll], body[scroll]) - Math.min(html[size], body[size]);
  };
  $.Tween.propHooks.scrollLeft = $.Tween.propHooks.scrollTop = {
    get : function(data) {
      return $(data.elem)[data.prop]();
    },
    set : function(type) {
      var n = this.get(type);
      if (type.options.interrupt && type._last && type._last !== n) {
        return $(type.elem).stop();
      }
      /** @type {number} */
      var elem = Math.round(type.now);
      if (n !== elem) {
        $(type.elem)[type.prop](elem);
        type._last = this.get(type);
      }
    }
  };
  return $scrollTo;
});
(function(factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else {
    if (typeof exports === "object") {
      var jquery = require("jquery");
      module.exports = factory(jquery);
    } else {
      factory(window.jQuery || window.Zepto || window.$);
    }
  }
})(function($) {
  /**
   * @param {undefined} options
   * @return {?}
   */
  $.fn.serializeJSON = function(options) {
    var f;
    var el;
    var opts;
    var filter;
    var serializedObject;
    var name;
    var value;
    var _obj;
    var nameWithNoType;
    var type;
    var keys;
    f = $.serializeJSON;
    el = this;
    opts = f.setupOpts(options);
    filter = el.serializeArray();
    f.readCheckboxUncheckedValues(filter, opts, el);
    serializedObject = {};
    $.each(filter, function(canCreateDiscussions, attr) {
      name = attr.name;
      value = attr.value;
      _obj = f.extractTypeAndNameWithNoType(name);
      nameWithNoType = _obj.nameWithNoType;
      type = _obj.type;
      if (!type) {
        type = f.tryToFindTypeFromDataAttr(name, el);
      }
      f.validateType(name, type, opts);
      if (type !== "skip") {
        keys = f.splitInputNameIntoKeysArray(nameWithNoType);
        value = f.parseValue(value, name, type, opts);
        f.deepSet(serializedObject, keys, value, opts);
      }
    });
    return serializedObject;
  };
  $.serializeJSON = {
    defaultOptions : {
      checkboxUncheckedValue : undefined,
      parseNumbers : false,
      parseBooleans : false,
      parseNulls : false,
      parseAll : false,
      parseWithFunction : null,
      customTypes : {},
      defaultTypes : {
        "string" : function(val) {
          return String(val);
        },
        "number" : function(value) {
          return Number(value);
        },
        "boolean" : function(str) {
          /** @type {!Array} */
          var falses = ["false", "null", "undefined", "", "0"];
          return falses.indexOf(str) === -1;
        },
        "null" : function(str) {
          /** @type {!Array} */
          var falses = ["false", "null", "undefined", "", "0"];
          return falses.indexOf(str) === -1 ? str : null;
        },
        "array" : function(value) {
          return JSON.parse(value);
        },
        "object" : function(value) {
          return JSON.parse(value);
        },
        "auto" : function(val) {
          return $.serializeJSON.parseValue(val, null, null, {
            parseNumbers : true,
            parseBooleans : true,
            parseNulls : true
          });
        },
        "skip" : null
      },
      useIntKeysAsArrayIndex : false
    },
    setupOpts : function(options) {
      var opt;
      var validOpts;
      var defaultOptions;
      var optWithDefault;
      var parseAll;
      var f;
      f = $.serializeJSON;
      if (options == null) {
        options = {};
      }
      defaultOptions = f.defaultOptions || {};
      /** @type {!Array} */
      validOpts = ["checkboxUncheckedValue", "parseNumbers", "parseBooleans", "parseNulls", "parseAll", "parseWithFunction", "customTypes", "defaultTypes", "useIntKeysAsArrayIndex"];
      for (opt in options) {
        if (validOpts.indexOf(opt) === -1) {
          throw new Error("serializeJSON ERROR: invalid option '" + opt + "'. Please use one of " + validOpts.join(", "));
        }
      }
      /**
       * @param {string} key
       * @return {?}
       */
      optWithDefault = function(key) {
        return options[key] !== false && options[key] !== "" && (options[key] || defaultOptions[key]);
      };
      parseAll = optWithDefault("parseAll");
      return {
        checkboxUncheckedValue : optWithDefault("checkboxUncheckedValue"),
        parseNumbers : parseAll || optWithDefault("parseNumbers"),
        parseBooleans : parseAll || optWithDefault("parseBooleans"),
        parseNulls : parseAll || optWithDefault("parseNulls"),
        parseWithFunction : optWithDefault("parseWithFunction"),
        typeFunctions : $.extend({}, optWithDefault("defaultTypes"), optWithDefault("customTypes")),
        useIntKeysAsArrayIndex : optWithDefault("useIntKeysAsArrayIndex")
      };
    },
    parseValue : function(valStr, inputName, type, opts) {
      var f;
      var parsedVal;
      f = $.serializeJSON;
      /** @type {string} */
      parsedVal = valStr;
      if (opts.typeFunctions && type && opts.typeFunctions[type]) {
        parsedVal = opts.typeFunctions[type](valStr);
      } else {
        if (opts.parseNumbers && f.isNumeric(valStr)) {
          /** @type {number} */
          parsedVal = Number(valStr);
        } else {
          if (opts.parseBooleans && (valStr === "true" || valStr === "false")) {
            /** @type {boolean} */
            parsedVal = valStr === "true";
          } else {
            if (opts.parseNulls && valStr == "null") {
              /** @type {null} */
              parsedVal = null;
            }
          }
        }
      }
      if (opts.parseWithFunction && !type) {
        parsedVal = opts.parseWithFunction(parsedVal, inputName);
      }
      return parsedVal;
    },
    isObject : function(obj) {
      return obj === Object(obj);
    },
    isUndefined : function(o) {
      return o === void 0;
    },
    isValidArrayIndex : function(val) {
      return /^[0-9]+$/.test(String(val));
    },
    isNumeric : function(obj) {
      return obj - parseFloat(obj) >= 0;
    },
    optionKeys : function(object) {
      if (Object.keys) {
        return Object.keys(object);
      } else {
        var prop;
        /** @type {!Array} */
        var keys = [];
        for (prop in object) {
          keys.push(prop);
        }
        return keys;
      }
    },
    readCheckboxUncheckedValues : function(meta, opts, $form) {
      var name;
      var syncedAnimals;
      var $el;
      var uncheckedValue;
      var f;
      if (opts == null) {
        opts = {};
      }
      f = $.serializeJSON;
      /** @type {string} */
      name = "input[type=checkbox][name]:not(:checked):not([disabled])";
      syncedAnimals = $form.find(name).add($form.filter(name));
      syncedAnimals.each(function(canCreateDiscussions, elem) {
        $el = $(elem);
        uncheckedValue = $el.attr("data-unchecked-value");
        if (uncheckedValue) {
          meta.push({
            name : elem.name,
            value : uncheckedValue
          });
        } else {
          if (!f.isUndefined(opts.checkboxUncheckedValue)) {
            meta.push({
              name : elem.name,
              value : opts.checkboxUncheckedValue
            });
          }
        }
      });
    },
    extractTypeAndNameWithNoType : function(name) {
      var match;
      if (match = name.match(/(.*):([^:]+)$/)) {
        return {
          nameWithNoType : match[1],
          type : match[2]
        };
      } else {
        return {
          nameWithNoType : name,
          type : null
        };
      }
    },
    tryToFindTypeFromDataAttr : function(text, node) {
      var t;
      var r;
      var $this;
      var a;
      t = text.replace(/(:|\.|\[|\]|\s)/g, "\\$1");
      /** @type {string} */
      r = '[name="' + t + '"]';
      $this = node.find(r).add(node.filter(r));
      a = $this.attr("data-value-type");
      return a || null;
    },
    validateType : function(type, path, opts) {
      var i;
      var f;
      f = $.serializeJSON;
      i = f.optionKeys(opts ? opts.typeFunctions : f.defaultOptions.defaultTypes);
      if (!path || i.indexOf(path) !== -1) {
        return true;
      } else {
        throw new Error("serializeJSON ERROR: Invalid type " + path + " found in input name '" + type + "', please use one of " + i.join(", "));
      }
    },
    splitInputNameIntoKeysArray : function(nameWithNoType) {
      var keys;
      var f;
      f = $.serializeJSON;
      keys = nameWithNoType.split("[");
      keys = $.map(keys, function(aShortcut) {
        return aShortcut.replace(/\]/g, "");
      });
      if (keys[0] === "") {
        keys.shift();
      }
      return keys;
    },
    deepSet : function(o, keys, value, opts) {
      var key;
      var nextKey;
      var tail;
      var lastIdx;
      var lastVal;
      var f;
      if (opts == null) {
        opts = {};
      }
      f = $.serializeJSON;
      if (f.isUndefined(o)) {
        throw new Error("ArgumentError: param 'o' expected to be an object or array, found undefined");
      }
      if (!keys || keys.length === 0) {
        throw new Error("ArgumentError: param 'keys' expected to be an array with least one element");
      }
      key = keys[0];
      if (keys.length === 1) {
        if (key === "") {
          o.push(value);
        } else {
          o[key] = value;
        }
      } else {
        nextKey = keys[1];
        if (key === "") {
          /** @type {number} */
          lastIdx = o.length - 1;
          lastVal = o[lastIdx];
          if (f.isObject(lastVal) && (f.isUndefined(lastVal[nextKey]) || keys.length > 2)) {
            /** @type {number} */
            key = lastIdx;
          } else {
            /** @type {number} */
            key = lastIdx + 1;
          }
        }
        if (nextKey === "") {
          if (f.isUndefined(o[key]) || !$.isArray(o[key])) {
            /** @type {!Array} */
            o[key] = [];
          }
        } else {
          if (opts.useIntKeysAsArrayIndex && f.isValidArrayIndex(nextKey)) {
            if (f.isUndefined(o[key]) || !$.isArray(o[key])) {
              /** @type {!Array} */
              o[key] = [];
            }
          } else {
            if (f.isUndefined(o[key]) || !f.isObject(o[key])) {
              o[key] = {};
            }
          }
        }
        tail = keys.slice(1);
        f.deepSet(o[key], tail, value, opts);
      }
    }
  };
});
jQuery.fn.extend({
  everyTime : function(label, fn, where, width) {
    return this.each(function() {
      jQuery.timer.add(this, label, fn, where, width);
    });
  },
  oneTime : function(target, type, fn) {
    return this.each(function() {
      jQuery.timer.add(this, target, type, fn, 1);
    });
  },
  stopTime : function(label, fn) {
    return this.each(function() {
      jQuery.timer.remove(this, label, fn);
    });
  }
});
jQuery.extend({
  timer : {
    global : [],
    guid : 1,
    dataKey : "jQuery.timer",
    regex : /^([0-9]+(?:\.[0-9]*)?)\s*(.*s)?$/,
    powers : {
      "ms" : 1,
      "cs" : 10,
      "ds" : 100,
      "s" : 1000,
      "das" : 10000,
      "hs" : 100000,
      "ks" : 1000000
    },
    timeParse : function(value) {
      if (value == undefined || value == null) {
        return null;
      }
      var result = this.regex.exec(jQuery.trim(value.toString()));
      if (result[2]) {
        /** @type {number} */
        var end = parseFloat(result[1]);
        var t = this.powers[result[2]] || 1;
        return end * t;
      } else {
        return value;
      }
    },
    add : function(type, name, key, fn, times) {
      /** @type {number} */
      var counter = 0;
      if (jQuery.isFunction(key)) {
        if (!times) {
          /** @type {!Object} */
          times = fn;
        }
        /** @type {!Object} */
        fn = key;
        /** @type {!Object} */
        key = name;
      }
      name = jQuery.timer.timeParse(name);
      if (typeof name != "number" || isNaN(name) || name < 0) {
        return;
      }
      if (typeof times != "number" || isNaN(times) || times < 0) {
        /** @type {number} */
        times = 0;
      }
      /** @type {number} */
      times = times || 0;
      var timers = jQuery.data(type, this.dataKey) || jQuery.data(type, this.dataKey, {});
      if (!timers[key]) {
        timers[key] = {};
      }
      fn.timerID = fn.timerID || this.guid++;
      /**
       * @return {undefined}
       */
      var handler = function() {
        if (++counter > times && times !== 0 || fn.call(type, counter) === false) {
          jQuery.timer.remove(type, key, fn);
        }
      };
      handler.timerID = fn.timerID;
      if (!timers[key][fn.timerID]) {
        timers[key][fn.timerID] = window.setInterval(handler, name);
      }
      this.global.push(type);
    },
    remove : function(element, label, fn) {
      var timers = jQuery.data(element, this.dataKey);
      var ret;
      if (timers) {
        if (!label) {
          for (label in timers) {
            this.remove(element, label, fn);
          }
        } else {
          if (timers[label]) {
            if (fn) {
              if (fn.timerID) {
                window.clearInterval(timers[label][fn.timerID]);
                delete timers[label][fn.timerID];
              }
            } else {
              for (fn in timers[label]) {
                window.clearInterval(timers[label][fn]);
                delete timers[label][fn];
              }
            }
            for (ret in timers[label]) {
              break;
            }
            if (!ret) {
              /** @type {null} */
              ret = null;
              delete timers[label];
            }
          }
        }
        for (ret in timers) {
          break;
        }
        if (!ret) {
          jQuery.removeData(element, this.dataKey);
        }
      }
    }
  }
});
jQuery(window).bind("unload", function() {
  jQuery.each(jQuery.timer.global, function(canCreateDiscussions, r) {
    jQuery.timer.remove(r);
  });
});
(function(factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else {
    factory(jQuery);
  }
})(function($) {
  (function() {
    /**
     * @param {!Object} offsets
     * @param {number} width
     * @param {number} height
     * @return {?}
     */
    function getOffsets(offsets, width, height) {
      return [parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1), parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1)];
    }
    /**
     * @param {string} property
     * @param {string} value
     * @return {?}
     */
    function parseCss(property, value) {
      return parseInt($.css(property, value), 10) || 0;
    }
    /**
     * @param {!Object} elem
     * @return {?}
     */
    function getDimensions(elem) {
      var raw = elem[0];
      if (raw.nodeType === 9) {
        return {
          width : elem.width(),
          height : elem.height(),
          offset : {
            top : 0,
            left : 0
          }
        };
      }
      if ($.isWindow(raw)) {
        return {
          width : elem.width(),
          height : elem.height(),
          offset : {
            top : elem.scrollTop(),
            left : elem.scrollLeft()
          }
        };
      }
      if (raw.preventDefault) {
        return {
          width : 0,
          height : 0,
          offset : {
            top : raw.pageY,
            left : raw.pageX
          }
        };
      }
      return {
        width : elem.outerWidth(),
        height : elem.outerHeight(),
        offset : elem.offset()
      };
    }
    $.ui = $.ui || {};
    var result;
    var n;
    /** @type {function(...?): number} */
    var max = Math.max;
    /** @type {function(?): number} */
    var abs = Math.abs;
    /** @type {function(?): number} */
    var round = Math.round;
    /** @type {!RegExp} */
    var rhorizontal = /left|center|right/;
    /** @type {!RegExp} */
    var rvertical = /top|center|bottom/;
    /** @type {!RegExp} */
    var roffset = /[\+\-]\d+(\.[\d]+)?%?/;
    /** @type {!RegExp} */
    var rposition = /^\w+/;
    /** @type {!RegExp} */
    var rpercent = /%$/;
    /** @type {function(!Object): ?} */
    var oldSetupComputes = $.fn.position;
    $.position = {
      scrollbarWidth : function() {
        if (result !== undefined) {
          return result;
        }
        var a;
        var x;
        var div = $("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>");
        var obj = div.children()[0];
        $("body").append(div);
        a = obj.offsetWidth;
        div.css("overflow", "scroll");
        x = obj.offsetWidth;
        if (a === x) {
          x = div[0].clientWidth;
        }
        div.remove();
        return result = a - x;
      },
      getScrollInfo : function(within) {
        var overflowX = within.isWindow || within.isDocument ? "" : within.element.css("overflow-x");
        var overflowY = within.isWindow || within.isDocument ? "" : within.element.css("overflow-y");
        /** @type {boolean} */
        var isLabel = overflowX === "scroll" || overflowX === "auto" && within.width < within.element[0].scrollWidth;
        /** @type {boolean} */
        var appearDelayWidth = overflowY === "scroll" || overflowY === "auto" && within.height < within.element[0].scrollHeight;
        return {
          width : appearDelayWidth ? $.position.scrollbarWidth() : 0,
          height : isLabel ? $.position.scrollbarWidth() : 0
        };
      },
      getWithinInfo : function(element) {
        var withinElement = $(element || window);
        var isWindow = $.isWindow(withinElement[0]);
        /** @type {boolean} */
        var isDocument = !!withinElement[0] && withinElement[0].nodeType === 9;
        return {
          element : withinElement,
          isWindow : isWindow,
          isDocument : isDocument,
          offset : withinElement.offset() || {
            left : 0,
            top : 0
          },
          scrollLeft : withinElement.scrollLeft(),
          scrollTop : withinElement.scrollTop(),
          width : isWindow || isDocument ? withinElement.width() : withinElement.outerWidth(),
          height : isWindow || isDocument ? withinElement.height() : withinElement.outerHeight()
        };
      }
    };
    /**
     * @param {!Object} type
     * @return {?}
     */
    $.fn.position = function(type) {
      if (!type || !type.of) {
        return oldSetupComputes.apply(this, arguments);
      }
      type = $.extend({}, type);
      var atOffset;
      var targetWidth;
      var targetHeight;
      var targetOffset;
      var basePosition;
      var dimensions;
      var target = $(type.of);
      var within = $.position.getWithinInfo(type.within);
      var scrollInfo = $.position.getScrollInfo(within);
      var collision = (type.collision || "flip").split(" ");
      var offsets = {};
      dimensions = getDimensions(target);
      if (target[0].preventDefault) {
        /** @type {string} */
        type.at = "left top";
      }
      targetWidth = dimensions.width;
      targetHeight = dimensions.height;
      targetOffset = dimensions.offset;
      basePosition = $.extend({}, targetOffset);
      $.each(["my", "at"], function() {
        var pos = (type[this] || "").split(" ");
        var ll;
        var e;
        if (pos.length === 1) {
          pos = rhorizontal.test(pos[0]) ? pos.concat(["center"]) : rvertical.test(pos[0]) ? ["center"].concat(pos) : ["center", "center"];
        }
        pos[0] = rhorizontal.test(pos[0]) ? pos[0] : "center";
        pos[1] = rvertical.test(pos[1]) ? pos[1] : "center";
        /** @type {(Array<string>|null)} */
        ll = roffset.exec(pos[0]);
        /** @type {(Array<string>|null)} */
        e = roffset.exec(pos[1]);
        /** @type {!Array} */
        offsets[this] = [ll ? ll[0] : 0, e ? e[0] : 0];
        /** @type {!Array} */
        type[this] = [rposition.exec(pos[0])[0], rposition.exec(pos[1])[0]];
      });
      if (collision.length === 1) {
        collision[1] = collision[0];
      }
      if (type.at[0] === "right") {
        basePosition.left += targetWidth;
      } else {
        if (type.at[0] === "center") {
          basePosition.left += targetWidth / 2;
        }
      }
      if (type.at[1] === "bottom") {
        basePosition.top += targetHeight;
      } else {
        if (type.at[1] === "center") {
          basePosition.top += targetHeight / 2;
        }
      }
      atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
      basePosition.left += atOffset[0];
      basePosition.top += atOffset[1];
      return this.each(function() {
        var collisionPosition;
        var using;
        var self = $(this);
        var elemWidth = self.outerWidth();
        var elemHeight = self.outerHeight();
        var marginLeft = parseCss(this, "marginLeft");
        var marginTop = parseCss(this, "marginTop");
        var collisionWidth = elemWidth + marginLeft + parseCss(this, "marginRight") + scrollInfo.width;
        var collisionHeight = elemHeight + marginTop + parseCss(this, "marginBottom") + scrollInfo.height;
        var position = $.extend({}, basePosition);
        var myOffset = getOffsets(offsets.my, self.outerWidth(), self.outerHeight());
        if (type.my[0] === "right") {
          position.left -= elemWidth;
        } else {
          if (type.my[0] === "center") {
            position.left -= elemWidth / 2;
          }
        }
        if (type.my[1] === "bottom") {
          position.top -= elemHeight;
        } else {
          if (type.my[1] === "center") {
            position.top -= elemHeight / 2;
          }
        }
        position.left += myOffset[0];
        position.top += myOffset[1];
        if (!n) {
          /** @type {number} */
          position.left = round(position.left);
          /** @type {number} */
          position.top = round(position.top);
        }
        collisionPosition = {
          marginLeft : marginLeft,
          marginTop : marginTop
        };
        $.each(["left", "top"], function(i, dir) {
          if ($.ui.position[collision[i]]) {
            $.ui.position[collision[i]][dir](position, {
              targetWidth : targetWidth,
              targetHeight : targetHeight,
              elemWidth : elemWidth,
              elemHeight : elemHeight,
              collisionPosition : collisionPosition,
              collisionWidth : collisionWidth,
              collisionHeight : collisionHeight,
              offset : [atOffset[0] + myOffset[0], atOffset[1] + myOffset[1]],
              my : type.my,
              at : type.at,
              within : within,
              elem : self
            });
          }
        });
        if (type.using) {
          /**
           * @param {?} props
           * @return {undefined}
           */
          using = function(props) {
            /** @type {number} */
            var left = targetOffset.left - position.left;
            /** @type {number} */
            var right = left + targetWidth - elemWidth;
            /** @type {number} */
            var top = targetOffset.top - position.top;
            /** @type {number} */
            var bottom = top + targetHeight - elemHeight;
            var feedback = {
              target : {
                element : target,
                left : targetOffset.left,
                top : targetOffset.top,
                width : targetWidth,
                height : targetHeight
              },
              element : {
                element : self,
                left : position.left,
                top : position.top,
                width : elemWidth,
                height : elemHeight
              },
              horizontal : right < 0 ? "left" : left > 0 ? "right" : "center",
              vertical : bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
            };
            if (targetWidth < elemWidth && abs(left + right) < targetWidth) {
              /** @type {string} */
              feedback.horizontal = "center";
            }
            if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {
              /** @type {string} */
              feedback.vertical = "middle";
            }
            if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {
              /** @type {string} */
              feedback.important = "horizontal";
            } else {
              /** @type {string} */
              feedback.important = "vertical";
            }
            type.using.call(this, props, feedback);
          };
        }
        self.offset($.extend(position, {
          using : using
        }));
      });
    };
    $.ui.position = {
      fit : {
        left : function(type, data) {
          var within = data.within;
          var withinOffset = within.isWindow ? within.scrollLeft : within.offset.left;
          var outerWidth = within.width;
          /** @type {number} */
          var collisionPosLeft = type.left - data.collisionPosition.marginLeft;
          /** @type {number} */
          var overLeft = withinOffset - collisionPosLeft;
          /** @type {number} */
          var overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset;
          var newOverRight;
          if (data.collisionWidth > outerWidth) {
            if (overLeft > 0 && overRight <= 0) {
              /** @type {number} */
              newOverRight = type.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
              type.left += overLeft - newOverRight;
            } else {
              if (overRight > 0 && overLeft <= 0) {
                type.left = withinOffset;
              } else {
                if (overLeft > overRight) {
                  /** @type {number} */
                  type.left = withinOffset + outerWidth - data.collisionWidth;
                } else {
                  type.left = withinOffset;
                }
              }
            }
          } else {
            if (overLeft > 0) {
              type.left += overLeft;
            } else {
              if (overRight > 0) {
                type.left -= overRight;
              } else {
                /** @type {number} */
                type.left = max(type.left - collisionPosLeft, type.left);
              }
            }
          }
        },
        top : function(type, data) {
          var within = data.within;
          var withinOffset = within.isWindow ? within.scrollTop : within.offset.top;
          var outerHeight = data.within.height;
          /** @type {number} */
          var collisionPosTop = type.top - data.collisionPosition.marginTop;
          /** @type {number} */
          var overTop = withinOffset - collisionPosTop;
          /** @type {number} */
          var overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset;
          var newOverBottom;
          if (data.collisionHeight > outerHeight) {
            if (overTop > 0 && overBottom <= 0) {
              /** @type {number} */
              newOverBottom = type.top + overTop + data.collisionHeight - outerHeight - withinOffset;
              type.top += overTop - newOverBottom;
            } else {
              if (overBottom > 0 && overTop <= 0) {
                type.top = withinOffset;
              } else {
                if (overTop > overBottom) {
                  /** @type {number} */
                  type.top = withinOffset + outerHeight - data.collisionHeight;
                } else {
                  type.top = withinOffset;
                }
              }
            }
          } else {
            if (overTop > 0) {
              type.top += overTop;
            } else {
              if (overBottom > 0) {
                type.top -= overBottom;
              } else {
                /** @type {number} */
                type.top = max(type.top - collisionPosTop, type.top);
              }
            }
          }
        }
      },
      flip : {
        left : function(type, data) {
          var within = data.within;
          var withinOffset = within.offset.left + within.scrollLeft;
          var outerWidth = within.width;
          var offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left;
          /** @type {number} */
          var collisionPosLeft = type.left - data.collisionPosition.marginLeft;
          /** @type {number} */
          var overLeft = collisionPosLeft - offsetLeft;
          /** @type {number} */
          var overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft;
          var value = data.my[0] === "left" ? -data.elemWidth : data.my[0] === "right" ? data.elemWidth : 0;
          var prefix = data.at[0] === "left" ? data.targetWidth : data.at[0] === "right" ? -data.targetWidth : 0;
          /** @type {number} */
          var offset = -2 * data.offset[0];
          var newOverRight;
          var newOverLeft;
          if (overLeft < 0) {
            /** @type {number} */
            newOverRight = type.left + value + prefix + offset + data.collisionWidth - outerWidth - withinOffset;
            if (newOverRight < 0 || newOverRight < abs(overLeft)) {
              type.left += value + prefix + offset;
            }
          } else {
            if (overRight > 0) {
              /** @type {number} */
              newOverLeft = type.left - data.collisionPosition.marginLeft + value + prefix + offset - offsetLeft;
              if (newOverLeft > 0 || abs(newOverLeft) < overRight) {
                type.left += value + prefix + offset;
              }
            }
          }
        },
        top : function(type, data) {
          var within = data.within;
          var withinOffset = within.offset.top + within.scrollTop;
          var outerHeight = within.height;
          var offsetTop = within.isWindow ? within.scrollTop : within.offset.top;
          /** @type {number} */
          var collisionPosTop = type.top - data.collisionPosition.marginTop;
          /** @type {number} */
          var overTop = collisionPosTop - offsetTop;
          /** @type {number} */
          var overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop;
          /** @type {boolean} */
          var captionAlignTop = data.my[1] === "top";
          var value = captionAlignTop ? -data.elemHeight : data.my[1] === "bottom" ? data.elemHeight : 0;
          var prefix = data.at[1] === "top" ? data.targetHeight : data.at[1] === "bottom" ? -data.targetHeight : 0;
          /** @type {number} */
          var offset = -2 * data.offset[1];
          var newOverTop;
          var newOverBottom;
          if (overTop < 0) {
            /** @type {number} */
            newOverBottom = type.top + value + prefix + offset + data.collisionHeight - outerHeight - withinOffset;
            if (newOverBottom < 0 || newOverBottom < abs(overTop)) {
              type.top += value + prefix + offset;
            }
          } else {
            if (overBottom > 0) {
              /** @type {number} */
              newOverTop = type.top - data.collisionPosition.marginTop + value + prefix + offset - offsetTop;
              if (newOverTop > 0 || abs(newOverTop) < overBottom) {
                type.top += value + prefix + offset;
              }
            }
          }
        }
      },
      flipfit : {
        left : function() {
          $.ui.position.flip.left.apply(this, arguments);
          $.ui.position.fit.left.apply(this, arguments);
        },
        top : function() {
          $.ui.position.flip.top.apply(this, arguments);
          $.ui.position.fit.top.apply(this, arguments);
        }
      }
    };
    (function() {
      var testElement;
      var testElementParent;
      var testElementStyle;
      var currentSection;
      var i;
      /** @type {!Element} */
      var body = document.getElementsByTagName("body")[0];
      /** @type {!Element} */
      var div = document.createElement("div");
      /** @type {!Element} */
      testElement = document.createElement(body ? "div" : "body");
      testElementStyle = {
        visibility : "hidden",
        width : 0,
        height : 0,
        border : 0,
        margin : 0,
        background : "none"
      };
      if (body) {
        $.extend(testElementStyle, {
          position : "absolute",
          left : "-1000px",
          top : "-1000px"
        });
      }
      for (i in testElementStyle) {
        testElement.style[i] = testElementStyle[i];
      }
      testElement.appendChild(div);
      /** @type {!Element} */
      testElementParent = body || document.documentElement;
      testElementParent.insertBefore(testElement, testElementParent.firstChild);
      /** @type {string} */
      div.style.cssText = "position: absolute; left: 10.7432222px;";
      currentSection = $(div).offset().left;
      /** @type {boolean} */
      n = currentSection > 10 && currentSection < 11;
      /** @type {string} */
      testElement.innerHTML = "";
      testElementParent.removeChild(testElement);
    })();
  })();
  var _ref5$position = $.ui.position;
});
(function(factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery", "../ie", "../version", "../widget"], factory);
  } else {
    factory(jQuery);
  }
})(function($) {
  /** @type {boolean} */
  var t = false;
  $(document).on("mouseup", function() {
    /** @type {boolean} */
    t = false;
  });
  return $.widget("ui.mouse", {
    version : "@VERSION",
    options : {
      cancel : "input, textarea, button, select, option",
      distance : 1,
      delay : 0
    },
    _mouseInit : function() {
      var that = this;
      this.element.on("mousedown." + this.widgetName, function(event) {
        return that._mouseDown(event);
      }).on("click." + this.widgetName, function(event) {
        if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
          $.removeData(event.target, that.widgetName + ".preventClickEvent");
          event.stopImmediatePropagation();
          return false;
        }
      });
      /** @type {boolean} */
      this.started = false;
    },
    _mouseDestroy : function() {
      this.element.off("." + this.widgetName);
      if (this._mouseMoveDelegate) {
        this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate);
      }
    },
    _mouseDown : function(event) {
      if (t) {
        return;
      }
      /** @type {boolean} */
      this._mouseMoved = false;
      if (this._mouseStarted) {
        this._mouseUp(event);
      }
      /** @type {!Event} */
      this._mouseDownEvent = event;
      var that = this;
      /** @type {boolean} */
      var adjustmentNeeded = event.which === 1;
      var setMinMaxZoom = typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false;
      if (!adjustmentNeeded || setMinMaxZoom || !this._mouseCapture(event)) {
        return true;
      }
      /** @type {boolean} */
      this.mouseDelayMet = !this.options.delay;
      if (!this.mouseDelayMet) {
        /** @type {number} */
        this._mouseDelayTimer = setTimeout(function() {
          /** @type {boolean} */
          that.mouseDelayMet = true;
        }, this.options.delay);
      }
      if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
        /** @type {boolean} */
        this._mouseStarted = this._mouseStart(event) !== false;
        if (!this._mouseStarted) {
          event.preventDefault();
          return true;
        }
      }
      if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
        $.removeData(event.target, this.widgetName + ".preventClickEvent");
      }
      /**
       * @param {!Event} event
       * @return {?}
       */
      this._mouseMoveDelegate = function(event) {
        return that._mouseMove(event);
      };
      /**
       * @param {!Event} event
       * @return {?}
       */
      this._mouseUpDelegate = function(event) {
        return that._mouseUp(event);
      };
      this.document.on("mousemove." + this.widgetName, this._mouseMoveDelegate).on("mouseup." + this.widgetName, this._mouseUpDelegate);
      event.preventDefault();
      /** @type {boolean} */
      t = true;
      return true;
    },
    _mouseMove : function(event) {
      if (this._mouseMoved) {
        if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) {
          return this._mouseUp(event);
        } else {
          if (!event.which) {
            if (event.originalEvent.altKey || event.originalEvent.ctrlKey || event.originalEvent.metaKey || event.originalEvent.shiftKey) {
              /** @type {boolean} */
              this.ignoreMissingWhich = true;
            } else {
              if (!this.ignoreMissingWhich) {
                return this._mouseUp(event);
              }
            }
          }
        }
      }
      if (event.which || event.button) {
        /** @type {boolean} */
        this._mouseMoved = true;
      }
      if (this._mouseStarted) {
        this._mouseDrag(event);
        return event.preventDefault();
      }
      if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
        /** @type {boolean} */
        this._mouseStarted = this._mouseStart(this._mouseDownEvent, event) !== false;
        if (this._mouseStarted) {
          this._mouseDrag(event);
        } else {
          this._mouseUp(event);
        }
      }
      return !this._mouseStarted;
    },
    _mouseUp : function(event) {
      this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate);
      if (this._mouseStarted) {
        /** @type {boolean} */
        this._mouseStarted = false;
        if (event.target === this._mouseDownEvent.target) {
          $.data(event.target, this.widgetName + ".preventClickEvent", true);
        }
        this._mouseStop(event);
      }
      if (this._mouseDelayTimer) {
        clearTimeout(this._mouseDelayTimer);
        delete this._mouseDelayTimer;
      }
      /** @type {boolean} */
      this.ignoreMissingWhich = false;
      /** @type {boolean} */
      t = false;
      event.preventDefault();
    },
    _mouseDistanceMet : function(event) {
      return Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance;
    },
    _mouseDelayMet : function() {
      return this.mouseDelayMet;
    },
    _mouseStart : function() {
    },
    _mouseDrag : function() {
    },
    _mouseStop : function() {
    },
    _mouseCapture : function() {
      return true;
    }
  });
});
(function(factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery", "./mouse", "../data", "../plugin", "../safe-active-element", "../safe-blur", "../scroll-parent", "../version", "../widget"], factory);
  } else {
    factory(jQuery);
  }
})(function($) {
  $.widget("ui.draggable", $.ui.mouse, {
    version : "@VERSION",
    widgetEventPrefix : "drag",
    options : {
      addClasses : true,
      appendTo : "parent",
      axis : false,
      connectToSortable : false,
      containment : false,
      cursor : "auto",
      cursorAt : false,
      grid : false,
      handle : false,
      helper : "original",
      iframeFix : false,
      opacity : false,
      refreshPositions : false,
      revert : false,
      revertDuration : 500,
      scope : "default",
      scroll : true,
      scrollSensitivity : 20,
      scrollSpeed : 20,
      snap : false,
      snapMode : "both",
      snapTolerance : 20,
      stack : false,
      zIndex : false,
      drag : null,
      start : null,
      stop : null
    },
    _create : function() {
      if (this.options.helper === "original") {
        this._setPositionRelative();
      }
      if (this.options.addClasses) {
        this._addClass("ui-draggable");
      }
      this._setHandleClassName();
      this._mouseInit();
    },
    _setOption : function(key, value) {
      this._super(key, value);
      if (key === "handle") {
        this._removeHandleClassName();
        this._setHandleClassName();
      }
    },
    _destroy : function() {
      if ((this.helper || this.element).is(".ui-draggable-dragging")) {
        /** @type {boolean} */
        this.destroyOnClear = true;
        return;
      }
      this._removeHandleClassName();
      this._mouseDestroy();
    },
    _mouseCapture : function(event) {
      var o = this.options;
      if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) {
        return false;
      }
      this.handle = this._getHandle(event);
      if (!this.handle) {
        return false;
      }
      this._blurActiveElement(event);
      this._blockFrames(o.iframeFix === true ? "iframe" : o.iframeFix);
      return true;
    },
    _blockFrames : function(selector) {
      this.iframeBlocks = this.document.find(selector).map(function() {
        var $overlayContent = $(this);
        return $("<div>").css("position", "absolute").appendTo($overlayContent.parent()).outerWidth($overlayContent.outerWidth()).outerHeight($overlayContent.outerHeight()).offset($overlayContent.offset())[0];
      });
    },
    _unblockFrames : function() {
      if (this.iframeBlocks) {
        this.iframeBlocks.remove();
        delete this.iframeBlocks;
      }
    },
    _blurActiveElement : function(event) {
      var activeElement = $.ui.safeActiveElement(this.document[0]);
      var target = $(event.target);
      if (target.closest(activeElement).length) {
        return;
      }
      $.ui.safeBlur(activeElement);
    },
    _mouseStart : function(event) {
      var o = this.options;
      this.helper = this._createHelper(event);
      this._addClass(this.helper, "ui-draggable-dragging");
      this._cacheHelperProportions();
      if ($.ui.ddmanager) {
        $.ui.ddmanager.current = this;
      }
      this._cacheMargins();
      this.cssPosition = this.helper.css("position");
      this.scrollParent = this.helper.scrollParent(true);
      this.offsetParent = this.helper.offsetParent();
      /** @type {boolean} */
      this.hasFixedAncestor = this.helper.parents().filter(function() {
        return $(this).css("position") === "fixed";
      }).length > 0;
      this.positionAbs = this.element.offset();
      this._refreshOffsets(event);
      this.originalPosition = this.position = this._generatePosition(event, false);
      this.originalPageX = event.pageX;
      this.originalPageY = event.pageY;
      if (o.cursorAt) {
        this._adjustOffsetFromHelper(o.cursorAt);
      }
      this._setContainment();
      if (this._trigger("start", event) === false) {
        this._clear();
        return false;
      }
      this._cacheHelperProportions();
      if ($.ui.ddmanager && !o.dropBehaviour) {
        $.ui.ddmanager.prepareOffsets(this, event);
      }
      this._mouseDrag(event, true);
      if ($.ui.ddmanager) {
        $.ui.ddmanager.dragStart(this, event);
      }
      return true;
    },
    _refreshOffsets : function(event) {
      this.offset = {
        top : this.positionAbs.top - this.margins.top,
        left : this.positionAbs.left - this.margins.left,
        scroll : false,
        parent : this._getParentOffset(),
        relative : this._getRelativeOffset()
      };
      this.offset.click = {
        left : event.pageX - this.offset.left,
        top : event.pageY - this.offset.top
      };
    },
    _mouseDrag : function(event, noPropagation) {
      if (this.hasFixedAncestor) {
        this.offset.parent = this._getParentOffset();
      }
      this.position = this._generatePosition(event, true);
      this.positionAbs = this._convertPositionTo("absolute");
      if (!noPropagation) {
        var ui = this._uiHash();
        if (this._trigger("drag", event, ui) === false) {
          this._mouseUp(new $.Event("mouseup", event));
          return false;
        }
        this.position = ui.position;
      }
      /** @type {string} */
      this.helper[0].style.left = this.position.left + "px";
      /** @type {string} */
      this.helper[0].style.top = this.position.top + "px";
      if ($.ui.ddmanager) {
        $.ui.ddmanager.drag(this, event);
      }
      return false;
    },
    _mouseStop : function(event) {
      var self = this;
      /** @type {boolean} */
      var dropped = false;
      if ($.ui.ddmanager && !this.options.dropBehaviour) {
        dropped = $.ui.ddmanager.drop(this, event);
      }
      if (this.dropped) {
        dropped = this.dropped;
        /** @type {boolean} */
        this.dropped = false;
      }
      if (this.options.revert === "invalid" && !dropped || this.options.revert === "valid" && dropped || this.options.revert === true || $.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped)) {
        $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
          if (self._trigger("stop", event) !== false) {
            self._clear();
          }
        });
      } else {
        if (this._trigger("stop", event) !== false) {
          this._clear();
        }
      }
      return false;
    },
    _mouseUp : function(event) {
      this._unblockFrames();
      if ($.ui.ddmanager) {
        $.ui.ddmanager.dragStop(this, event);
      }
      if (this.handleElement.is(event.target)) {
        this.element.trigger("focus");
      }
      return $.ui.mouse.prototype._mouseUp.call(this, event);
    },
    cancel : function() {
      if (this.helper.is(".ui-draggable-dragging")) {
        this._mouseUp(new $.Event("mouseup", {
          target : this.element[0]
        }));
      } else {
        this._clear();
      }
      return this;
    },
    _getHandle : function(event) {
      return this.options.handle ? !!$(event.target).closest(this.element.find(this.options.handle)).length : true;
    },
    _setHandleClassName : function() {
      this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element;
      this._addClass(this.handleElement, "ui-draggable-handle");
    },
    _removeHandleClassName : function() {
      this._removeClass(this.handleElement, "ui-draggable-handle");
    },
    _createHelper : function(event) {
      var o = this.options;
      var helperIsFunction = $.isFunction(o.helper);
      var helper = helperIsFunction ? $(o.helper.apply(this.element[0], [event])) : o.helper === "clone" ? this.element.clone().removeAttr("id") : this.element;
      if (!helper.parents("body").length) {
        helper.appendTo(o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo);
      }
      if (helperIsFunction && helper[0] === this.element[0]) {
        this._setPositionRelative();
      }
      if (helper[0] !== this.element[0] && !/(fixed|absolute)/.test(helper.css("position"))) {
        helper.css("position", "absolute");
      }
      return helper;
    },
    _setPositionRelative : function() {
      if (!/^(?:r|a|f)/.test(this.element.css("position"))) {
        /** @type {string} */
        this.element[0].style.position = "relative";
      }
    },
    _adjustOffsetFromHelper : function(obj) {
      if (typeof obj === "string") {
        /** @type {!Array<string>} */
        obj = obj.split(" ");
      }
      if ($.isArray(obj)) {
        obj = {
          left : +obj[0],
          top : +obj[1] || 0
        };
      }
      if ("left" in obj) {
        this.offset.click.left = obj.left + this.margins.left;
      }
      if ("right" in obj) {
        this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
      }
      if ("top" in obj) {
        this.offset.click.top = obj.top + this.margins.top;
      }
      if ("bottom" in obj) {
        this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
      }
    },
    _isRootNode : function(element) {
      return /(html|body)/i.test(element.tagName) || element === this.document[0];
    },
    _getParentOffset : function() {
      var cssStart = this.offsetParent.offset();
      var document = this.document[0];
      if (this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
        cssStart.left += this.scrollParent.scrollLeft();
        cssStart.top += this.scrollParent.scrollTop();
      }
      if (this._isRootNode(this.offsetParent[0])) {
        cssStart = {
          top : 0,
          left : 0
        };
      }
      return {
        top : cssStart.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
        left : cssStart.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
      };
    },
    _getRelativeOffset : function() {
      if (this.cssPosition !== "relative") {
        return {
          top : 0,
          left : 0
        };
      }
      var anchorBoundingBoxViewport = this.element.position();
      var scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
      return {
        top : anchorBoundingBoxViewport.top - (parseInt(this.helper.css("top"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollTop() : 0),
        left : anchorBoundingBoxViewport.left - (parseInt(this.helper.css("left"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollLeft() : 0)
      };
    },
    _cacheMargins : function() {
      this.margins = {
        left : parseInt(this.element.css("marginLeft"), 10) || 0,
        top : parseInt(this.element.css("marginTop"), 10) || 0,
        right : parseInt(this.element.css("marginRight"), 10) || 0,
        bottom : parseInt(this.element.css("marginBottom"), 10) || 0
      };
    },
    _cacheHelperProportions : function() {
      this.helperProportions = {
        width : this.helper.outerWidth(),
        height : this.helper.outerHeight()
      };
    },
    _setContainment : function() {
      var over;
      var c;
      var ce;
      var o = this.options;
      var document = this.document[0];
      /** @type {null} */
      this.relativeContainer = null;
      if (!o.containment) {
        /** @type {null} */
        this.containment = null;
        return;
      }
      if (o.containment === "window") {
        /** @type {!Array} */
        this.containment = [$(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, $(window).scrollLeft() + $(window).width() - this.helperProportions.width - this.margins.left, $(window).scrollTop() + ($(window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
        return;
      }
      if (o.containment === "document") {
        /** @type {!Array} */
        this.containment = [0, 0, $(document).width() - this.helperProportions.width - this.margins.left, ($(document).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
        return;
      }
      if (o.containment.constructor === Array) {
        this.containment = o.containment;
        return;
      }
      if (o.containment === "parent") {
        o.containment = this.helper[0].parentNode;
      }
      c = $(o.containment);
      ce = c[0];
      if (!ce) {
        return;
      }
      /** @type {boolean} */
      over = /(scroll|auto)/.test(c.css("overflow"));
      /** @type {!Array} */
      this.containment = [(parseInt(c.css("borderLeftWidth"), 10) || 0) + (parseInt(c.css("paddingLeft"), 10) || 0), (parseInt(c.css("borderTopWidth"), 10) || 0) + (parseInt(c.css("paddingTop"), 10) || 0), (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt(c.css("borderRightWidth"), 10) || 0) - (parseInt(c.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - 
      (parseInt(c.css("borderBottomWidth"), 10) || 0) - (parseInt(c.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom];
      this.relativeContainer = c;
    },
    _convertPositionTo : function(d, pos) {
      if (!pos) {
        pos = this.position;
      }
      /** @type {number} */
      var mod = d === "absolute" ? 1 : -1;
      var scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
      return {
        top : pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - (this.cssPosition === "fixed" ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top) * mod,
        left : pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - (this.cssPosition === "fixed" ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left) * mod
      };
    },
    _generatePosition : function(event, constrainPosition) {
      var containment;
      var co;
      var top;
      var left;
      var options = this.options;
      var scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
      var pageX = event.pageX;
      var pageY = event.pageY;
      if (!scrollIsRootNode || !this.offset.scroll) {
        this.offset.scroll = {
          top : this.scrollParent.scrollTop(),
          left : this.scrollParent.scrollLeft()
        };
      }
      if (constrainPosition) {
        if (this.containment) {
          if (this.relativeContainer) {
            co = this.relativeContainer.offset();
            /** @type {!Array} */
            containment = [this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top];
          } else {
            containment = this.containment;
          }
          if (event.pageX - this.offset.click.left < containment[0]) {
            pageX = containment[0] + this.offset.click.left;
          }
          if (event.pageY - this.offset.click.top < containment[1]) {
            pageY = containment[1] + this.offset.click.top;
          }
          if (event.pageX - this.offset.click.left > containment[2]) {
            pageX = containment[2] + this.offset.click.left;
          }
          if (event.pageY - this.offset.click.top > containment[3]) {
            pageY = containment[3] + this.offset.click.top;
          }
        }
        if (options.grid) {
          top = options.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / options.grid[1]) * options.grid[1] : this.originalPageY;
          pageY = containment ? top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3] ? top : top - this.offset.click.top >= containment[1] ? top - options.grid[1] : top + options.grid[1] : top;
          left = options.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / options.grid[0]) * options.grid[0] : this.originalPageX;
          pageX = containment ? left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2] ? left : left - this.offset.click.left >= containment[0] ? left - options.grid[0] : left + options.grid[0] : left;
        }
        if (options.axis === "y") {
          pageX = this.originalPageX;
        }
        if (options.axis === "x") {
          pageY = this.originalPageY;
        }
      }
      return {
        top : pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (this.cssPosition === "fixed" ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top),
        left : pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (this.cssPosition === "fixed" ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left)
      };
    },
    _clear : function() {
      this._removeClass(this.helper, "ui-draggable-dragging");
      if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
        this.helper.remove();
      }
      /** @type {null} */
      this.helper = null;
      /** @type {boolean} */
      this.cancelHelperRemoval = false;
      if (this.destroyOnClear) {
        this.destroy();
      }
    },
    _trigger : function(type, key, data) {
      data = data || this._uiHash();
      $.ui.plugin.call(this, type, [key, data, this], true);
      if (/^(drag|start|stop)/.test(type)) {
        this.positionAbs = this._convertPositionTo("absolute");
        data.offset = this.positionAbs;
      }
      return $.Widget.prototype._trigger.call(this, type, key, data);
    },
    plugins : {},
    _uiHash : function() {
      return {
        helper : this.helper,
        position : this.position,
        originalPosition : this.originalPosition,
        offset : this.positionAbs
      };
    }
  });
  return $.ui.draggable;
});
(function(factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery", "./mouse", "../keycode", "../version", "../widget"], factory);
  } else {
    factory(jQuery);
  }
})(function($) {
  return $.widget("ui.slider", $.ui.mouse, {
    version : "@VERSION",
    widgetEventPrefix : "slide",
    options : {
      animate : false,
      classes : {
        "ui-slider" : "ui-corner-all",
        "ui-slider-handle" : "ui-corner-all",
        "ui-slider-range" : "ui-corner-all ui-widget-header"
      },
      distance : 0,
      max : 100,
      min : 0,
      orientation : "horizontal",
      range : false,
      step : 1,
      value : 0,
      values : null,
      change : null,
      slide : null,
      start : null,
      stop : null
    },
    numPages : 5,
    _create : function() {
      /** @type {boolean} */
      this._keySliding = false;
      /** @type {boolean} */
      this._mouseSliding = false;
      /** @type {boolean} */
      this._animateOff = true;
      /** @type {null} */
      this._handleIndex = null;
      this._detectOrientation();
      this._mouseInit();
      this._calculateNewMax();
      this._addClass("ui-slider ui-slider-" + this.orientation, "ui-widget ui-widget-content");
      this._refresh();
      /** @type {boolean} */
      this._animateOff = false;
    },
    _refresh : function() {
      this._createRange();
      this._createHandles();
      this._setupEvents();
      this._refreshValue();
    },
    _createHandles : function() {
      var q;
      var t;
      var opts = this.options;
      var s = this.element.find(".ui-slider-handle");
      /** @type {string} */
      var serieObject = "<span tabindex='0'></span>";
      /** @type {!Array} */
      var n = [];
      t = opts.values && opts.values.length || 1;
      if (s.length > t) {
        s.slice(t).remove();
        s = s.slice(0, t);
      }
      q = s.length;
      for (; q < t; q++) {
        n.push(serieObject);
      }
      this.handles = s.add($(n.join("")).appendTo(this.element));
      this._addClass(this.handles, "ui-slider-handle", "ui-state-default");
      this.handle = this.handles.eq(0);
      this.handles.each(function(e) {
        $(this).data("ui-slider-handle-index", e).attr("tabIndex", 0);
      });
    },
    _createRange : function() {
      var o = this.options;
      if (o.range) {
        if (o.range === true) {
          if (!o.values) {
            /** @type {!Array} */
            o.values = [this._valueMin(), this._valueMin()];
          } else {
            if (o.values.length && o.values.length !== 2) {
              /** @type {!Array} */
              o.values = [o.values[0], o.values[0]];
            } else {
              if ($.isArray(o.values)) {
                o.values = o.values.slice(0);
              }
            }
          }
        }
        if (!this.range || !this.range.length) {
          this.range = $("<div>").appendTo(this.element);
          this._addClass(this.range, "ui-slider-range");
        } else {
          this._removeClass(this.range, "ui-slider-range-min ui-slider-range-max");
          this.range.css({
            "left" : "",
            "bottom" : ""
          });
        }
        if (o.range === "min" || o.range === "max") {
          this._addClass(this.range, "ui-slider-range-" + o.range);
        }
      } else {
        if (this.range) {
          this.range.remove();
        }
        /** @type {null} */
        this.range = null;
      }
    },
    _setupEvents : function() {
      this._off(this.handles);
      this._hoverable(this.handles);
      this._focusable(this.handles);
    },
    _destroy : function() {
      this.handles.remove();
      if (this.range) {
        this.range.remove();
      }
      this._mouseDestroy();
    },
    _mouseCapture : function(event) {
      var position;
      var normValue;
      var y;
      var element;
      var index;
      var allowed;
      var gamePos;
      var mouseOverHandle;
      var that = this;
      var o = this.options;
      if (o.disabled) {
        return false;
      }
      this.elementSize = {
        width : this.element.outerWidth(),
        height : this.element.outerHeight()
      };
      this.elementOffset = this.element.offset();
      position = {
        x : event.pageX,
        y : event.pageY
      };
      normValue = this._normValueFromMouse(position);
      /** @type {number} */
      y = this._valueMax() - this._valueMin() + 1;
      this.handles.each(function(i) {
        /** @type {number} */
        var y0 = Math.abs(normValue - that.values(i));
        if (y > y0 || y === y0 && (i === that._lastChangedValue || that.values(i) === o.min)) {
          /** @type {number} */
          y = y0;
          element = $(this);
          /** @type {string} */
          index = i;
        }
      });
      allowed = this._start(event, index);
      if (allowed === false) {
        return false;
      }
      /** @type {boolean} */
      this._mouseSliding = true;
      this._handleIndex = index;
      this._addClass(element, null, "ui-state-active");
      element.trigger("focus");
      gamePos = element.offset();
      /** @type {boolean} */
      mouseOverHandle = !$(event.target).parents().addBack().is(".ui-slider-handle");
      /** @type {({left: number, top: number})} */
      this._clickOffset = mouseOverHandle ? {
        left : 0,
        top : 0
      } : {
        left : event.pageX - gamePos.left - element.width() / 2,
        top : event.pageY - gamePos.top - element.height() / 2 - (parseInt(element.css("borderTopWidth"), 10) || 0) - (parseInt(element.css("borderBottomWidth"), 10) || 0) + (parseInt(element.css("marginTop"), 10) || 0)
      };
      if (!this.handles.hasClass("ui-state-hover")) {
        this._slide(event, index, normValue);
      }
      /** @type {boolean} */
      this._animateOff = true;
      return true;
    },
    _mouseStart : function() {
      return true;
    },
    _mouseDrag : function(event) {
      var position = {
        x : event.pageX,
        y : event.pageY
      };
      var normValue = this._normValueFromMouse(position);
      this._slide(event, this._handleIndex, normValue);
      return false;
    },
    _mouseStop : function(event) {
      this._removeClass(this.handles, null, "ui-state-active");
      /** @type {boolean} */
      this._mouseSliding = false;
      this._stop(event, this._handleIndex);
      this._change(event, this._handleIndex);
      /** @type {null} */
      this._handleIndex = null;
      /** @type {null} */
      this._clickOffset = null;
      /** @type {boolean} */
      this._animateOff = false;
      return false;
    },
    _detectOrientation : function() {
      /** @type {string} */
      this.orientation = this.options.orientation === "vertical" ? "vertical" : "horizontal";
    },
    _normValueFromMouse : function(position) {
      var pixelTotal;
      var pixelMouse;
      var percentMouse;
      var valueTotal;
      var valueMouse;
      if (this.orientation === "horizontal") {
        pixelTotal = this.elementSize.width;
        /** @type {number} */
        pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);
      } else {
        pixelTotal = this.elementSize.height;
        /** @type {number} */
        pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);
      }
      /** @type {number} */
      percentMouse = pixelMouse / pixelTotal;
      if (percentMouse > 1) {
        /** @type {number} */
        percentMouse = 1;
      }
      if (percentMouse < 0) {
        /** @type {number} */
        percentMouse = 0;
      }
      if (this.orientation === "vertical") {
        /** @type {number} */
        percentMouse = 1 - percentMouse;
      }
      /** @type {number} */
      valueTotal = this._valueMax() - this._valueMin();
      valueMouse = this._valueMin() + percentMouse * valueTotal;
      return this._trimAlignValue(valueMouse);
    },
    _uiHash : function(index, value, values) {
      var uiHash = {
        handle : this.handles[index],
        handleIndex : index,
        value : value !== undefined ? value : this.value()
      };
      if (this._hasMultipleValues()) {
        uiHash.value = value !== undefined ? value : this.values(index);
        uiHash.values = values || this.values();
      }
      return uiHash;
    },
    _hasMultipleValues : function() {
      return this.options.values && this.options.values.length;
    },
    _start : function(e, index) {
      return this._trigger("start", e, this._uiHash(index));
    },
    _slide : function(event, index, value) {
      var allowed;
      var otherVal;
      var currentValue = this.value();
      var newValues = this.values();
      if (this._hasMultipleValues()) {
        otherVal = this.values(index ? 0 : 1);
        currentValue = this.values(index);
        if (this.options.values.length === 2 && this.options.range === true) {
          /** @type {number} */
          value = index === 0 ? Math.min(otherVal, value) : Math.max(otherVal, value);
        }
        /** @type {string} */
        newValues[index] = value;
      }
      if (value === currentValue) {
        return;
      }
      allowed = this._trigger("slide", event, this._uiHash(index, value, newValues));
      if (allowed === false) {
        return;
      }
      if (this._hasMultipleValues()) {
        this.values(index, value);
      } else {
        this.value(value);
      }
    },
    _stop : function(e, index) {
      this._trigger("stop", e, this._uiHash(index));
    },
    _change : function(e, index) {
      if (!this._keySliding && !this._mouseSliding) {
        /** @type {!Object} */
        this._lastChangedValue = index;
        this._trigger("change", e, this._uiHash(index));
      }
    },
    value : function(type) {
      if (arguments.length) {
        this.options.value = this._trimAlignValue(type);
        this._refreshValue();
        this._change(null, 0);
        return;
      }
      return this._value();
    },
    values : function(type, name) {
      var vals;
      var newValues;
      var i;
      if (arguments.length > 1) {
        this.options.values[type] = this._trimAlignValue(name);
        this._refreshValue();
        this._change(null, type);
        return;
      }
      if (arguments.length) {
        if ($.isArray(arguments[0])) {
          vals = this.options.values;
          newValues = arguments[0];
          /** @type {number} */
          i = 0;
          for (; i < vals.length; i = i + 1) {
            vals[i] = this._trimAlignValue(newValues[i]);
            this._change(null, i);
          }
          this._refreshValue();
        } else {
          if (this._hasMultipleValues()) {
            return this._values(type);
          } else {
            return this.value();
          }
        }
      } else {
        return this._values();
      }
    },
    _setOption : function(key, value) {
      var i;
      /** @type {number} */
      var curvedSegmentsLength = 0;
      if (key === "range" && this.options.range === true) {
        if (value === "min") {
          this.options.value = this._values(0);
          /** @type {null} */
          this.options.values = null;
        } else {
          if (value === "max") {
            this.options.value = this._values(this.options.values.length - 1);
            /** @type {null} */
            this.options.values = null;
          }
        }
      }
      if ($.isArray(this.options.values)) {
        curvedSegmentsLength = this.options.values.length;
      }
      this._super(key, value);
      switch(key) {
        case "orientation":
          this._detectOrientation();
          this._removeClass("ui-slider-horizontal ui-slider-vertical")._addClass("ui-slider-" + this.orientation);
          this._refreshValue();
          if (this.options.range) {
            this._refreshRange(value);
          }
          this.handles.css(value === "horizontal" ? "bottom" : "left", "");
          break;
        case "value":
          /** @type {boolean} */
          this._animateOff = true;
          this._refreshValue();
          this._change(null, 0);
          /** @type {boolean} */
          this._animateOff = false;
          break;
        case "values":
          /** @type {boolean} */
          this._animateOff = true;
          this._refreshValue();
          /** @type {number} */
          i = curvedSegmentsLength - 1;
          for (; i >= 0; i--) {
            this._change(null, i);
          }
          /** @type {boolean} */
          this._animateOff = false;
          break;
        case "step":
        case "min":
        case "max":
          /** @type {boolean} */
          this._animateOff = true;
          this._calculateNewMax();
          this._refreshValue();
          /** @type {boolean} */
          this._animateOff = false;
          break;
        case "range":
          /** @type {boolean} */
          this._animateOff = true;
          this._refresh();
          /** @type {boolean} */
          this._animateOff = false;
          break;
      }
    },
    _setOptionDisabled : function(value) {
      this._super(value);
      this._toggleClass(null, "ui-state-disabled", !!value);
    },
    _value : function() {
      var val = this.options.value;
      val = this._trimAlignValue(val);
      return val;
    },
    _values : function(key) {
      var val;
      var vals;
      var i;
      if (arguments.length) {
        val = this.options.values[key];
        val = this._trimAlignValue(val);
        return val;
      } else {
        if (this._hasMultipleValues()) {
          vals = this.options.values.slice();
          /** @type {number} */
          i = 0;
          for (; i < vals.length; i = i + 1) {
            vals[i] = this._trimAlignValue(vals[i]);
          }
          return vals;
        } else {
          return [];
        }
      }
    },
    _trimAlignValue : function(val) {
      if (val <= this._valueMin()) {
        return this._valueMin();
      }
      if (val >= this._valueMax()) {
        return this._valueMax();
      }
      var step = this.options.step > 0 ? this.options.step : 1;
      /** @type {number} */
      var valModStep = (val - this._valueMin()) % step;
      /** @type {number} */
      var alignValue = val - valModStep;
      if (Math.abs(valModStep) * 2 >= step) {
        alignValue = alignValue + (valModStep > 0 ? step : -step);
      }
      return parseFloat(alignValue.toFixed(5));
    },
    _calculateNewMax : function() {
      var max = this.options.max;
      var min = this._valueMin();
      var step = this.options.step;
      /** @type {number} */
      var aboveMin = Math.round((max - min) / step) * step;
      max = aboveMin + min;
      if (max > this.options.max) {
        /** @type {number} */
        max = max - step;
      }
      /** @type {number} */
      this.max = parseFloat(max.toFixed(this._precision()));
    },
    _precision : function() {
      var precision = this._precisionOf(this.options.step);
      if (this.options.min !== null) {
        /** @type {number} */
        precision = Math.max(precision, this._precisionOf(this.options.min));
      }
      return precision;
    },
    _precisionOf : function(num) {
      var bases = num.toString();
      var t = bases.indexOf(".");
      return t === -1 ? 0 : bases.length - t - 1;
    },
    _valueMin : function() {
      return this.options.min;
    },
    _valueMax : function() {
      return this.max;
    },
    _refreshRange : function(orientation) {
      if (orientation === "vertical") {
        this.range.css({
          "width" : "",
          "left" : ""
        });
      }
      if (orientation === "horizontal") {
        this.range.css({
          "height" : "",
          "bottom" : ""
        });
      }
    },
    _refreshValue : function() {
      var prev_val;
      var val;
      var value;
      var valueMin;
      var valueMax;
      var oRange = this.options.range;
      var o = this.options;
      var self = this;
      var animate = !this._animateOff ? o.animate : false;
      var style = {};
      if (this._hasMultipleValues()) {
        this.handles.each(function(n) {
          /** @type {number} */
          val = (self.values(n) - self._valueMin()) / (self._valueMax() - self._valueMin()) * 100;
          /** @type {string} */
          style[self.orientation === "horizontal" ? "left" : "bottom"] = val + "%";
          $(this).stop(1, 1)[animate ? "animate" : "css"](style, o.animate);
          if (self.options.range === true) {
            if (self.orientation === "horizontal") {
              if (n === 0) {
                self.range.stop(1, 1)[animate ? "animate" : "css"]({
                  left : val + "%"
                }, o.animate);
              }
              if (n === 1) {
                self.range[animate ? "animate" : "css"]({
                  width : val - prev_val + "%"
                }, {
                  queue : false,
                  duration : o.animate
                });
              }
            } else {
              if (n === 0) {
                self.range.stop(1, 1)[animate ? "animate" : "css"]({
                  bottom : val + "%"
                }, o.animate);
              }
              if (n === 1) {
                self.range[animate ? "animate" : "css"]({
                  height : val - prev_val + "%"
                }, {
                  queue : false,
                  duration : o.animate
                });
              }
            }
          }
          /** @type {number} */
          prev_val = val;
        });
      } else {
        value = this.value();
        valueMin = this._valueMin();
        valueMax = this._valueMax();
        /** @type {number} */
        val = valueMax !== valueMin ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;
        style[this.orientation === "horizontal" ? "left" : "bottom"] = val + "%";
        this.handle.stop(1, 1)[animate ? "animate" : "css"](style, o.animate);
        if (oRange === "min" && this.orientation === "horizontal") {
          this.range.stop(1, 1)[animate ? "animate" : "css"]({
            width : val + "%"
          }, o.animate);
        }
        if (oRange === "max" && this.orientation === "horizontal") {
          this.range.stop(1, 1)[animate ? "animate" : "css"]({
            width : 100 - val + "%"
          }, o.animate);
        }
        if (oRange === "min" && this.orientation === "vertical") {
          this.range.stop(1, 1)[animate ? "animate" : "css"]({
            height : val + "%"
          }, o.animate);
        }
        if (oRange === "max" && this.orientation === "vertical") {
          this.range.stop(1, 1)[animate ? "animate" : "css"]({
            height : 100 - val + "%"
          }, o.animate);
        }
      }
    }
  });
});
(function(window, factory) {
  if (typeof define === "function" && define.amd) {
    define(factory);
  } else {
    if (typeof exports === "object") {
      module.exports = factory();
    } else {
      window.NProgress = factory();
    }
  }
})(this, function() {
  /**
   * @param {number} index
   * @param {number} len
   * @param {number} num
   * @return {?}
   */
  function clamp(index, len, num) {
    if (index < len) {
      return len;
    }
    if (index > num) {
      return num;
    }
    return index;
  }
  /**
   * @param {number} n
   * @return {?}
   */
  function toBarPerc(n) {
    return (-1 + n) * 100;
  }
  /**
   * @param {number} n
   * @param {number} speed
   * @param {string} ease
   * @return {?}
   */
  function barPositionCSS(n, speed, ease) {
    var barCSS;
    if (Settings.positionUsing === "translate3d") {
      barCSS = {
        transform : "translate3d(" + toBarPerc(n) + "%,0,0)"
      };
    } else {
      if (Settings.positionUsing === "translate") {
        barCSS = {
          transform : "translate(" + toBarPerc(n) + "%,0)"
        };
      } else {
        barCSS = {
          "margin-left" : toBarPerc(n) + "%"
        };
      }
    }
    /** @type {string} */
    barCSS.transition = "all " + speed + "ms " + ease;
    return barCSS;
  }
  /**
   * @param {(Object|string)} element
   * @param {string} name
   * @return {?}
   */
  function hasClass(element, name) {
    var files = typeof element == "string" ? element : classList(element);
    return files.indexOf(" " + name + " ") >= 0;
  }
  /**
   * @param {!Element} element
   * @param {string} name
   * @return {undefined}
   */
  function addClass(element, name) {
    var oldList = classList(element);
    var newList = oldList + name;
    if (hasClass(oldList, name)) {
      return;
    }
    element.className = newList.substring(1);
  }
  /**
   * @param {!Object} el
   * @param {string} name
   * @return {undefined}
   */
  function removeClass(el, name) {
    var list = classList(el);
    var micropost;
    if (!hasClass(el, name)) {
      return;
    }
    micropost = list.replace(" " + name + " ", " ");
    el.className = micropost.substring(1, micropost.length - 1);
  }
  /**
   * @param {!Object} element
   * @return {?}
   */
  function classList(element) {
    return (" " + (element && element.className || "") + " ").replace(/\s+/gi, " ");
  }
  /**
   * @param {!Object} t
   * @return {undefined}
   */
  function f(t) {
    if (t && t.parentNode) {
      t.parentNode.removeChild(t);
    }
  }
  var NProgress = {};
  /** @type {string} */
  NProgress.version = "0.2.0";
  var Settings = NProgress.settings = {
    minimum : 0.995,
    easing : "linear",
    positionUsing : "",
    speed : 1600,
    trickle : false,
    trickleSpeed : 50,
    showSpinner : false,
    barSelector : '[role="bar"]',
    spinnerSelector : '[role="spinner"]',
    parent : "body",
    template : '<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'
  };
  /**
   * @param {(Object|string)} option
   * @return {?}
   */
  NProgress.configure = function(option) {
    var key;
    var value;
    for (key in option) {
      value = option[key];
      if (value !== undefined && option.hasOwnProperty(key)) {
        Settings[key] = value;
      }
    }
    return this;
  };
  /** @type {null} */
  NProgress.status = null;
  /**
   * @param {number} type
   * @return {?}
   */
  NProgress.set = function(type) {
    var started = NProgress.isStarted();
    type = clamp(type, Settings.minimum, 1);
    NProgress.status = type === 1 ? null : type;
    var progress = NProgress.render(!started);
    var pathLocContainer = progress.querySelector(Settings.barSelector);
    /** @type {number} */
    var speed = Settings.speed;
    /** @type {string} */
    var ease = Settings.easing;
    /** @type {number} */
    speed = type == 1 ? 200 : speed;
    progress.offsetWidth;
    s_SPLICE(function(s) {
      if (Settings.positionUsing === "") {
        Settings.positionUsing = NProgress.getPositioningCSS();
      }
      css(pathLocContainer, barPositionCSS(type, speed, ease));
      if (type === 1) {
        css(progress, {
          transition : "none",
          opacity : 1
        });
        progress.offsetWidth;
        setTimeout(function() {
          css(progress, {
            transition : "all " + speed + "ms linear",
            opacity : 0
          });
          setTimeout(function() {
            NProgress.remove();
            s();
          }, speed);
        }, speed);
      } else {
        setTimeout(s, speed);
      }
    });
    return this;
  };
  /**
   * @return {?}
   */
  NProgress.isStarted = function() {
    return typeof NProgress.status === "number";
  };
  /**
   * @return {?}
   */
  NProgress.start = function() {
    if (!NProgress.status) {
      NProgress.set(0);
    }
    /**
     * @return {undefined}
     */
    var work = function() {
      setTimeout(function() {
        if (!NProgress.status) {
          return;
        }
        NProgress.trickle();
        work();
      }, Settings.trickleSpeed);
    };
    if (Settings.trickle) {
      work();
    }
    return this;
  };
  /**
   * @param {string} type
   * @return {?}
   */
  NProgress.done = function(type) {
    if (!type && !NProgress.status) {
      return this;
    }
    return NProgress.inc(0.3 + 0.5 * Math.random()).set(1);
  };
  /**
   * @param {number} amount
   * @return {?}
   */
  NProgress.inc = function(amount) {
    var n = NProgress.status;
    if (!n) {
      return NProgress.start();
    } else {
      if (n > 1) {
        return;
      } else {
        if (typeof amount !== "number") {
          if (n >= 0 && n < 0.2) {
            /** @type {number} */
            amount = 0.1;
          } else {
            if (n >= 0.2 && n < 0.5) {
              /** @type {number} */
              amount = 0.04;
            } else {
              if (n >= 0.5 && n < 0.8) {
                /** @type {number} */
                amount = 0.02;
              } else {
                if (n >= 0.8 && n < 0.99) {
                  /** @type {number} */
                  amount = 0.005;
                } else {
                  /** @type {number} */
                  amount = 0;
                }
              }
            }
          }
        }
        n = clamp(n + amount, 0, 0.994);
        return NProgress.set(n);
      }
    }
  };
  /**
   * @return {?}
   */
  NProgress.trickle = function() {
    return NProgress.inc();
  };
  (function() {
    /** @type {number} */
    var initial = 0;
    /** @type {number} */
    var current = 0;
    /**
     * @param {!Object} obj
     * @return {?}
     */
    NProgress.promise = function(obj) {
      if (!obj || obj.state() === "resolved") {
        return this;
      }
      if (current === 0) {
        NProgress.start();
      }
      initial++;
      current++;
      obj.always(function() {
        current--;
        if (current === 0) {
          /** @type {number} */
          initial = 0;
          NProgress.done();
        } else {
          NProgress.set((initial - current) / initial);
        }
      });
      return this;
    };
  })();
  /**
   * @param {boolean} fromStart
   * @return {?}
   */
  NProgress.render = function(fromStart) {
    if (NProgress.isRendered()) {
      return document.getElementById("nprogress");
    }
    addClass(document.documentElement, "nprogress-busy");
    /** @type {!Element} */
    var progress = document.createElement("div");
    /** @type {string} */
    progress.id = "nprogress";
    /** @type {string} */
    progress.innerHTML = Settings.template;
    /** @type {(Element|null)} */
    var pathLocContainer = progress.querySelector(Settings.barSelector);
    var perc = fromStart ? "-100" : toBarPerc(NProgress.status || 0);
    /** @type {(Element|null)} */
    var parent = document.querySelector(Settings.parent);
    var a;
    css(pathLocContainer, {
      transition : "all 0 linear",
      transform : "translate3d(" + perc + "%,0,0)"
    });
    if (!Settings.showSpinner) {
      /** @type {(Element|null)} */
      a = progress.querySelector(Settings.spinnerSelector);
      if (a) {
        f(a);
      }
    }
    if (parent != document.body) {
      addClass(parent, "nprogress-custom-parent");
    }
    parent.appendChild(progress);
    return progress;
  };
  /**
   * @return {undefined}
   */
  NProgress.remove = function() {
    removeClass(document.documentElement, "nprogress-busy");
    removeClass(document.querySelector(Settings.parent), "nprogress-custom-parent");
    /** @type {(Element|null)} */
    var progress = document.getElementById("nprogress");
    if (progress) {
      f(progress);
    }
  };
  /**
   * @return {?}
   */
  NProgress.isRendered = function() {
    return !!document.getElementById("nprogress");
  };
  /**
   * @return {?}
   */
  NProgress.getPositioningCSS = function() {
    /** @type {!CSSStyleDeclaration} */
    var bodyStyle = document.body.style;
    /** @type {string} */
    var vendorPrefix = "WebkitTransform" in bodyStyle ? "Webkit" : "MozTransform" in bodyStyle ? "Moz" : "msTransform" in bodyStyle ? "ms" : "OTransform" in bodyStyle ? "O" : "";
    if (vendorPrefix + "Perspective" in bodyStyle) {
      return "translate3d";
    } else {
      if (vendorPrefix + "Transform" in bodyStyle) {
        return "translate";
      } else {
        return "margin";
      }
    }
  };
  var s_SPLICE = function() {
    /**
     * @return {undefined}
     */
    function next() {
      var shift = _sizeAnimateTimeStamps.shift();
      if (shift) {
        shift(next);
      }
    }
    /** @type {!Array} */
    var _sizeAnimateTimeStamps = [];
    return function(bone_in) {
      _sizeAnimateTimeStamps.push(bone_in);
      if (_sizeAnimateTimeStamps.length == 1) {
        next();
      }
    };
  }();
  var css = function() {
    /**
     * @param {string} string
     * @return {?}
     */
    function camelCase(string) {
      return string.replace(/^-ms-/, "ms-").replace(/-([\da-z])/gi, function(canCreateDiscussions, shortMonthName) {
        return shortMonthName.toUpperCase();
      });
    }
    /**
     * @param {string} element
     * @return {?}
     */
    function render(element) {
      /** @type {!CSSStyleDeclaration} */
      var obj = document.body.style;
      if (element in obj) {
        return element;
      }
      /** @type {number} */
      var i = prefixes.length;
      var method = element.charAt(0).toUpperCase() + element.slice(1);
      var str;
      for (; i--;) {
        str = prefixes[i] + method;
        if (str in obj) {
          return str;
        }
      }
      return element;
    }
    /**
     * @param {string} key
     * @return {?}
     */
    function remove(key) {
      key = camelCase(key);
      return result[key] || (result[key] = render(key));
    }
    /**
     * @param {!Object} e
     * @param {string} p
     * @param {!Object} size
     * @return {undefined}
     */
    function func(e, p, size) {
      p = remove(p);
      /** @type {!Object} */
      e.style[p] = size;
    }
    /** @type {!Array} */
    var prefixes = ["Webkit", "O", "Moz", "ms"];
    var result = {};
    return function(e, pool) {
      /** @type {!Arguments} */
      var args = arguments;
      var i;
      var o;
      if (args.length == 2) {
        for (i in pool) {
          o = pool[i];
          if (o !== undefined && pool.hasOwnProperty(i)) {
            func(e, i, o);
          }
        }
      } else {
        func(e, args[1], args[2]);
      }
    };
  }();
  return NProgress;
});
var ls = ls || {};
ls.ajax = function($) {
  this.options = {
    selectors : {
      alert : ".js-ajax-form-alert"
    },
    html : {
      alert : function(e, str) {
        return '<div class="ls-alert ls-alert--error js-ajax-form-alert">' + (e ? '<h4 class="ls-alert-title">' + e + "</h4>" : "") + (str ? '<div class="ls-alert-body">' + str + "</div>" : "") + "</div>";
      }
    }
  };
  /**
   * @param {string} val
   * @param {!Object} obj
   * @param {!Function} source
   * @param {string} args
   * @return {?}
   */
  this.load = function(val, obj, source, args) {
    args = args || {};
    obj = obj || {};
    args.showNotices = typeof args.showNotices === "undefined" ? true : args.showNotices;
    args.showProgress = typeof args.showProgress === "undefined" ? true : args.showProgress;
    if (args.showProgress) {
      NProgress.start();
    }
    if (typeof LIVESTREET_SECURITY_KEY !== "undefined") {
      obj.security_ls_key = LIVESTREET_SECURITY_KEY;
    }
    $.each(obj, function(objPropertyName, val) {
      if (typeof val == "boolean") {
        /** @type {number} */
        obj[objPropertyName] = val ? 1 : 0;
      }
    });
    if (val.indexOf("http://") != 0 && val.indexOf("https://") != 0 && val.indexOf("/") != 0) {
      /** @type {string} */
      val = aRouter["ajax"] + val + "/";
    }
    var options = $.extend({}, {
      type : "POST",
      url : val,
      data : obj,
      dataType : "json",
      success : function(self) {
        if (self.bStateError) {
          if (args.showNotices && (self.sMsgTitle || self.sMsg)) {
            ls.msg.error(self.sMsgTitle, self.sMsg);
          }
          if ($.isFunction(args.onError)) {
            args.onError.apply(this, arguments);
          }
        } else {
          if (args.showNotices && (self.sMsgTitle || self.sMsg)) {
            ls.msg.notice(self.sMsgTitle, self.sMsg);
          }
          if ($.isFunction(source)) {
            source.apply(this, arguments);
          }
        }
        if (self.sUrlRedirect) {
          window.location = self.sUrlRedirect;
        }
        if (self.bRefresh) {
          window.location.reload();
        }
        if ($.isFunction(args.onResponse)) {
          args.onResponse.apply(this, arguments);
        }
      }.bind(this),
      error : function(canCreateDiscussions) {
        if ($.isFunction(args.onError)) {
          args.onError.apply(this, arguments);
        }
      }.bind(this),
      complete : function(canCreateDiscussions) {
        NProgress.done();
        if ($.isFunction(args.onComplete)) {
          args.onComplete.apply(this, arguments);
        }
      }.bind(this)
    }, args);
    ls.hook.run("ls_ajax_before", [options, source, args], this);
    return $.ajax(options);
  };
  /**
   * @param {string} type
   * @param {!Object} name
   * @param {!Object} value
   * @param {!Object} options
   * @return {undefined}
   */
  this.submit = function(type, name, value, options) {
    options = options || {};
    name = typeof name == "string" ? $(name) : name;
    var opponentsKilled = name.find("[type=submit]").eq(0);
    var $aidlBtn = options.submitButton || opponentsKilled.length && opponentsKilled || $("button[form=" + name.attr("id") + "]");
    var maindata3 = options.params || {};
    var f = typeof options.lock === "undefined" ? true : options.lock;
    options.showNotices = typeof options.showNotices === "undefined" ? true : options.showNotices;
    options.showProgress = typeof options.showProgress === "undefined" ? true : options.showProgress;
    if (options.showProgress) {
      NProgress.start();
    }
    if (typeof LIVESTREET_SECURITY_KEY !== "undefined") {
      maindata3.security_ls_key = LIVESTREET_SECURITY_KEY;
    }
    if (type.indexOf("http://") != 0 && type.indexOf("https://") != 0 && type.indexOf("/") != 0) {
      /** @type {string} */
      type = aRouter["ajax"] + type + "/";
    }
    if ($.isFunction(name.parsley)) {
      name.parsley().off("form:validate", ls.ajax.onFormValidate);
      name.parsley().on("form:validate", ls.ajax.onFormValidate);
    }
    var request = {
      type : "POST",
      url : type,
      dataType : options.dataType || "json",
      data : maindata3,
      beforeSubmit : function(s, result, canCreateDiscussions) {
        if (f) {
          ls.utils.formLock(result);
        }
        if ($aidlBtn) {
          $aidlBtn.prop("disabled", true).addClass(ls.options.classes.states.loading);
        }
        this.clearFieldErrors(result);
      }.bind(this),
      beforeSerialize : function(form, options) {
        if (typeof options.validate == "undefined" || options.validate === true) {
          var oncomplete = form.parsley("validate");
          if (!oncomplete) {
            NProgress.done();
            if ($.isFunction(options.onValidateFail)) {
              options.onValidateFail.apply(this, arguments);
            }
          }
          return oncomplete;
        }
        return true;
      },
      success : function(self, i, canCreateDiscussions, fieldName) {
        if (self.bStateError) {
          if (self.errors) {
            this.showFieldErrors(fieldName, self.errors);
          } else {
            if (options.showNotices) {
              if (self.sMsgTitle || self.sMsg) {
                ls.msg.error(self.sMsgTitle, self.sMsg);
              }
            } else {
              if (self.is_form_error && (self.sMsgTitle || self.sMsg)) {
                this.showFormAlert(fieldName, self.sMsgTitle, self.sMsg);
              }
            }
          }
          if ($.isFunction(options.onError)) {
            options.onError.apply(this, arguments);
          }
        } else {
          if (options.showNotices && (self.sMsgTitle || self.sMsg)) {
            ls.msg.notice(self.sMsgTitle, self.sMsg);
          }
          if ($.isFunction(value)) {
            value.apply(this, arguments);
          }
        }
        if (self.sUrlRedirect) {
          window.location = self.sUrlRedirect;
        }
        if (self.bRefresh) {
          window.location.reload();
        }
        if ($.isFunction(options.onResponse)) {
          options.onResponse.apply(this, arguments);
        }
      }.bind(this),
      error : function(canCreateDiscussions) {
        if ($.isFunction(options.onError)) {
          options.onError.apply(this, arguments);
        }
      }.bind(this),
      complete : function() {
        NProgress.done();
        $aidlBtn.prop("disabled", false).removeClass(ls.options.classes.states.loading);
        if ($.isFunction(options.onComplete)) {
          options.onComplete.apply(this, arguments);
        }
        if (f) {
          ls.utils.formUnlock(name);
        }
      }.bind(this)
    };
    ls.hook.run("ls_ajaxsubmit_before", [request, name, value, options], this);
    name.ajaxSubmit(request);
  };
  /**
   * @param {!Object} self
   * @return {undefined}
   */
  this.onFormValidate = function(self) {
    ls.ajax.clearFieldErrors(self.$element);
  };
  /**
   * @param {!Object} root
   * @return {undefined}
   */
  this.clearFieldErrors = function(root) {
    var data = root.data("fieldsForClearError");
    if (data && data.length) {
      $.each(data, function(s, elem) {
        var w5cFormCtrl = root.find('[name="' + elem + '"]').parsley();
        if (w5cFormCtrl) {
          w5cFormCtrl.removeError(elem);
        }
      });
    }
  };
  /**
   * @param {!Object} options
   * @param {!Object} fields
   * @return {undefined}
   */
  this.showFieldErrors = function(options, fields) {
    /** @type {!Array} */
    var i = [];
    $.each(fields, function(key, o) {
      var $el = options.find('[name="' + key + '"]');
      if ($el.length && $el.parsley()) {
        $el.parsley().addError(key, {
          message : o.join("<br>")
        });
        i.push(key);
      }
    });
    options.data("fieldsForClearError", i);
  };
  /**
   * @param {!Object} options
   * @param {string} type
   * @param {string} data
   * @return {undefined}
   */
  this.showFormAlert = function(options, type, data) {
    options.find(this.options.selectors.alert).remove();
    options.prepend(this.options.html.alert(type, data));
  };
  /**
   * @param {string} type
   * @param {!Object} name
   * @param {!Object} data
   * @param {?} options
   * @return {undefined}
   */
  this.form = function(type, name, data, options) {
    name = typeof name == "string" ? $(name) : name;
    name.on("submit", function(event) {
      ls.ajax.submit(type, name, data, options);
      event.preventDefault();
    });
  };
  return this;
}.call(ls.ajax || {}, jQuery);
ls = ls || {};
ls.dev = function($) {
  var DEFAULT_ANALYSIS_CONFIG = {};
  /**
   * @param {string} defaults
   * @return {undefined}
   */
  this.init = function(defaults) {
    this.options = $.extend({}, DEFAULT_ANALYSIS_CONFIG, defaults);
  };
  /**
   * @return {undefined}
   */
  this.debug = function() {
    if (ls.options.production) {
      return;
    }
    this.log.apply(this, arguments);
  };
  /**
   * @return {undefined}
   */
  this.log = function() {
    if (window.console && window.console.log) {
      Function.prototype.bind.call(console.log, console).apply(console, arguments);
    }
  };
  return this;
}.call(ls.dev || {}, jQuery);
ls = ls || {};
ls.hook = function(e$jscomp$474) {
  this.hooks = {};
  /**
   * @param {string} n$jscomp$399
   * @param {number} o$jscomp$191
   * @param {!Function} t$jscomp$528
   * @return {?}
   */
  this.cloneFunc = function(n$jscomp$399, o$jscomp$191, t$jscomp$528) {
    var i$jscomp$309;
    if (e$jscomp$474.type(n$jscomp$399) == "string") {
      eval("f = " + n$jscomp$399 + ";");
    } else {
      if (e$jscomp$474.type(n$jscomp$399) == "array") {
        i$jscomp$309 = n$jscomp$399[0][n$jscomp$399[1]];
      } else {
        /** @type {string} */
        i$jscomp$309 = n$jscomp$399;
      }
    }
    if (e$jscomp$474.type(i$jscomp$309) == "function") {
      var r$jscomp$281 = i$jscomp$309.toString().replace(/^(function)([^\(]*)\(/gi, "$1 (");
      if (typeof o$jscomp$191 != "undefined" && o$jscomp$191) {
        if (typeof t$jscomp$528 != "undefined" && t$jscomp$528) {
          return r$jscomp$281.replace(/^[^\{]*\{/gi, "").replace(/\}$/gi, "");
        } else {
          return r$jscomp$281;
        }
      }
      return eval("(" + r$jscomp$281 + ")");
    }
    return function() {
    };
  };
  /**
   * @param {string} n$jscomp$400
   * @param {undefined} o$jscomp$192
   * @param {undefined} t$jscomp$529
   * @return {undefined}
   */
  this.inject = function(n$jscomp$400, o$jscomp$192, t$jscomp$529) {
    var l$jscomp$73 = ls.hook.cloneFunc(n$jscomp$400, 1);
    /** @type {string} */
    var f$jscomp$50 = (e$jscomp$474.type(n$jscomp$400) == "string" ? n$jscomp$400 : e$jscomp$474.type(n$jscomp$400) == "array" ? "func[0][func[1]]" : "func") + " = ";
    /** @type {!RegExp} */
    var i$jscomp$310 = /\{/m;
    /** @type {string} */
    var r$jscomp$282 = "{ ";
    if (e$jscomp$474.type(t$jscomp$529) == "string") {
      /** @type {!RegExp} */
      i$jscomp$310 = new RegExp("(ls\\.hook\\.marker\\((['\"])" + t$jscomp$529 + "(\\2)\\)[\\r\\n\\t ]*;?)", "m");
      /** @type {string} */
      r$jscomp$282 = "$1";
    }
    if (e$jscomp$474.type(o$jscomp$192) == "function") {
      /** @type {string} */
      var a$jscomp$148 = "funcInj" + Math.floor(Math.random() * 1000000);
      eval('window["' + a$jscomp$148 + '"] = funcInj;');
      eval(f$jscomp$50 + l$jscomp$73.replace(i$jscomp$310, r$jscomp$282 + a$jscomp$148 + ".apply(this, arguments); "));
    } else {
      eval(f$jscomp$50 + l$jscomp$73.replace(i$jscomp$310, r$jscomp$282 + o$jscomp$192 + "; "));
    }
  };
  /**
   * @param {string} type
   * @param {!Object} name
   * @param {string} data
   * @return {undefined}
   */
  this.add = function(type, name, data) {
    data = data || 0;
    if (typeof ls.hook.hooks[type] == "undefined") {
      /** @type {!Array} */
      ls.hook.hooks[type] = [];
    }
    ls.hook.hooks[type].push({
      "callback" : name,
      "priority" : data
    });
  };
  /**
   * @param {!Object} n$jscomp$402
   * @param {!Array} o$jscomp$194
   * @param {!Object} t$jscomp$530
   * @return {undefined}
   */
  this.run = function(n$jscomp$402, o$jscomp$194, t$jscomp$530) {
    o$jscomp$194 = o$jscomp$194 || [];
    var i$jscomp$311 = ls.hook.hooks;
    if (typeof i$jscomp$311[n$jscomp$402] != "undefined") {
      i$jscomp$311[n$jscomp$402].sort(function(a, b) {
        return a.priority > b.priority ? 1 : a.priority < b.priority ? -1 : 0;
      });
      e$jscomp$474.each(i$jscomp$311[n$jscomp$402], function(r$jscomp$283) {
        var a$jscomp$149 = i$jscomp$311[n$jscomp$402][r$jscomp$283].callback;
        if (e$jscomp$474.type(a$jscomp$149) == "function") {
          a$jscomp$149.apply(t$jscomp$530, o$jscomp$194);
        } else {
          if (e$jscomp$474.type(a$jscomp$149) == "array") {
            a$jscomp$149[0][a$jscomp$149[1]].apply(t$jscomp$530, o$jscomp$194);
          } else {
            if (e$jscomp$474.type(a$jscomp$149) == "string") {
              eval("(function(){" + a$jscomp$149 + "}).apply(o, params);");
            } else {
              ls.dev.debug('cant call hook "' + n$jscomp$402 + '"[' + r$jscomp$283 + "]");
            }
          }
        }
      });
    }
  };
  /**
   * @param {string} _$parse_
   * @return {undefined}
   */
  this.marker = function(_$parse_) {
  };
  return this;
}.call(ls.hook || {}, jQuery);
ls = ls || {};
ls.lang = ls.i18n = function(utils) {
  var t = {};
  /**
   * @param {string} val
   * @return {undefined}
   */
  this.load = function(val) {
    utils.extend(true, t, val);
  };
  /**
   * @param {!Object} key
   * @param {string} data
   * @return {?}
   */
  this.get = function(key, data) {
    if (t[key]) {
      var value = t[key];
      if (data) {
        value = this.replace(value, data);
      }
      return value;
    }
    return key;
  };
  /**
   * @param {!Object} pattern
   * @param {string} value
   * @return {?}
   */
  this.replace = function(pattern, value) {
    jQuery.each(value, function(canCreateDiscussions, D) {
      pattern = pattern.replace(new RegExp("%%" + canCreateDiscussions + "%%", "g"), D);
    });
    return pattern;
  };
  /**
   * @param {number} value
   * @param {!Object} item
   * @param {string} count
   * @return {?}
   */
  this.pluralize = function(value, item, count) {
    var a = utils.isArray(item) ? item : this.get(item).split(";");
    count = count || LANGUAGE;
    /** @type {number} */
    var minyMin = Math.abs(value);
    /** @type {number} */
    var v = minyMin % 10 == 1 && minyMin % 100 != 11 ? 0 : minyMin % 10 >= 2 && minyMin % 10 <= 4 && (minyMin % 100 < 10 || minyMin % 100 >= 20) ? 1 : 2;
    /** @type {number} */
    v = typeof v === "boolean" ? v ? 1 : 0 : v;
    if (a[v]) {
      var start = a[v];
    } else {
      start = a[0] ? a[0] : "";
    }
    var end = this.replace(start, {
      count : value
    });
    return start === end ? value + " " + start : end;
  };
  return this;
}.call(ls.lang || {}, jQuery);
ls = ls || {};
ls = function(_) {
  var options = {
    production : false,
    classes : {
      states : {
        active : "active",
        loading : "ls-loading",
        open : "open"
      }
    }
  };
  /**
   * @param {string} defaults
   * @return {undefined}
   */
  this.init = function(defaults) {
    this.options = _.extend({}, options, defaults);
  };
  return this;
}.call(ls || {}, jQuery);
if (!Function.prototype.bind) {
  /**
   * @param {(Object|null|undefined)} type
   * @param {...*} p1
   * @return {!Function}
   */
  Function.prototype.bind = function(type) {
    if (typeof this !== "function") {
      throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
    }
    /** @type {function(this:(IArrayLike<T>|string), *=, *=): !Array<T>} */
    var slice = [].slice;
    /** @type {!Array<?>} */
    var headArgs = slice.call(arguments, 1);
    /** @type {!Function} */
    var oldSetupComputes = this;
    /**
     * @return {undefined}
     */
    var fNOP = function() {
    };
    /**
     * @return {?}
     */
    var fBound = function() {
      return oldSetupComputes.apply(this instanceof fNOP ? this : type || {}, headArgs.concat(slice.call(arguments)));
    };
    fNOP.prototype = this.prototype;
    fBound.prototype = new fNOP;
    return fBound;
  };
}
ls = ls || {};
ls.registry = function(t) {
  var obj = {};
  /**
   * @param {string} type
   * @param {!Object} name
   * @return {undefined}
   */
  this.set = function(type, name) {
    if (typeof type == "object") {
      t.each(type, function(u, b) {
        obj[u] = b;
      });
    } else {
      /** @type {!Object} */
      obj[type] = name;
    }
  };
  /**
   * @param {!Object} type
   * @return {?}
   */
  this.get = function(type) {
    return obj[type];
  };
  return this;
}.call(ls.registry || {}, jQuery);
ls = ls || {};
ls.timer = function(i) {
  var element = {};
  /**
   * @param {!Object} object
   * @param {(!Function|string)} el
   * @param {!Object} name
   * @param {!Array} val
   * @param {number} offset
   * @return {undefined}
   */
  this.run = function(object, el, name, val, offset) {
    offset = offset || 1500;
    val = val || [];
    name = name || Math.random();
    if (element[name]) {
      clearTimeout(element[name]);
      /** @type {null} */
      element[name] = null;
    }
    /** @type {number} */
    var i = setTimeout(function() {
      clearTimeout(element[name]);
      /** @type {null} */
      element[name] = null;
      el.apply(object, val);
    }.bind(this), offset);
    /** @type {number} */
    element[name] = i;
  };
  return this;
}.call(ls.timer || {}, jQuery);
ls = ls || {};
ls.utils = function($) {
  /**
   * @param {string} s
   * @return {?}
   */
  this.ucfirst = function(s) {
    var e = s.charAt(0).toUpperCase();
    return e + s.substr(1, s.length - 1);
  };
  /**
   * @param {string} id
   * @param {?} name
   * @param {?} className
   * @return {undefined}
   */
  this.checkAll = function(id, name, className) {
    $("." + id).each(function(canCreateDiscussions, clicked_el) {
      if (className) {
        $(clicked_el).attr("checked", !$(clicked_el).attr("checked"));
      } else {
        $(clicked_el).attr("checked", $(name).attr("checked"));
      }
    });
  };
  /**
   * @param {string} text
   * @param {string} value
   * @param {boolean} i
   * @return {undefined}
   */
  this.textPreview = function(text, value, i) {
    var capture_headings = WYSIWYG ? tinyMCE.activeEditor.getContent() : (typeof text === "string" ? $(text) : text).val();
    var n = aRouter["ajax"] + "preview/text/";
    var settings = {
      text : capture_headings,
      save : i
    };
    ls.hook.marker("textPreviewAjaxBefore");
    ls.ajax.load(n, settings, function(options) {
      if (options.bStateError) {
        ls.msg.error(options.sMsgTitle || "Error", options.sMsg || "Please try again later");
      } else {
        var data = typeof text === "string" ? $(value || "#text_preview") : value;
        ls.hook.marker("textPreviewDisplayBefore");
        if (data.length) {
          data.html(options.sText);
          ls.hook.marker("textPreviewDisplayAfter");
        }
      }
    });
  };
  /**
   * @return {?}
   */
  this.getSelectedText = function() {
    /** @type {string} */
    var text = "";
    if (window.getSelection) {
      /** @type {string} */
      text = window.getSelection().toString();
    } else {
      if (window.document.selection) {
        var current = window.document.selection.createRange();
        text = current.text || current;
        if (text.toString) {
          text = text.toString();
        } else {
          /** @type {string} */
          text = "";
        }
      }
    }
    return text;
  };
  /**
   * @param {!Object} options
   * @param {string} name
   * @return {?}
   */
  this.getDataOptions = function(options, name) {
    name = name || "option";
    var opts = {};
    var requestOpts = typeof options === "string" ? $(options).data() : options.data();
    var key;
    for (key in requestOpts) {
      if (key === "options") {
        continue;
      }
      if (key.substring(0, name.length) == name) {
        /** @type {string} */
        var valueConfig = key.substring(name.length);
        opts[valueConfig.charAt(0).toLowerCase() + valueConfig.substring(1)] = requestOpts[key];
      }
    }
    return opts;
  };
  /**
   * @param {!Object} e
   * @param {string} position
   * @return {undefined}
   */
  this.removeClassByPrefix = function(e, position) {
    e[0].className = $.trim((e[0].className + " ").replace(new RegExp("\\b" + position + ".*?\\s", "g"), ""));
  };
  /**
   * @param {string} type
   * @return {?}
   */
  this.formLockAccessor = function(type) {
    return function($tabSelector) {
      var syncedAnimals = $tabSelector.find("input, select, textarea, button").filter(type == "lock" ? ":not(:disabled)" : ".js-ls-form-disabled");
      syncedAnimals.each(function(canCreateDiscussions, s) {
        $(this).prop("disabled", type == "lock" ? true : false)[type == "lock" ? "addClass" : "removeClass"]("js-ls-form-disabled");
      });
    };
  };
  /**
   * @param {!Object} ar
   * @return {undefined}
   */
  this.formLock = function(ar) {
    this.formLockAccessor("lock").apply(this, arguments);
  };
  /**
   * @param {!Object} fn
   * @return {undefined}
   */
  this.formUnlock = function(fn) {
    this.formLockAccessor("unlock").apply(this, arguments);
  };
  /**
   * @param {number} seconds
   * @return {?}
   */
  this.timeRemaining = function(seconds) {
    /** @type {number} */
    days = parseInt(seconds / 86400);
    /** @type {number} */
    seconds = seconds % 86400;
    /** @type {number} */
    hours = parseInt(seconds / 3600);
    /** @type {number} */
    seconds = seconds % 3600;
    /** @type {number} */
    minutes = parseInt(seconds / 60);
    /** @type {number} */
    seconds = parseInt(seconds % 60);
    if (days > 0) {
      return days + ", " + hours + ":" + minutes + ":" + seconds;
    }
    if (hours > 0) {
      return hours + ":" + minutes + ":" + seconds;
    }
    if (minutes > 0) {
      return minutes + ":" + seconds;
    }
    return seconds;
  };
  /**
   * @param {string} s
   * @return {?}
   */
  this.escapeHtml = function(s) {
    return s.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
  };
  return this;
}.call(ls.utils || {}, jQuery);
(function(t$jscomp$548) {
  t$jscomp$548.widget("livestreet.lsComponent", {
    options : {
      classes : {},
      selectors : {},
      urls : {},
      params : {
        security_ls_key : LIVESTREET_SECURITY_KEY
      },
      i18n : {},
      elements : {},
      _globalChar : "@"
    },
    _create : function() {
      t$jscomp$548.extend(this.options, this.getData());
      t$jscomp$548.extend(this.options, this.element.data(this.widgetName.toLowerCase() + "-options"));
      this._getParamsFromData();
      this.elements = this._getElementsFromSelectors(this.options.selectors, this.element);
      this.option("elements", this.elements);
    },
    _getElementsFromSelectors : function(err, doc) {
      var subwikiListsCache = {};
      doc = doc || this.document;
      var document;
      t$jscomp$548.each(err || {}, function(wikiId, value) {
        document = doc;
        if (t$jscomp$548.type(value) == "string" && value.charAt(0) == this.option("_globalChar")) {
          value = value.substr(1);
          document = this.document;
        }
        subwikiListsCache[wikiId] = t$jscomp$548.type(value) == "object" ? this._getElementsFromSelectors(value, document) : document.find(value);
      }.bind(this));
      return subwikiListsCache;
    },
    getElement : function(key) {
      return this.option("elements." + key);
    },
    getData : function(el, options) {
      if (typeof el === "string") {
        /** @type {!Object} */
        options = el;
        el = this.element;
      }
      return ls.utils.getDataOptions(el || this.element, options || this.widgetName.toLowerCase());
    },
    _getParamsFromData : function(rawPads, i, forceOptional) {
      t$jscomp$548.extend(this.options.params, this.getData("param"));
    },
    _load : function(type, name, callback, done) {
      if (t$jscomp$548.isFunction(name) || typeof name === "string") {
        /** @type {string} */
        done = callback;
        /** @type {string} */
        callback = name;
        name = {};
      }
      name = name || {};
      if (this.option("params")) {
        name = t$jscomp$548.extend({}, this.option("params"), name);
      }
      if (typeof callback === "string") {
        callback = this[callback];
      }
      if (t$jscomp$548.isFunction(callback)) {
        callback = callback.bind(this);
      }
      return ls.ajax.load(this.option("urls." + type), name || {}, callback, done);
    },
    _submit : function(name, type, data, op) {
      if (typeof data === "string") {
        data = this[data];
      }
      if (t$jscomp$548.isFunction(data)) {
        data = data.bind(this);
      }
      ls.ajax.submit(this.option("urls." + name), type, data, t$jscomp$548.extend({
        params : this.option("params") || {}
      }, op));
    },
    _form : function(options, x, type, cb) {
      /** @type {!Arguments} */
      var outerArguments = arguments;
      x.on("submit", function(event) {
        event.preventDefault();
        this._submit.apply(this, [].slice.call(outerArguments));
      }.bind(this));
    },
    _setParam : function(id, value) {
      return this.option("params." + id, value);
    },
    _getParam : function(name) {
      return this.option("params." + name);
    },
    _trigger : function(i$jscomp$326, e$jscomp$500, s$jscomp$181) {
      var n$jscomp$414;
      var o$jscomp$199;
      var a$jscomp$151 = this.options[i$jscomp$326];
      if (typeof a$jscomp$151 === "string") {
        eval(a$jscomp$151);
        return true;
      }
      s$jscomp$181 = s$jscomp$181 || {};
      e$jscomp$500 = t$jscomp$548.Event(e$jscomp$500);
      e$jscomp$500.type = (i$jscomp$326 === this.widgetEventPrefix ? i$jscomp$326 : this.widgetEventPrefix + i$jscomp$326).toLowerCase();
      e$jscomp$500.target = this.element[0];
      o$jscomp$199 = e$jscomp$500.originalEvent;
      if (o$jscomp$199) {
        for (n$jscomp$414 in o$jscomp$199) {
          if (!(n$jscomp$414 in e$jscomp$500)) {
            e$jscomp$500[n$jscomp$414] = o$jscomp$199[n$jscomp$414];
          }
        }
      }
      this.element.trigger(e$jscomp$500, s$jscomp$181);
      return !(t$jscomp$548.isFunction(a$jscomp$151) && a$jscomp$151.apply(this.element[0], [e$jscomp$500].concat(s$jscomp$181)) === false || e$jscomp$500.isDefaultPrevented());
    },
    _hasClass : function(name, className) {
      if (typeof name === "string") {
        /** @type {!Object} */
        className = name;
        name = this.element;
      }
      return name.hasClass(this.option("classes." + className));
    },
    _i18n : function(type, e, key) {
      var str = this.option("i18n." + type);
      if (str && str.charAt(0) == this.option("_globalChar")) {
        str = ls.i18n.get(str.substr(1));
      }
      if (!str) {
        return type;
      }
      if (t$jscomp$548.isNumeric(e)) {
        /** @type {string} */
        key = e;
        /** @type {null} */
        e = null;
      }
      if (t$jscomp$548.isFunction(str)) {
        str = str();
      }
      if (t$jscomp$548.isNumeric(key)) {
        str = ls.i18n.pluralize(key, str);
      }
      if (e) {
        str = ls.i18n.replace(str, e);
      }
      return str;
    },
    _classes : function(options) {
      /**
       * @param {!Array} classes
       * @param {boolean} checkOption
       * @return {undefined}
       */
      function processClassString(classes, checkOption) {
        var a;
        var i;
        /** @type {number} */
        i = 0;
        for (; i < classes.length; i++) {
          if (checkOption) {
            if (options.classes[classes[i]]) {
              remainingClasses.push(options.classes[classes[i]]);
            }
          } else {
            a = that.classesElementLookup[classes[i]] || t$jscomp$548();
            if (options.add) {
              a = t$jscomp$548(t$jscomp$548.unique(a.get().concat(options.element.get())));
            } else {
              a = t$jscomp$548(a.not(options.element).get());
            }
            that.classesElementLookup[classes[i]] = a;
            remainingClasses.push(classes[i]);
          }
        }
      }
      /** @type {!Array} */
      var remainingClasses = [];
      var that = this;
      options = t$jscomp$548.extend({
        element : this.element,
        classes : this.options.classes || {}
      }, options);
      if (options.keys) {
        processClassString(options.keys.match(/\S+/g) || [], true);
      }
      if (options.extra) {
        processClassString(options.extra.match(/\S+/g) || []);
      }
      return remainingClasses.join(" ");
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsDetails", $.livestreet.lsComponent, {
    options : {
      selectors : {
        title : "> .js-details-title",
        body : "> .js-details-body"
      },
      classes : {
        open : "is-open"
      }
    },
    _create : function() {
      this._super();
      if (this.isOpen()) {
        this.show();
      }
      this._on(this.getElement("title"), {
        click : "toggle"
      });
    },
    toggle : function() {
      this[this.isOpen() ? "hide" : "show"]();
    },
    show : function() {
      if (this.isOpen()) {
        return;
      }
      this._addClass("open");
      this._trigger("aftershow", null, this);
    },
    hide : function() {
      if (!this.isOpen()) {
        return;
      }
      this._removeClass("open");
      this._trigger("afterhide", null, this);
    },
    isOpen : function() {
      return this._hasClass("open");
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsDetailsGroup", $.livestreet.lsComponent, {
    options : {
      single : true,
      selectors : {
        item : "> .js-details-group-item"
      },
      itemOptions : {}
    },
    _create : function() {
      this._super();
      this.getElement("item").lsDetails(this.option("itemOptions"));
      if (this.option("single")) {
        this._on(this.getElement("item"), {
          lsdetailsaftershow : "onItemShow"
        });
      }
    },
    onItemShow : function(rootVm, rule) {
      this.getElement("item").not(rule.element).lsDetails("hide");
    }
  });
})(jQuery);
$.widget("livestreet.lsAlert", $.livestreet.lsComponent, {
  options : {
    selectors : {
      close : ".js-ls-alert-close"
    }
  },
  _create : function() {
    this._super();
    this._on(this.elements.close, {
      click : "hide"
    });
  },
  hide : function() {
    this.element.hide();
  },
  show : function() {
    this.element.show();
  }
});
jQuery(function($) {
  /** @type {!Element} */
  var form = document.createElement("div");
  document.body.appendChild(form);
  /** @type {string} */
  form.innerHTML = '<form id="form"></form><input form="form">';
  if (form.lastChild.form != form.firstChild) {
    $(document).on("click", "button[form]", function() {
      $("#" + $(this).attr("form")).submit();
    });
  }
  document.body.removeChild(form);
});
$.widget("livestreet.lsDropdown", $.livestreet.lsComponent, {
  options : {
    classes : {
      "open" : "active"
    },
    selectors : {
      toggle : ".js-ls-dropdown-toggle",
      text : "",
      menu : ".js-ls-dropdown-menu"
    },
    position : {
      my : "left top+4",
      at : "left bottom",
      collision : "flipfit flip"
    },
    show : {
      effect : "show",
      duration : 200
    },
    hide : {
      effect : "hide",
      duration : 200
    },
    selectable : false,
    body : false,
    reposition : null,
    aftershow : null,
    afterhide : null,
    beforeshow : null,
    beforehide : null
  },
  _create : function() {
    var key = this;
    this._super();
    if (this.options.body) {
      this._initialMenuParent = this.elements.menu.parent();
      this.elements.menu.appendTo("body");
    }
    this._menuItems = this.elements.menu.find("li:not(.ls-dropdown-separator)");
    this._menuLinks = this._menuItems.find("a");
    /** @type {null} */
    this._menuFocusedItem = null;
    if (this.options.selectable) {
      var value = this.getActiveItemText();
      if (value) {
        this.setText(value);
      }
    }
    this.options.position.of = this.options.position.of || this.elements.toggle;
    this.options.position.using = this.options.position.using || function(e, state) {
      ls.utils.removeClassByPrefix(this.elements.menu, "position-");
      this.elements.menu.addClass("position-y-" + state.vertical + " position-x-" + state.horizontal).css(e);
    }.bind(this);
    this._on(this.elements.toggle, {
      click : "toggle"
    });
    this.elements.menu.bind("keydown" + this.eventNamespace, "down", this.focusNextLink.bind(this));
    this.elements.menu.bind("keydown" + this.eventNamespace, "up", this.focusPrevLink.bind(this));
    $().add(this.elements.menu).add(this.element).bind("keydown" + this.eventNamespace, "esc", this.hide.bind(this, true));
    this._menuLinks.on("focus" + this.eventNamespace, function() {
      key._menuFocusedItem = $(this).closest("li");
    });
    this._on(this._menuLinks, {
      click : "onItemClick"
    });
    this.window.on("resize" + this.eventNamespace + "scroll" + this.eventNamespace, this._reposition.bind(this));
    this.document.on("click" + this.eventNamespace, function(event) {
      if (!this.elements.menu.is(event.target) && this.elements.menu.has(event.target).length === 0 && !this.element.is(event.target) && this.element.has(event.target).length === 0) {
        this.hide();
      }
    }.bind(this));
  },
  setText : function(value) {
    this.elements[this.elements.text.length ? "text" : "toggle"].text(value);
  },
  toggle : function(type) {
    type.preventDefault();
    this[this.elements.menu.is(":visible") ? "hide" : "show"]();
  },
  getMenu : function() {
    return this.elements.menu;
  },
  show : function() {
    this._trigger("beforeshow", null, this);
    this.elements.toggle.attr("aria-expanded", true);
    this._show(this.elements.menu, this.options.show, function() {
      this.elements.menu.attr("aria-hidden", false);
      this._trigger("aftershow", null, this);
    }.bind(this));
    this._reposition();
    this._addClass("open");
    this._addClass(this.elements.toggle, "open");
  },
  hide : function(type) {
    if (!this.elements.menu.is(":visible") || this.elements.toggle.data("dropdown-state-hide") === true) {
      return false;
    }
    this._trigger("beforehide", null, this);
    this.elements.toggle.attr("aria-expanded", false);
    this.elements.toggle.data("dropdown-state-hide", true);
    this._hide(this.elements.menu, this.options.hide, function() {
      /** @type {null} */
      this._menuFocusedItem = null;
      this.elements.menu.attr("aria-hidden", true);
      this._removeClass("open");
      this._removeClass(this.elements.toggle, "open");
      this.elements.toggle.removeData("dropdown-state-hide");
      this._trigger("afterhide", null, this);
    }.bind(this));
  },
  onItemClick : function(event) {
    if (this.options.selectable) {
      var t = $(event.currentTarget);
      this._menuItems.removeClass("active");
      t.closest("li").addClass("active");
      this.setText(t.text());
    }
    this.hide(true);
  },
  getItems : function() {
    return this._menuItems || (this._menuItems = this.elements.menu.find("li:not(.dropdown-separator)"));
  },
  focusNextLink : function() {
    this._menuFocusedItem.next().find("a").focus();
  },
  focusPrevLink : function() {
    this._menuFocusedItem.prev().find("a").focus();
  },
  getActiveItem : function() {
    return this.getItems().filter(".active").eq(0);
  },
  getActiveItemText : function() {
    return this.getActiveItem().find("a").text();
  },
  _reposition : function() {
    if (!this.elements.menu.is(":visible")) {
      return false;
    }
    this.elements.menu.position(this.options.position);
    this._trigger("reposition", null, this);
  },
  _destroy : function() {
    if (this.options.body) {
      this.elements.menu.appendTo(this._initialMenuParent);
    }
  }
});
(function($) {
  $.widget("livestreet.lsTab", $.livestreet.lsComponent, {
    options : {
      target : null,
      tabs : $(),
      classes : {
        active : "active",
        loading : "ls-loading"
      },
      urls : {
        load : null
      },
      result : "sText",
      params : {},
      beforeactivate : null,
      activate : null
    },
    _create : function() {
      this._super();
      this._pane = $("#" + this.option("target"));
      this._on({
        click : "onClick"
      });
      if (this.options.target == location.hash.substring(1) || this.options.urls.load && this._hasClass("active") && !this._pane.text()) {
        this.activate();
      }
    },
    onClick : function(event) {
      this.activate();
      event.preventDefault();
    },
    isActive : function() {
      return this._hasClass("active");
    },
    activate : function() {
      this._trigger("beforeactivate", null, this);
      this._addClass("active");
      this._pane.show();
      if (this.options.urls.load) {
        this._loadContent();
      } else {
        this._trigger("activate", null, this);
      }
    },
    deactivate : function() {
      this._removeClass("active");
      this._pane.hide();
    },
    getPane : function() {
      return this._pane;
    },
    setPaneContent : function(t) {
      return this.getPane().html(t);
    },
    _loadContent : function() {
      this._addClass(this._pane.empty(), "loading");
      this._load("load", function(fx) {
        this.setPaneContent(fx[this.options.result]);
      }, {
        onError : function(canCreateDiscussions) {
          this._removeClass(this._pane, "loading");
        }.bind(this),
        onComplete : function(canCreateDiscussions) {
          this._removeClass(this._pane, "loading");
          this._trigger("activate", null, this);
        }.bind(this)
      });
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsTabs", $.livestreet.lsComponent, {
    options : {
      selectors : {
        tab : "[data-tab]",
        pane : "[data-tab-pane]"
      }
    },
    _create : function() {
      this._super();
      this.elements.tab.lsTab({
        tabs : this.element,
        beforeactivate : function(error, data) {
          this._trigger("tabbeforeactivate", error, data);
          this.getTabs().not(data.element).lsTab("deactivate");
        }.bind(this),
        activate : function(error, data) {
          this._trigger("tabactivate", error, data);
        }.bind(this)
      });
    },
    getTabs : function() {
      return this.elements.tab;
    },
    getPanes : function() {
      return this.elements.pane;
    },
    getActiveTab : function() {
      return this.getTabs().filter(function() {
        return $(this).lsTab("isActive");
      });
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsBlock", $.livestreet.lsComponent, {
    options : {
      selectors : {
        tabs : ".js-tabs-block",
        pane_container : "[data-tab-panes]"
      }
    },
    _create : function() {
      this._super();
      this.elements.tabs.lsTabs({
        tabbeforeactivate : function() {
          var width = this.elements.pane_container.height();
          this.elements.pane_container.css("height", width > 150 ? width : 150);
        }.bind(this),
        tabactivate : function() {
          this.elements.pane_container.css("height", "auto");
        }.bind(this)
      });
    }
  });
})(jQuery);
ls = ls || {};
(function($) {
  var o;
  var $body;
  var container;
  var mainWindow = $(window);
  var self = function($) {
    this.element = $('<div class="ls-modal-overlay js-ls-modal-overlay" />');
    /**
     * @return {undefined}
     */
    this.init = function() {
      $body = $("html");
      container = $("body");
      o = this.getScrollbarWidth();
      container.append(this.element);
      this.resize();
    };
    /**
     * @return {undefined}
     */
    this.show = function() {
      $body.css("overflow", "hidden");
      if (container.outerHeight() > mainWindow.height()) {
        container.css("margin-right", o);
      }
      this.element.css({
        overflow : "auto"
      });
      this.element.fadeIn(300);
    };
    /**
     * @param {string} type
     * @return {undefined}
     */
    this.hide = function(type) {
      this.element.fadeOut(300, function() {
        $body.css("overflow", "auto");
        container.css("margin-right", 0);
        if ($.isFunction(type)) {
          type();
        }
      });
    };
    /**
     * @return {undefined}
     */
    this.resize = function() {
      this.element.innerHeight(mainWindow.height());
      var $tip = this.getActiveModal();
      if (!$tip.length) {
        return;
      }
      $tip.css("margin-left", (self.element.width() - $tip.outerWidth()) / 2);
    };
    /**
     * @return {?}
     */
    this.isVisible = function() {
      return this.element.is(":visible");
    };
    /**
     * @return {?}
     */
    this.getActiveModal = function() {
      return self.element.find("[data-type=modal]:visible").eq(0);
    };
    /**
     * @return {?}
     */
    this.getScrollbarWidth = function() {
      var dragPreview = $("<div>").css({
        "width" : 100,
        "height" : 100,
        "overflow" : "auto",
        "position" : "absolute",
        "bottom" : 0,
        "left" : 0
      });
      /** @type {number} */
      var scrollbarWidth = 100 - $("<div>").css("height", 200).appendTo(dragPreview.appendTo("body")).width();
      dragPreview.remove();
      return scrollbarWidth;
    };
    return this;
  }.call(self || {}, jQuery);
  var element = function($) {
    this.element = $('<div class="ls-modal-loader ls-loading js-ls-modal-loader" />');
    /**
     * @return {undefined}
     */
    this.init = function() {
      self.element.append(this.element);
    };
    /**
     * @return {undefined}
     */
    this.show = function() {
      this.element.show();
    };
    /**
     * @return {undefined}
     */
    this.hide = function() {
      this.element.hide();
    };
    return this;
  }.call(element || {}, jQuery);
  $.widget("livestreet.lsModal", $.livestreet.lsComponent, {
    options : {
      selectors : {
        close : "[data-type=modal-close]",
        tabs : ".js-ls-modal-tabs"
      },
      show : {
        effect : "slide",
        duration : 300,
        direction : "up"
      },
      hide : {
        effect : "drop",
        duration : 200,
        direction : "up"
      },
      center : true,
      url : null,
      params : null,
      create : null,
      aftershow : null,
      afterhide : null,
      tabsOptions : {}
    },
    _create : function() {
      this._super();
      if (this.options.url) {
        self.element.append(this.element);
      } else {
        this.document.on("ready" + this.eventNamespace, function(canCreateDiscussions) {
          self.element.append(this.element);
        }.bind(this));
      }
      if (this.elements.tabs) {
        this.elements.tabs.lsTabs(this.option("tabsOptions"));
      }
      this._on(this.getElement("close"), {
        click : "hide"
      });
      this._trigger("create", null, this);
    },
    show : function() {
      var t = self.isVisible();
      this._trigger("beforeshow", null, this);
      self.getActiveModal().lsModal("hide", false);
      if (!t) {
        self.element.css({
          "display" : "block",
          "visibility" : "hidden"
        });
      }
      this.element.css({
        "display" : "block",
        "visibility" : "hidden"
      });
      this.element.css({
        "margin-top" : this.options.center && this.element.outerHeight() < self.element.height() ? (self.element.height() - this.element.outerHeight()) / 2 : this.element.css("margin-top"),
        "margin-left" : (self.element.width() - this.element.outerWidth()) / 2
      });
      if (!t) {
        self.element.css({
          "display" : "none",
          "visibility" : "visible"
        });
      }
      this.element.css({
        "display" : "none",
        "visibility" : "visible"
      });
      if (!t) {
        self.show();
      }
      this._show(this.element, this.options.show, function() {
        this._trigger("aftershow", null, this);
      }.bind(this));
    },
    hide : function(type) {
      type = typeof type === "undefined" ? true : type;
      this._trigger("beforehide", null, this);
      this._hide(this.element, this.options.hide, function() {
        if (this.options.url) {
          this.element.remove();
        }
        if (type && !self.getActiveModal().not(this.element).length) {
          self.hide(function() {
            this._trigger("afterhide", null, this);
          }.bind(this));
        } else {
          this._trigger("afterhide", null, this);
        }
      }.bind(this));
    },
    toggle : function() {
      this[this.element.is(":visible") ? "hide" : "show"]();
    }
  });
  ls.modal = function($) {
    /**
     * @param {string} val
     * @param {!Object} data
     * @param {string} result
     * @return {undefined}
     */
    this.load = function(val, data, result) {
      result = result || {};
      if (!self.isVisible()) {
        self.show();
      }
      self.getActiveModal().lsModal("hide", false);
      element.show();
      /** @type {string} */
      result.url = val;
      result.params = data || {};
      ls.ajax.load(val, data, function(testPair) {
        element.hide();
        $($.trim(testPair["sText"])).lsModal(result).lsModal("show");
      }, {
        onError : function() {
          element.hide();
          self.hide();
        }
      });
    };
    /**
     * @return {undefined}
     */
    this.reload = function() {
      var i = self.getActiveModal();
      if (!i.length) {
        return;
      }
      var options = i.data("livestreet-modal").options;
      i.remove();
      ls.modal.load(options.url, options.params, options);
    };
    return this;
  }.call(ls.modal || {}, jQuery);
  self.element.on("click", function(mutationEvent) {
    if (mutationEvent.target == this) {
      self.getActiveModal().lsModal("hide");
      element.hide();
    }
  });
  $(document).on("keyup.modal", function(event) {
    var ignoreFunctions = self.getActiveModal();
    if (event.keyCode === 27 && ignoreFunctions.length) {
      ignoreFunctions.lsModal("hide");
    }
  });
  $(document).on("ready", function(s) {
    self.init();
    element.init();
    $(document).on("click", "[data-type=modal-toggle][data-modal-url]", function(event) {
      var data = ls.utils.getDataOptions($(this), "modal");
      var s = ls.utils.getDataOptions($(this), "param") || {};
      ls.modal.load(data.url, s, data);
      event.preventDefault();
    });
  });
  mainWindow.on("resize", function() {
    self.resize();
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsModalToggle", $.livestreet.lsComponent, {
    options : {
      modal : null,
      url : null,
      params : {},
      modalOptions : {}
    },
    _create : function() {
      this._super();
      this._modal = typeof this.option("modal") === "string" ? $("#" + this.option("modal")) : this.option("modal");
      this._on({
        click : "onClick"
      });
    },
    onClick : function(event) {
      if (this.option("url")) {
        ls.modal.load(this.option("url"), this.option("params"), $.extend(this.option("modalOptions"), {
          aftershow : function(error, data) {
            this._trigger("show", error, data);
          }.bind(this),
          afterhide : function(error, data) {
            this._trigger("hide", error, data);
          }.bind(this)
        }, this.getData("lsmodal")));
      } else {
        if (this._modal) {
          this._modal.lsModal("toggle");
        }
      }
      event.preventDefault();
    }
  });
})(jQuery);
(function() {
  var $;
  var AbstractChosen;
  var Chosen;
  var SelectParser;
  var _ref;
  /** @type {function(this:Object, *): boolean} */
  var __hasProp = {}.hasOwnProperty;
  /**
   * @param {!Object} child
   * @param {!Object} parent
   * @return {?}
   */
  var __extends = function(child, parent) {
    /**
     * @return {undefined}
     */
    function ctor() {
      /** @type {!Object} */
      this.constructor = child;
    }
    var key;
    for (key in parent) {
      if (__hasProp.call(parent, key)) {
        child[key] = parent[key];
      }
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  };
  SelectParser = function() {
    /**
     * @return {undefined}
     */
    function SelectParser() {
      /** @type {number} */
      this.options_index = 0;
      /** @type {!Array} */
      this.parsed = [];
    }
    /**
     * @param {!Object} child
     * @return {?}
     */
    SelectParser.prototype.add_node = function(child) {
      if (child.nodeName.toUpperCase() === "OPTGROUP") {
        return this.add_group(child);
      } else {
        return this.add_option(child);
      }
    };
    /**
     * @param {!Object} group
     * @return {?}
     */
    SelectParser.prototype.add_group = function(group) {
      var group_position;
      var child;
      var i;
      var childrenL;
      var children;
      var _results;
      group_position = this.parsed.length;
      this.parsed.push({
        array_index : group_position,
        group : true,
        label : this.escapeExpression(group.label),
        children : 0,
        disabled : group.disabled,
        classes : group.className
      });
      children = group.childNodes;
      /** @type {!Array} */
      _results = [];
      /** @type {number} */
      i = 0;
      childrenL = children.length;
      for (; i < childrenL; i++) {
        child = children[i];
        _results.push(this.add_option(child, group_position, group.disabled));
      }
      return _results;
    };
    /**
     * @param {!Object} option
     * @param {string} group_position
     * @param {boolean} group_disabled
     * @return {?}
     */
    SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
      if (option.nodeName.toUpperCase() === "OPTION") {
        if (option.text !== "") {
          if (group_position != null) {
            this.parsed[group_position].children += 1;
          }
          this.parsed.push({
            array_index : this.parsed.length,
            options_index : this.options_index,
            value : option.value,
            text : option.text,
            html : option.innerHTML,
            selected : option.selected,
            disabled : group_disabled === true ? group_disabled : option.disabled,
            group_array_index : group_position,
            classes : option.className,
            style : option.style.cssText
          });
        } else {
          this.parsed.push({
            array_index : this.parsed.length,
            options_index : this.options_index,
            empty : true
          });
        }
        return this.options_index += 1;
      }
    };
    /**
     * @param {string} text
     * @return {?}
     */
    SelectParser.prototype.escapeExpression = function(text) {
      var subwikiListsCache;
      var regEmotes;
      if (text == null || text === false) {
        return "";
      }
      if (!/[&<>"'`]/.test(text)) {
        return text;
      }
      subwikiListsCache = {
        "<" : "&lt;",
        ">" : "&gt;",
        '"' : "&quot;",
        "'" : "&#x27;",
        "`" : "&#x60;"
      };
      /** @type {!RegExp} */
      regEmotes = /&(?!\w+;)|[<>"'`]/g;
      return text.replace(regEmotes, function(wikiId) {
        return subwikiListsCache[wikiId] || "&amp;";
      });
    };
    return SelectParser;
  }();
  /**
   * @param {!Node} select
   * @return {?}
   */
  SelectParser.select_to_array = function(select) {
    var child;
    var parser;
    var _j;
    var _len;
    var _ref;
    parser = new SelectParser;
    _ref = select.childNodes;
    /** @type {number} */
    _j = 0;
    _len = _ref.length;
    for (; _j < _len; _j++) {
      child = _ref[_j];
      parser.add_node(child);
    }
    return parser.parsed;
  };
  AbstractChosen = function() {
    /**
     * @param {string} form_field
     * @param {!Object} options
     * @return {undefined}
     */
    function AbstractChosen(form_field, options) {
      /** @type {string} */
      this.form_field = form_field;
      this.options = options != null ? options : {};
      if (!AbstractChosen.browser_is_supported()) {
        return;
      }
      this.is_multiple = this.form_field.multiple;
      this.set_default_text();
      this.set_default_values();
      this.setup();
      this.set_up_html();
      this.register_observers();
      this.on_ready();
    }
    /**
     * @return {?}
     */
    AbstractChosen.prototype.set_default_values = function() {
      var _this = this;
      /**
       * @param {!Event} evt
       * @return {?}
       */
      this.click_test_action = function(evt) {
        return _this.test_active_click(evt);
      };
      /**
       * @param {?} evt
       * @return {?}
       */
      this.activate_action = function(evt) {
        return _this.activate_field(evt);
      };
      /** @type {boolean} */
      this.active_field = false;
      /** @type {boolean} */
      this.mouse_on_container = false;
      /** @type {boolean} */
      this.results_showing = false;
      /** @type {null} */
      this.result_highlighted = null;
      this.allow_single_deselect = this.options.allow_single_deselect != null && this.form_field.options[0] != null && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
      this.disable_search_threshold = this.options.disable_search_threshold || 0;
      this.disable_search = this.options.disable_search || false;
      this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;
      this.group_search = this.options.group_search != null ? this.options.group_search : true;
      this.search_contains = this.options.search_contains || false;
      this.single_backstroke_delete = this.options.single_backstroke_delete != null ? this.options.single_backstroke_delete : true;
      this.max_selected_options = this.options.max_selected_options || Infinity;
      this.inherit_select_classes = this.options.inherit_select_classes || false;
      this.display_selected_options = this.options.display_selected_options != null ? this.options.display_selected_options : true;
      return this.display_disabled_options = this.options.display_disabled_options != null ? this.options.display_disabled_options : true;
    };
    /**
     * @return {?}
     */
    AbstractChosen.prototype.set_default_text = function() {
      if (this.form_field.getAttribute("data-placeholder")) {
        this.default_text = this.form_field.getAttribute("data-placeholder");
      } else {
        if (this.is_multiple) {
          this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text;
        } else {
          this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text;
        }
      }
      return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text;
    };
    /**
     * @return {?}
     */
    AbstractChosen.prototype.mouse_enter = function() {
      return this.mouse_on_container = true;
    };
    /**
     * @return {?}
     */
    AbstractChosen.prototype.mouse_leave = function() {
      return this.mouse_on_container = false;
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    AbstractChosen.prototype.input_focus = function(evt) {
      var _this = this;
      if (this.is_multiple) {
        if (!this.active_field) {
          return setTimeout(function() {
            return _this.container_mousedown();
          }, 50);
        }
      } else {
        if (!this.active_field) {
          return this.activate_field();
        }
      }
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    AbstractChosen.prototype.input_blur = function(evt) {
      var _this = this;
      if (!this.mouse_on_container) {
        /** @type {boolean} */
        this.active_field = false;
        return setTimeout(function() {
          return _this.blur_test();
        }, 100);
      }
    };
    /**
     * @param {!Object} options
     * @return {?}
     */
    AbstractChosen.prototype.results_option_build = function(options) {
      var content;
      var data;
      var _i;
      var _len;
      var _ref;
      /** @type {string} */
      content = "";
      _ref = this.results_data;
      /** @type {number} */
      _i = 0;
      _len = _ref.length;
      for (; _i < _len; _i++) {
        data = _ref[_i];
        if (data.group) {
          content = content + this.result_add_group(data);
        } else {
          content = content + this.result_add_option(data);
        }
        if (options != null ? options.first : void 0) {
          if (data.selected && this.is_multiple) {
            this.choice_build(data);
          } else {
            if (data.selected && !this.is_multiple) {
              this.single_set_selected_text(data.html);
            }
          }
        }
      }
      return content;
    };
    /**
     * @param {!Object} option
     * @return {?}
     */
    AbstractChosen.prototype.result_add_option = function(option) {
      var classes;
      var li;
      if (!option.search_match) {
        return "";
      }
      if (!this.include_option_in_results(option)) {
        return "";
      }
      /** @type {!Array} */
      classes = [];
      if (!option.disabled && !(option.selected && this.is_multiple)) {
        classes.push("active-result");
      }
      if (option.disabled && !(option.selected && this.is_multiple)) {
        classes.push("disabled-result");
      }
      if (option.selected) {
        classes.push("result-selected");
      }
      if (option.group_array_index != null) {
        classes.push("group-option");
      }
      if (option.classes !== "") {
        classes.push(option.classes);
      }
      /** @type {!Element} */
      li = document.createElement("li");
      /** @type {string} */
      li.className = classes.join(" ");
      li.style.cssText = option.style;
      li.setAttribute("data-option-array-index", option.array_index);
      li.innerHTML = option.search_text;
      return this.outerHTML(li);
    };
    /**
     * @param {!Object} group
     * @return {?}
     */
    AbstractChosen.prototype.result_add_group = function(group) {
      var classes;
      var line;
      if (!(group.search_match || group.group_match)) {
        return "";
      }
      if (!(group.active_options > 0)) {
        return "";
      }
      /** @type {!Array} */
      classes = [];
      classes.push("group-result");
      if (group.classes) {
        classes.push(group.classes);
      }
      /** @type {!Element} */
      line = document.createElement("li");
      /** @type {string} */
      line.className = classes.join(" ");
      line.innerHTML = group.search_text;
      return this.outerHTML(line);
    };
    /**
     * @return {?}
     */
    AbstractChosen.prototype.results_update_field = function() {
      this.set_default_text();
      if (!this.is_multiple) {
        this.results_reset_cleanup();
      }
      this.result_clear_highlight();
      this.results_build();
      if (this.results_showing) {
        return this.winnow_results();
      }
    };
    /**
     * @return {?}
     */
    AbstractChosen.prototype.reset_single_select_options = function() {
      var s;
      var k;
      var r;
      var _ref;
      var _results;
      _ref = this.results_data;
      /** @type {!Array} */
      _results = [];
      /** @type {number} */
      k = 0;
      r = _ref.length;
      for (; k < r; k++) {
        s = _ref[k];
        if (s.selected) {
          _results.push(s.selected = false);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    /**
     * @return {?}
     */
    AbstractChosen.prototype.results_toggle = function() {
      if (this.results_showing) {
        return this.results_hide();
      } else {
        return this.results_show();
      }
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    AbstractChosen.prototype.results_search = function(evt) {
      if (this.results_showing) {
        return this.winnow_results();
      } else {
        return this.results_show();
      }
    };
    /**
     * @return {?}
     */
    AbstractChosen.prototype.winnow_results = function() {
      var escapedSearchText;
      var option;
      var regex;
      var results;
      var results_group;
      var searchText;
      var index;
      var uriTemplateText;
      var zregex;
      var _i;
      var _len;
      var _ref;
      this.no_results_clear();
      /** @type {number} */
      results = 0;
      searchText = this.get_search_text();
      escapedSearchText = searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
      /** @type {!RegExp} */
      zregex = new RegExp(escapedSearchText, "i");
      regex = this.get_search_regex(escapedSearchText);
      _ref = this.results_data;
      /** @type {number} */
      _i = 0;
      _len = _ref.length;
      for (; _i < _len; _i++) {
        option = _ref[_i];
        /** @type {boolean} */
        option.search_match = false;
        /** @type {null} */
        results_group = null;
        if (this.include_option_in_results(option)) {
          if (option.group) {
            /** @type {boolean} */
            option.group_match = false;
            /** @type {number} */
            option.active_options = 0;
          }
          if (option.group_array_index != null && this.results_data[option.group_array_index]) {
            results_group = this.results_data[option.group_array_index];
            if (results_group.active_options === 0 && results_group.search_match) {
              /** @type {number} */
              results = results + 1;
            }
            results_group.active_options += 1;
          }
          if (!(option.group && !this.group_search)) {
            option.search_text = option.group ? option.label : option.html;
            option.search_match = this.search_string_match(option.search_text, regex);
            if (option.search_match && !option.group) {
              /** @type {number} */
              results = results + 1;
            }
            if (option.search_match) {
              if (searchText.length) {
                index = option.search_text.search(zregex);
                /** @type {string} */
                uriTemplateText = option.search_text.substr(0, index + searchText.length) + "</em>" + option.search_text.substr(index + searchText.length);
                /** @type {string} */
                option.search_text = uriTemplateText.substr(0, index) + "<em>" + uriTemplateText.substr(index);
              }
              if (results_group != null) {
                /** @type {boolean} */
                results_group.group_match = true;
              }
            } else {
              if (option.group_array_index != null && this.results_data[option.group_array_index].search_match) {
                /** @type {boolean} */
                option.search_match = true;
              }
            }
          }
        }
      }
      this.result_clear_highlight();
      if (results < 1 && searchText.length) {
        this.update_results_content("");
        return this.no_results(searchText);
      } else {
        this.update_results_content(this.results_option_build());
        return this.winnow_results_set_highlight();
      }
    };
    /**
     * @param {string} escaped_search_string
     * @return {?}
     */
    AbstractChosen.prototype.get_search_regex = function(escaped_search_string) {
      var regex_anchor;
      /** @type {string} */
      regex_anchor = this.search_contains ? "" : "^";
      return new RegExp(regex_anchor + escaped_search_string, "i");
    };
    /**
     * @param {string} search_string
     * @param {!Object} regex
     * @return {?}
     */
    AbstractChosen.prototype.search_string_match = function(search_string, regex) {
      var event;
      var path;
      var i;
      var pos2;
      if (regex.test(search_string)) {
        return true;
      } else {
        if (this.enable_split_word_search && (search_string.indexOf(" ") >= 0 || search_string.indexOf("[") === 0)) {
          path = search_string.replace(/\[|\]/g, "").split(" ");
          if (path.length) {
            /** @type {number} */
            i = 0;
            pos2 = path.length;
            for (; i < pos2; i++) {
              event = path[i];
              if (regex.test(event)) {
                return true;
              }
            }
          }
        }
      }
    };
    /**
     * @return {?}
     */
    AbstractChosen.prototype.choices_count = function() {
      var s;
      var j;
      var dataUriLength;
      var _ref;
      if (this.selected_option_count != null) {
        return this.selected_option_count;
      }
      /** @type {number} */
      this.selected_option_count = 0;
      _ref = this.form_field.options;
      /** @type {number} */
      j = 0;
      dataUriLength = _ref.length;
      for (; j < dataUriLength; j++) {
        s = _ref[j];
        if (s.selected) {
          this.selected_option_count += 1;
        }
      }
      return this.selected_option_count;
    };
    /**
     * @param {!Event} evt
     * @return {?}
     */
    AbstractChosen.prototype.choices_click = function(evt) {
      evt.preventDefault();
      if (!(this.results_showing || this.is_disabled)) {
        return this.results_show();
      }
    };
    /**
     * @param {!Event} evt
     * @return {?}
     */
    AbstractChosen.prototype.keyup_checker = function(evt) {
      var f;
      var _ref2;
      f = (_ref2 = evt.which) != null ? _ref2 : evt.keyCode;
      this.search_field_scale();
      switch(f) {
        case 8:
          if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {
            return this.keydown_backstroke();
          } else {
            if (!this.pending_backstroke) {
              this.result_clear_highlight();
              return this.results_search();
            }
          }
          break;
        case 13:
          evt.preventDefault();
          if (this.results_showing) {
            return this.result_select(evt);
          }
          break;
        case 27:
          if (this.results_showing) {
            this.results_hide();
          }
          return true;
        case 9:
        case 38:
        case 40:
        case 16:
        case 91:
        case 17:
          break;
        default:
          return this.results_search();
      }
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    AbstractChosen.prototype.clipboard_event_checker = function(evt) {
      var _this = this;
      return setTimeout(function() {
        return _this.results_search();
      }, 50);
    };
    /**
     * @return {?}
     */
    AbstractChosen.prototype.container_width = function() {
      if (this.options.width != null) {
        return this.options.width;
      } else {
        return "" + this.form_field.offsetWidth + "px";
      }
    };
    /**
     * @param {!Object} option
     * @return {?}
     */
    AbstractChosen.prototype.include_option_in_results = function(option) {
      if (this.is_multiple && (!this.display_selected_options && option.selected)) {
        return false;
      }
      if (!this.display_disabled_options && option.disabled) {
        return false;
      }
      if (option.empty) {
        return false;
      }
      return true;
    };
    /**
     * @param {!Event} evt
     * @return {?}
     */
    AbstractChosen.prototype.search_results_touchstart = function(evt) {
      /** @type {boolean} */
      this.touch_started = true;
      return this.search_results_mouseover(evt);
    };
    /**
     * @param {!Event} evt
     * @return {?}
     */
    AbstractChosen.prototype.search_results_touchmove = function(evt) {
      /** @type {boolean} */
      this.touch_started = false;
      return this.search_results_mouseout(evt);
    };
    /**
     * @param {!Event} evt
     * @return {?}
     */
    AbstractChosen.prototype.search_results_touchend = function(evt) {
      if (this.touch_started) {
        return this.search_results_mouseup(evt);
      }
    };
    /**
     * @param {string} type
     * @return {?}
     */
    AbstractChosen.prototype.outerHTML = function(type) {
      var t;
      if (type.outerHTML) {
        return type.outerHTML;
      }
      /** @type {!Element} */
      t = document.createElement("div");
      t.appendChild(type);
      return t.innerHTML;
    };
    /**
     * @return {?}
     */
    AbstractChosen.browser_is_supported = function() {
      return true;
    };
    /** @type {string} */
    AbstractChosen.default_multiple_text = "\u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u0432\u0432\u043e\u0434\u0438\u0442\u044c";
    /** @type {string} */
    AbstractChosen.default_single_text = "";
    /** @type {string} */
    AbstractChosen.default_no_result_text = "\u041d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e";
    return AbstractChosen;
  }();
  $ = jQuery;
  $.fn.extend({
    chosen : function(type) {
      if (!AbstractChosen.browser_is_supported()) {
        return this;
      }
      return this.each(function(i) {
        var $this;
        var chosen;
        $this = $(this);
        chosen = $this.data("chosen");
        if (type === "destroy" && chosen instanceof Chosen) {
          chosen.destroy();
        } else {
          if (!(chosen instanceof Chosen)) {
            $this.data("chosen", new Chosen(this, type));
          }
        }
      });
    }
  });
  Chosen = function(_super) {
    /**
     * @return {?}
     */
    function Chosen() {
      _ref = Chosen.__super__.constructor.apply(this, arguments);
      return _ref;
    }
    __extends(Chosen, _super);
    /**
     * @return {?}
     */
    Chosen.prototype.setup = function() {
      this.form_field_jq = $(this.form_field);
      this.current_selectedIndex = this.form_field.selectedIndex;
      return this.is_rtl = this.form_field_jq.hasClass("chosen-rtl");
    };
    /**
     * @return {?}
     */
    Chosen.prototype.set_up_html = function() {
      var container_classes;
      var options;
      /** @type {!Array} */
      container_classes = ["chosen-container"];
      container_classes.push("chosen-container-" + (this.is_multiple ? "multi" : "single"));
      if (this.inherit_select_classes && this.form_field.className) {
        container_classes.push(this.form_field.className);
      }
      if (this.is_rtl) {
        container_classes.push("chosen-rtl");
      }
      options = {
        "class" : container_classes.join(" "),
        "style" : "width: " + this.container_width() + ";",
        "title" : this.form_field.title
      };
      if (this.form_field.id.length) {
        options.id = this.form_field.id.replace(/[^\w]/g, "_") + "_chosen";
      }
      this.container = $("<div />", options);
      if (this.is_multiple) {
        this.container.html('<ul class="chosen-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chosen-drop"><ul class="chosen-results"></ul></div>');
      } else {
        this.container.html('<a class="chosen-single chosen-default" tabindex="-1"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chosen-drop"><div class="chosen-search"><input type="text" autocomplete="off" /></div><ul class="chosen-results"></ul></div>');
      }
      this.form_field_jq.hide().after(this.container);
      this.dropdown = this.container.find("div.chosen-drop").first();
      this.search_field = this.container.find("input").first();
      this.search_results = this.container.find("ul.chosen-results").first();
      this.search_field_scale();
      this.search_no_results = this.container.find("li.no-results").first();
      if (this.is_multiple) {
        this.search_choices = this.container.find("ul.chosen-choices").first();
        this.search_container = this.container.find("li.search-field").first();
      } else {
        this.search_container = this.container.find("div.chosen-search").first();
        this.selected_item = this.container.find(".chosen-single").first();
      }
      this.results_build();
      this.set_tab_index();
      return this.set_label_behavior();
    };
    /**
     * @return {?}
     */
    Chosen.prototype.on_ready = function() {
      return this.form_field_jq.trigger("chosen:ready", {
        chosen : this
      });
    };
    /**
     * @return {?}
     */
    Chosen.prototype.register_observers = function() {
      var _this = this;
      this.container.bind("touchstart.chosen", function(evt) {
        _this.container_mousedown(evt);
      });
      this.container.bind("touchend.chosen", function(evt) {
        _this.container_mouseup(evt);
      });
      this.container.bind("mousedown.chosen", function(evt) {
        _this.container_mousedown(evt);
      });
      this.container.bind("mouseup.chosen", function(evt) {
        _this.container_mouseup(evt);
      });
      this.container.bind("mouseenter.chosen", function(evt) {
        _this.mouse_enter(evt);
      });
      this.container.bind("mouseleave.chosen", function(evt) {
        _this.mouse_leave(evt);
      });
      this.search_results.bind("mouseup.chosen", function(evt) {
        _this.search_results_mouseup(evt);
      });
      this.search_results.bind("mouseover.chosen", function(evt) {
        _this.search_results_mouseover(evt);
      });
      this.search_results.bind("mouseout.chosen", function(evt) {
        _this.search_results_mouseout(evt);
      });
      this.search_results.bind("mousewheel.chosen DOMMouseScroll.chosen", function(evt) {
        _this.search_results_mousewheel(evt);
      });
      this.search_results.bind("touchstart.chosen", function(evt) {
        _this.search_results_touchstart(evt);
      });
      this.search_results.bind("touchmove.chosen", function(evt) {
        _this.search_results_touchmove(evt);
      });
      this.search_results.bind("touchend.chosen", function(evt) {
        _this.search_results_touchend(evt);
      });
      this.form_field_jq.bind("chosen:updated.chosen", function(evt) {
        _this.results_update_field(evt);
      });
      this.form_field_jq.bind("chosen:activate.chosen", function(evt) {
        _this.activate_field(evt);
      });
      this.form_field_jq.bind("chosen:open.chosen", function(evt) {
        _this.container_mousedown(evt);
      });
      this.form_field_jq.bind("chosen:close.chosen", function(evt) {
        _this.input_blur(evt);
      });
      this.search_field.bind("blur.chosen", function(evt) {
        _this.input_blur(evt);
      });
      this.search_field.bind("keyup.chosen", function(evt) {
        _this.keyup_checker(evt);
      });
      this.search_field.bind("keydown.chosen", function(evt) {
        _this.keydown_checker(evt);
      });
      this.search_field.bind("focus.chosen", function(evt) {
        _this.input_focus(evt);
      });
      this.search_field.bind("cut.chosen", function(evt) {
        _this.clipboard_event_checker(evt);
      });
      this.search_field.bind("paste.chosen", function(evt) {
        _this.clipboard_event_checker(evt);
      });
      if (this.is_multiple) {
        return this.search_choices.bind("click.chosen", function(evt) {
          _this.choices_click(evt);
        });
      } else {
        return this.container.bind("click.chosen", function(event) {
          event.preventDefault();
        });
      }
    };
    /**
     * @return {?}
     */
    Chosen.prototype.destroy = function() {
      $(this.container[0].ownerDocument).unbind("click.chosen", this.click_test_action);
      if (this.search_field[0].tabIndex) {
        this.form_field_jq[0].tabIndex = this.search_field[0].tabIndex;
      }
      this.container.remove();
      this.form_field_jq.removeData("chosen");
      return this.form_field_jq.show();
    };
    /**
     * @return {?}
     */
    Chosen.prototype.search_field_disabled = function() {
      this.is_disabled = this.form_field_jq[0].disabled;
      if (this.is_disabled) {
        this.container.addClass("chosen-disabled");
        /** @type {boolean} */
        this.search_field[0].disabled = true;
        if (!this.is_multiple) {
          this.selected_item.unbind("focus.chosen", this.activate_action);
        }
        return this.close_field();
      } else {
        this.container.removeClass("chosen-disabled");
        /** @type {boolean} */
        this.search_field[0].disabled = false;
        if (!this.is_multiple) {
          return this.selected_item.bind("focus.chosen", this.activate_action);
        }
      }
    };
    /**
     * @param {!Object} evt
     * @return {?}
     */
    Chosen.prototype.container_mousedown = function(evt) {
      if (!this.is_disabled) {
        if (evt && evt.type === "mousedown" && !this.results_showing) {
          evt.preventDefault();
        }
        if (!(evt != null && $(evt.target).hasClass("search-choice-close"))) {
          if (!this.active_field) {
            if (this.is_multiple) {
              this.search_field.val("");
            }
            $(this.container[0].ownerDocument).bind("click.chosen", this.click_test_action);
            this.results_show();
          } else {
            if (!this.is_multiple && evt && ($(evt.target)[0] === this.selected_item[0] || $(evt.target).parents("a.chosen-single").length)) {
              evt.preventDefault();
              this.results_toggle();
            }
          }
          return this.activate_field();
        }
      }
    };
    /**
     * @param {!Event} evt
     * @return {?}
     */
    Chosen.prototype.container_mouseup = function(evt) {
      if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
        return this.results_reset(evt);
      }
    };
    /**
     * @param {!Object} evt
     * @return {?}
     */
    Chosen.prototype.search_results_mousewheel = function(evt) {
      var delta;
      if (evt.originalEvent) {
        delta = evt.originalEvent.deltaY || -evt.originalEvent.wheelDelta || evt.originalEvent.detail;
      }
      if (delta != null) {
        evt.preventDefault();
        if (evt.type === "DOMMouseScroll") {
          /** @type {number} */
          delta = delta * 40;
        }
        return this.search_results.scrollTop(delta + this.search_results.scrollTop());
      }
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    Chosen.prototype.blur_test = function(evt) {
      if (!this.active_field && this.container.hasClass("chosen-container-active")) {
        return this.close_field();
      }
    };
    /**
     * @return {?}
     */
    Chosen.prototype.close_field = function() {
      $(this.container[0].ownerDocument).unbind("click.chosen", this.click_test_action);
      /** @type {boolean} */
      this.active_field = false;
      this.results_hide();
      this.container.removeClass("chosen-container-active");
      this.clear_backstroke();
      this.show_search_field_default();
      return this.search_field_scale();
    };
    /**
     * @return {?}
     */
    Chosen.prototype.activate_field = function() {
      this.container.addClass("chosen-container-active");
      /** @type {boolean} */
      this.active_field = true;
      this.search_field.val(this.search_field.val());
      return this.search_field.focus();
    };
    /**
     * @param {!Event} evt
     * @return {?}
     */
    Chosen.prototype.test_active_click = function(evt) {
      var active_container;
      active_container = $(evt.target).closest(".chosen-container");
      if (active_container.length && this.container[0] === active_container[0]) {
        return this.active_field = true;
      } else {
        return this.close_field();
      }
    };
    /**
     * @return {?}
     */
    Chosen.prototype.results_build = function() {
      /** @type {boolean} */
      this.parsing = true;
      /** @type {null} */
      this.selected_option_count = null;
      this.results_data = SelectParser.select_to_array(this.form_field);
      if (this.is_multiple) {
        this.search_choices.find("li.search-choice").remove();
      } else {
        if (!this.is_multiple) {
          this.single_set_selected_text();
          if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {
            /** @type {boolean} */
            this.search_field[0].readOnly = true;
            this.container.addClass("chosen-container-single-nosearch");
          } else {
            /** @type {boolean} */
            this.search_field[0].readOnly = false;
            this.container.removeClass("chosen-container-single-nosearch");
          }
        }
      }
      this.update_results_content(this.results_option_build({
        first : true
      }));
      this.search_field_disabled();
      this.show_search_field_default();
      this.search_field_scale();
      return this.parsing = false;
    };
    /**
     * @param {number} el
     * @return {?}
     */
    Chosen.prototype.result_do_highlight = function(el) {
      var e;
      var s;
      var count;
      var end;
      var start;
      if (el.length) {
        this.result_clear_highlight();
        /** @type {number} */
        this.result_highlight = el;
        this.result_highlight.addClass("highlighted");
        /** @type {number} */
        count = parseInt(this.search_results.css("maxHeight"), 10);
        start = this.search_results.scrollTop();
        end = count + start;
        s = this.result_highlight.position().top + this.search_results.scrollTop();
        e = s + this.result_highlight.outerHeight();
        if (e >= end) {
          return this.search_results.scrollTop(e - count > 0 ? e - count : 0);
        } else {
          if (s < start) {
            return this.search_results.scrollTop(s);
          }
        }
      }
    };
    /**
     * @return {?}
     */
    Chosen.prototype.result_clear_highlight = function() {
      if (this.result_highlight) {
        this.result_highlight.removeClass("highlighted");
      }
      return this.result_highlight = null;
    };
    /**
     * @return {?}
     */
    Chosen.prototype.results_show = function() {
      if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
        this.form_field_jq.trigger("chosen:maxselected", {
          chosen : this
        });
        return false;
      }
      this.container.addClass("chosen-with-drop");
      /** @type {boolean} */
      this.results_showing = true;
      this.search_field.focus();
      this.search_field.val(this.search_field.val());
      this.winnow_results();
      return this.form_field_jq.trigger("chosen:showing_dropdown", {
        chosen : this
      });
    };
    /**
     * @param {string} content
     * @return {?}
     */
    Chosen.prototype.update_results_content = function(content) {
      return this.search_results.html(content);
    };
    /**
     * @return {?}
     */
    Chosen.prototype.results_hide = function() {
      if (this.results_showing) {
        this.result_clear_highlight();
        this.container.removeClass("chosen-with-drop");
        this.form_field_jq.trigger("chosen:hiding_dropdown", {
          chosen : this
        });
      }
      return this.results_showing = false;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    Chosen.prototype.set_tab_index = function(el) {
      var ti;
      if (this.form_field.tabIndex) {
        ti = this.form_field.tabIndex;
        /** @type {number} */
        this.form_field.tabIndex = -1;
        return this.search_field[0].tabIndex = ti;
      }
    };
    /**
     * @return {?}
     */
    Chosen.prototype.set_label_behavior = function() {
      var _this = this;
      this.form_field_label = this.form_field_jq.parents("label");
      if (!this.form_field_label.length && this.form_field.id.length) {
        this.form_field_label = $("label[for='" + this.form_field.id + "']");
      }
      if (this.form_field_label.length > 0) {
        return this.form_field_label.bind("click.chosen", function(evt) {
          if (_this.is_multiple) {
            return _this.container_mousedown(evt);
          } else {
            return _this.activate_field();
          }
        });
      }
    };
    /**
     * @return {?}
     */
    Chosen.prototype.show_search_field_default = function() {
      if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {
        this.search_field.val(this.default_text);
        return this.search_field.addClass("default");
      } else {
        this.search_field.val("");
        return this.search_field.removeClass("default");
      }
    };
    /**
     * @param {!Event} evt
     * @return {?}
     */
    Chosen.prototype.search_results_mouseup = function(evt) {
      var target;
      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target.length) {
        this.result_highlight = target;
        this.result_select(evt);
        return this.search_field.focus();
      }
    };
    /**
     * @param {!Event} evt
     * @return {?}
     */
    Chosen.prototype.search_results_mouseover = function(evt) {
      var do_high;
      do_high = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (do_high) {
        return this.result_do_highlight(do_high);
      }
    };
    /**
     * @param {!Event} evt
     * @return {?}
     */
    Chosen.prototype.search_results_mouseout = function(evt) {
      if ($(evt.target).hasClass("active-result" || $(evt.target).parents(".active-result").first())) {
        return this.result_clear_highlight();
      }
    };
    /**
     * @param {!Object} item
     * @return {?}
     */
    Chosen.prototype.choice_build = function(item) {
      var choice;
      var div;
      var _this = this;
      choice = $("<li />", {
        "class" : "search-choice"
      }).html("<span>" + item.html + "</span>");
      if (item.disabled) {
        choice.addClass("search-choice-disabled");
      } else {
        div = $("<a />", {
          "class" : "search-choice-close",
          "data-option-array-index" : item.array_index
        });
        div.bind("click.chosen", function(evt) {
          return _this.choice_destroy_link_click(evt);
        });
        choice.append(div);
      }
      return this.search_container.before(choice);
    };
    /**
     * @param {!Event} evt
     * @return {?}
     */
    Chosen.prototype.choice_destroy_link_click = function(evt) {
      evt.preventDefault();
      evt.stopPropagation();
      if (!this.is_disabled) {
        return this.choice_destroy($(evt.target));
      }
    };
    /**
     * @param {!Object} link
     * @return {?}
     */
    Chosen.prototype.choice_destroy = function(link) {
      if (this.result_deselect(link[0].getAttribute("data-option-array-index"))) {
        this.show_search_field_default();
        if (this.is_multiple && this.choices_count() > 0 && this.search_field.val().length < 1) {
          this.results_hide();
        }
        link.parents("li").first().remove();
        return this.search_field_scale();
      }
    };
    /**
     * @return {?}
     */
    Chosen.prototype.results_reset = function() {
      this.reset_single_select_options();
      /** @type {boolean} */
      this.form_field.options[0].selected = true;
      this.single_set_selected_text();
      this.show_search_field_default();
      this.results_reset_cleanup();
      this.form_field_jq.trigger("change");
      if (this.active_field) {
        return this.results_hide();
      }
    };
    /**
     * @return {?}
     */
    Chosen.prototype.results_reset_cleanup = function() {
      this.current_selectedIndex = this.form_field.selectedIndex;
      return this.selected_item.find("abbr").remove();
    };
    /**
     * @param {!Event} evt
     * @return {?}
     */
    Chosen.prototype.result_select = function(evt) {
      var high;
      var item;
      if (this.result_highlight) {
        high = this.result_highlight;
        this.result_clear_highlight();
        if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
          this.form_field_jq.trigger("chosen:maxselected", {
            chosen : this
          });
          return false;
        }
        if (this.is_multiple) {
          high.removeClass("active-result");
        } else {
          this.reset_single_select_options();
        }
        item = this.results_data[high[0].getAttribute("data-option-array-index")];
        /** @type {boolean} */
        item.selected = true;
        /** @type {boolean} */
        this.form_field.options[item.options_index].selected = true;
        /** @type {null} */
        this.selected_option_count = null;
        if (this.is_multiple) {
          this.choice_build(item);
        } else {
          this.single_set_selected_text(item.text);
        }
        if (!((evt.metaKey || evt.ctrlKey) && this.is_multiple)) {
          this.results_hide();
        }
        this.search_field.val("");
        if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) {
          this.form_field_jq.trigger("change", {
            "selected" : this.form_field.options[item.options_index].value
          });
        }
        this.current_selectedIndex = this.form_field.selectedIndex;
        return this.search_field_scale();
      }
    };
    /**
     * @param {string} text
     * @return {?}
     */
    Chosen.prototype.single_set_selected_text = function(text) {
      if (text == null) {
        text = this.default_text;
      }
      if (text === this.default_text) {
        this.selected_item.addClass("chosen-default");
      } else {
        this.single_deselect_control_build();
        this.selected_item.removeClass("chosen-default");
      }
      return this.selected_item.find("span").text(text);
    };
    /**
     * @param {?} pos
     * @return {?}
     */
    Chosen.prototype.result_deselect = function(pos) {
      var result_data;
      result_data = this.results_data[pos];
      if (!this.form_field.options[result_data.options_index].disabled) {
        /** @type {boolean} */
        result_data.selected = false;
        /** @type {boolean} */
        this.form_field.options[result_data.options_index].selected = false;
        /** @type {null} */
        this.selected_option_count = null;
        this.result_clear_highlight();
        if (this.results_showing) {
          this.winnow_results();
        }
        this.form_field_jq.trigger("change", {
          deselected : this.form_field.options[result_data.options_index].value
        });
        this.search_field_scale();
        return true;
      } else {
        return false;
      }
    };
    /**
     * @return {?}
     */
    Chosen.prototype.single_deselect_control_build = function() {
      if (!this.allow_single_deselect) {
        return;
      }
      if (!this.selected_item.find("abbr").length) {
        this.selected_item.find("span").first().after('<abbr class="search-choice-close"></abbr>');
      }
      return this.selected_item.addClass("chosen-single-with-deselect");
    };
    /**
     * @return {?}
     */
    Chosen.prototype.get_search_text = function() {
      if (this.search_field.val() === this.default_text) {
        return "";
      } else {
        return $("<div/>").text($.trim(this.search_field.val())).html();
      }
    };
    /**
     * @return {?}
     */
    Chosen.prototype.winnow_results_set_highlight = function() {
      var do_high;
      var tokQue;
      tokQue = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
      do_high = tokQue.length ? tokQue.first() : this.search_results.find(".active-result").first();
      if (do_high != null) {
        return this.result_do_highlight(do_high);
      }
    };
    /**
     * @param {string} terms
     * @return {?}
     */
    Chosen.prototype.no_results = function(terms) {
      var content;
      content = $('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>');
      content.find("span").first().html(terms);
      this.search_results.append(content);
      return this.form_field_jq.trigger("chosen:no_results", {
        chosen : this
      });
    };
    /**
     * @return {?}
     */
    Chosen.prototype.no_results_clear = function() {
      return this.search_results.find(".no-results").remove();
    };
    /**
     * @return {?}
     */
    Chosen.prototype.keydown_arrow = function() {
      var do_high;
      if (this.results_showing && this.result_highlight) {
        do_high = this.result_highlight.nextAll("li.active-result").first();
        if (do_high) {
          return this.result_do_highlight(do_high);
        }
      } else {
        return this.results_show();
      }
    };
    /**
     * @return {?}
     */
    Chosen.prototype.keyup_arrow = function() {
      var tokQue;
      if (!this.results_showing && !this.is_multiple) {
        return this.results_show();
      } else {
        if (this.result_highlight) {
          tokQue = this.result_highlight.prevAll("li.active-result");
          if (tokQue.length) {
            return this.result_do_highlight(tokQue.first());
          } else {
            if (this.choices_count() > 0) {
              this.results_hide();
            }
            return this.result_clear_highlight();
          }
        }
      }
    };
    /**
     * @return {?}
     */
    Chosen.prototype.keydown_backstroke = function() {
      var next_available_destroy;
      if (this.pending_backstroke) {
        this.choice_destroy(this.pending_backstroke.find("a").first());
        return this.clear_backstroke();
      } else {
        next_available_destroy = this.search_container.siblings("li.search-choice").last();
        if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {
          this.pending_backstroke = next_available_destroy;
          if (this.single_backstroke_delete) {
            return this.keydown_backstroke();
          } else {
            return this.pending_backstroke.addClass("search-choice-focus");
          }
        }
      }
    };
    /**
     * @return {?}
     */
    Chosen.prototype.clear_backstroke = function() {
      if (this.pending_backstroke) {
        this.pending_backstroke.removeClass("search-choice-focus");
      }
      return this.pending_backstroke = null;
    };
    /**
     * @param {!Event} evt
     * @return {undefined}
     */
    Chosen.prototype.keydown_checker = function(evt) {
      var f;
      var _ref2;
      f = (_ref2 = evt.which) != null ? _ref2 : evt.keyCode;
      this.search_field_scale();
      if (f !== 8 && this.pending_backstroke) {
        this.clear_backstroke();
      }
      switch(f) {
        case 8:
          this.backstroke_length = this.search_field.val().length;
          break;
        case 9:
          if (this.results_showing && !this.is_multiple) {
            this.result_select(evt);
          }
          /** @type {boolean} */
          this.mouse_on_container = false;
          break;
        case 13:
          if (this.results_showing) {
            evt.preventDefault();
          }
          break;
        case 32:
          if (this.disable_search) {
            evt.preventDefault();
          }
          break;
        case 38:
          evt.preventDefault();
          this.keyup_arrow();
          break;
        case 40:
          evt.preventDefault();
          this.keydown_arrow();
          break;
      }
    };
    /**
     * @return {?}
     */
    Chosen.prototype.search_field_scale = function() {
      var t;
      var f_width;
      var c;
      var style;
      var style_string;
      var styles;
      var w;
      var j;
      var i;
      if (this.is_multiple) {
        /** @type {number} */
        c = 0;
        /** @type {number} */
        w = 0;
        /** @type {string} */
        style_string = "position:absolute; left: -1000px; top: -1000px; display:none;";
        /** @type {!Array} */
        styles = ["font-size", "font-style", "font-weight", "font-family", "line-height", "text-transform", "letter-spacing"];
        /** @type {number} */
        j = 0;
        /** @type {number} */
        i = styles.length;
        for (; j < i; j++) {
          style = styles[j];
          /** @type {string} */
          style_string = style_string + (style + ":" + this.search_field.css(style) + ";");
        }
        t = $("<div />", {
          "style" : style_string
        });
        t.text(this.search_field.val());
        $("body").append(t);
        w = t.width() + 25;
        t.remove();
        f_width = this.container.outerWidth();
        if (w > f_width - 10) {
          /** @type {number} */
          w = f_width - 10;
        }
        return this.search_field.css({
          "width" : w + "px"
        });
      }
    };
    return Chosen;
  }(AbstractChosen);
}).call(this);
(function() {
  var $;
  var ScriptProcessor;
  var _ref12;
  /** @type {function(this:(IArrayLike<T>|string), T, number=): number} */
  var charts = [].indexOf || function(item) {
    /** @type {number} */
    var i = 0;
    var l = this.length;
    for (; i < l; i++) {
      if (i in this && this[i] === item) {
        return i;
      }
    }
    return -1;
  };
  /** @type {function(this:Object, *): boolean} */
  var __hasProp = {}.hasOwnProperty;
  /**
   * @param {!Object} child
   * @param {!Object} parent
   * @return {?}
   */
  var __extends = function(child, parent) {
    /**
     * @return {undefined}
     */
    function ctor() {
      /** @type {!Object} */
      this.constructor = child;
    }
    var key;
    for (key in parent) {
      if (__hasProp.call(parent, key)) {
        child[key] = parent[key];
      }
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  };
  ScriptProcessor = function() {
    /**
     * @return {undefined}
     */
    function i() {
    }
    var pkgEl;
    var callback;
    var t;
    var update;
    var insert;
    var _daemon_command;
    var setSelection;
    pkgEl = {
      invalid_select_element : "ChosenOrder::{{function}}: first argument must be a valid HTML Multiple Select element that has been Chosenified!",
      invalid_selection_array : "ChosenOrder::{{function}}: second argument must be an Array!",
      unreachable_chosen_container : 'ChosenOrder::{{function}}: could not find the Chosen UI container! To solve the problem, try adding an "id" attribute to your <select> element.'
    };
    /**
     * @param {!Object} div
     * @param {!Object} i
     * @param {!Element} table
     * @return {?}
     */
    insert = function(div, i, table) {
      return table.insertBefore(div, table.children[i].nextSibling);
    };
    /**
     * @param {!Object} element
     * @return {?}
     */
    update = function(element) {
      var t;
      var def;
      var a_group_rules;
      var hash;
      var hashes;
      var r;
      var i;
      var a_group_rules_len;
      var length;
      /** @type {!Array<?>} */
      a_group_rules = Array.prototype.filter.call(element.childNodes, function(e) {
        var tag;
        return (tag = e.nodeName.toUpperCase()) === "OPTION" || tag === "OPTGROUP";
      });
      /** @type {!Array} */
      t = [];
      /** @type {number} */
      r = 0;
      /** @type {number} */
      a_group_rules_len = a_group_rules.length;
      for (; r < a_group_rules_len; r++) {
        def = a_group_rules[r];
        t.push(def);
        if (def.nodeName.toUpperCase() === "OPTGROUP") {
          /** @type {!Array<?>} */
          hashes = Array.prototype.filter.call(def.childNodes, function(e) {
            return e.nodeName.toUpperCase() === "OPTION";
          });
          /** @type {number} */
          i = 0;
          /** @type {number} */
          length = hashes.length;
          for (; i < length; i++) {
            hash = hashes[i];
            t.push(hash);
          }
        }
      }
      return t;
    };
    /**
     * @param {!Object} input
     * @return {?}
     */
    setSelection = function(input) {
      return input !== null && typeof input !== "undefined" && input.nodeName === "SELECT" && input.multiple;
    };
    /**
     * @param {!Object} input
     * @return {?}
     */
    t = function(input) {
      if (input.id !== "") {
        return document.getElementById(input.id.replace(/-/g, "_") + "_chosen");
      } else {
        return searchChosenUIContainer(input);
      }
    };
    /**
     * @param {!Object} options
     * @return {?}
     */
    _daemon_command = function(options) {
      return t(options) != null;
    };
    /**
     * @param {?} chart
     * @return {?}
     */
    callback = function(chart) {
      var sI;
      var object;
      var storage;
      var data;
      storage = update(this);
      /** @type {number} */
      sI = 0;
      for (; sI < storage.length;) {
        object = storage[sI];
        if (data = object.getAttribute("value"), charts.call(chart, data) >= 0) {
          /** @type {boolean} */
          object.selected = true;
          object.setAttribute("selected", "");
        } else {
          /** @type {boolean} */
          object.selected = false;
          object.removeAttribute("selected");
        }
        sI++;
      }
      return triggerEvent(this, "chosen:updated");
    };
    /**
     * @param {?} value
     * @return {?}
     */
    i.getSelectionOrder = function(value) {
      var tables;
      var output;
      var a;
      var tr;
      var page;
      var result;
      var re;
      var pageid;
      var i;
      var tableslen;
      if (typeof getDOMElement !== "undefined" && getDOMElement !== null) {
        value = getDOMElement(value);
      }
      /** @type {!Array} */
      re = [];
      if (!setSelection(value)) {
        console.error(pkgEl.invalid_select_element.replace("{{function}}", "getSelectionOrder"));
        return re;
      }
      output = t(value);
      if (output == null) {
        console.error(pkgEl.unreachable_chosen_container.replace("{{function}}", "getSelectionOrder"));
        return re;
      }
      tables = output.querySelectorAll(".search-choice");
      result = update(value);
      /** @type {number} */
      i = 0;
      tableslen = tables.length;
      for (; i < tableslen; i++) {
        tr = tables[i];
        a = tr.querySelectorAll(".search-choice-close")[0];
        if (a != null) {
          pageid = a.getAttribute(this.relAttributeName);
        }
        page = result[pageid];
        re.push(page.value);
      }
      return re;
    };
    /**
     * @param {?} value
     * @param {!Array} array
     * @param {!Object} asyncFunction
     * @return {?}
     */
    i.setSelectionOrder = function(value, array, asyncFunction) {
      var E;
      var placeMidpointLine;
      var html;
      var i;
      var a;
      var action;
      var item;
      var result;
      var state;
      var _x$2;
      var C;
      var _i;
      var c;
      var _len;
      var len;
      var requestQueue;
      if (typeof getDOMElement !== "undefined" && getDOMElement !== null) {
        value = getDOMElement(value);
      }
      if (!setSelection(value)) {
        console.error(pkgEl.invalid_select_element.replace("{{function}}", "setSelectionOrder"));
        return;
      }
      html = t(value);
      if (html == null) {
        console.error(pkgEl.unreachable_chosen_container.replace("{{function}}", "setSelectionOrder"));
        return;
      }
      if (array instanceof Array) {
        /** @type {!Array<*>} */
        array = array.map(Function.prototype.call, String.prototype.trim);
        state = update(value);
        if (asyncFunction != null && asyncFunction === true) {
          callback.call(value, array);
        }
        /** @type {!Array} */
        requestQueue = [];
        /** @type {number} */
        i = _i = 0;
        /** @type {number} */
        _len = array.length;
        for (; _i < _len; i = ++_i) {
          /** @type {*} */
          item = array[i];
          /** @type {null} */
          _x$2 = null;
          /** @type {number} */
          a = c = 0;
          len = state.length;
          for (; c < len; a = ++c) {
            action = state[a];
            if (action.value === item) {
              /** @type {number} */
              _x$2 = a;
            }
          }
          placeMidpointLine = html.querySelectorAll(".search-choice");
          C = this.relAttributeName;
          result = Array.prototype.filter.call(placeMidpointLine, function(fieldsetLabel) {
            return fieldsetLabel.querySelector("a.search-choice-close[" + C + '="' + _x$2 + '"]') != null;
          })[0];
          E = html.querySelector("ul.chosen-choices");
          requestQueue.push(insert(result, i, html.querySelector("ul.chosen-choices")));
        }
        return requestQueue;
      } else {
        return console.error(pkgEl.invalid_selection_array.replace("{{function}}", "setSelectionOrder"));
      }
    };
    return i;
  }();
  $ = jQuery;
  $.fn.extend({
    getSelectionOrder : function() {
      return ChosenOrder.getSelectionOrder(this);
    },
    setSelectionOrder : function(fn, t) {
      return ChosenOrder.setSelectionOrder(this, fn, t);
    }
  });
  this.ChosenOrder = function(_super) {
    /**
     * @return {?}
     */
    function BlockEntryToken() {
      _ref12 = BlockEntryToken.__super__.constructor.apply(this, arguments);
      return _ref12;
    }
    var assert;
    __extends(BlockEntryToken, _super);
    /** @type {string} */
    BlockEntryToken.relAttributeName = "data-option-array-index";
    /**
     * @param {?} needle
     * @return {?}
     */
    assert = function(needle) {
      return typeof jQuery !== "undefined" && jQuery !== null && needle instanceof jQuery;
    };
    /**
     * @param {(Object|string)} el
     * @return {?}
     */
    parent.getDOMElement = function(el) {
      if (assert(el)) {
        return el.get(0);
      } else {
        return el;
      }
    };
    /**
     * @param {?} link
     * @return {?}
     */
    parent.searchChosenUIContainer = function(link) {
      if ($(link).data("chosen") != null) {
        return $(link).data("chosen").container[0];
      } else {
        return $(link).next(".chosen-container.chosen-container-multi").get(0);
      }
    };
    /**
     * @param {?} elem
     * @param {undefined} type
     * @return {?}
     */
    parent.triggerEvent = function(elem, type) {
      return $(elem).trigger(type);
    };
    return BlockEntryToken;
  }(ScriptProcessor);
}).call(this);
(function($) {
  return $.fn.ajaxChosen = function(settings, callback, testad_id) {
    var proxyReq;
    var defaultOptions;
    var options;
    var n;
    if (settings == null) {
      settings = {};
    }
    if (testad_id == null) {
      testad_id = {};
    }
    defaultOptions = {
      minTermLength : 3,
      afterTypeDelay : 500,
      jsonTermKey : "term",
      keepTypingMsg : "Keep typing...",
      lookingForMsg : "Looking for"
    };
    n = this;
    /** @type {null} */
    proxyReq = null;
    options = $.extend({}, defaultOptions, $(n).data(), settings);
    this.chosen(testad_id ? testad_id : {});
    return this.each(function() {
      return $(this).next(".chosen-container").find(".search-field > input, .chosen-search > input").bind("keyup", function() {
        var result;
        var l;
        var success;
        var u;
        var val;
        u = $(this).val();
        val = $.trim($(this).val());
        l = val.length < options.minTermLength ? options.keepTypingMsg : options.lookingForMsg + (" '" + val + "'");
        n.next(".chosen-container").find(".no-results").text(l);
        if (val === $(this).data("prevVal")) {
          return false;
        }
        $(this).data("prevVal", val);
        if (this.timer) {
          clearTimeout(this.timer);
        }
        if (val.length < options.minTermLength) {
          return false;
        }
        result = $(this);
        if (options.data == null) {
          options.data = {};
        }
        options.data[options.jsonTermKey] = val;
        if (options.dataCallback != null) {
          options.data = options.dataCallback(options.data);
        }
        /** @type {function(string): ?} */
        success = options.success;
        /**
         * @param {string} type
         * @return {?}
         */
        options.success = function(type) {
          var headers;
          var d;
          var a;
          if (type == null) {
            return;
          }
          /** @type {!Array} */
          a = [];
          n.find("option").each(function() {
            if (!$(this).is(":selected")) {
              return $(this).remove();
            } else {
              return a.push($(this).val() + "-" + $(this).text());
            }
          });
          n.find("optgroup:empty").each(function() {
            return $(this).remove();
          });
          headers = callback != null ? callback(type, result) : type;
          /** @type {number} */
          d = 0;
          $.each(headers, function(objectkey, item) {
            var t;
            var value;
            var key;
            d++;
            if (item.group) {
              t = n.find("optgroup[label='" + item.text + "']");
              if (!t.size()) {
                t = $("<optgroup />");
              }
              t.attr("label", item.text).appendTo(n);
              return $.each(item.items, function(content_script, token) {
                var value;
                var name;
                if (typeof token === "string") {
                  /** @type {number} */
                  name = content_script;
                  /** @type {!Object} */
                  value = token;
                } else {
                  name = token.value;
                  value = token.text;
                }
                if ($.inArray(name + "-" + value, a) === -1) {
                  return $("<option />").attr("value", name).html(value).appendTo(t);
                }
              });
            } else {
              if (typeof item === "string") {
                /** @type {number} */
                key = objectkey;
                /** @type {!Object} */
                value = item;
              } else {
                key = item.value;
                value = item.text;
              }
              if ($.inArray(key + "-" + value, a) === -1) {
                return $("<option />").attr("value", key).html(value).appendTo(n);
              }
            }
          });
          if (d) {
            n.trigger("chosen:updated");
          } else {
            n.data().chosen.no_results_clear();
            var inputTokens = $("<div/>").text($.trim(result.val())).html();
            n.data().chosen.no_results(inputTokens);
          }
          if (settings.success != null) {
            settings.success(type);
          }
          return result.val(u);
        };
        return this.timer = setTimeout(function() {
          if (proxyReq) {
            proxyReq.abort();
          }
          return proxyReq = $.ajax(options);
        }, options.afterTypeDelay);
      });
    });
  };
})(jQuery);
(function(factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else {
    if (typeof exports === "object" && typeof require === "function") {
      factory(require("jquery"));
    } else {
      factory(jQuery);
    }
  }
})(function($) {
  /**
   * @param {!Node} el
   * @param {?} options
   * @return {undefined}
   */
  function Autocomplete(el, options) {
    /**
     * @return {undefined}
     */
    var noop = function() {
    };
    var that = this;
    var defaults = {
      ajaxSettings : {},
      autoSelectFirst : false,
      appendTo : document.body,
      serviceUrl : null,
      lookup : null,
      onSelect : null,
      width : "auto",
      minChars : 1,
      maxHeight : 300,
      deferRequestBy : 0,
      params : {},
      formatResult : Autocomplete.formatResult,
      delimiter : null,
      zIndex : 9999,
      type : "GET",
      noCache : false,
      onSearchStart : noop,
      onSearchComplete : noop,
      onSearchError : noop,
      preserveInput : false,
      containerClass : "autocomplete-suggestions",
      tabDisabled : false,
      dataType : "text",
      currentRequest : null,
      triggerSelectOnValidInput : true,
      preventBadQueries : true,
      lookupFilter : function(suggestion, originalQuery, queryLowerCase) {
        return suggestion.value.toLowerCase().indexOf(queryLowerCase) !== -1;
      },
      paramName : "query",
      transformResult : function(response) {
        return typeof response === "string" ? $.parseJSON(response) : response;
      },
      showNoSuggestionNotice : false,
      noSuggestionNotice : "No results",
      orientation : "bottom",
      forceFixPosition : false
    };
    /** @type {!Node} */
    that.element = el;
    that.el = $(el);
    /** @type {!Array} */
    that.suggestions = [];
    /** @type {!Array} */
    that.badQueries = [];
    /** @type {number} */
    that.selectedIndex = -1;
    that.currentValue = that.element.value;
    /** @type {number} */
    that.intervalId = 0;
    that.cachedResponse = {};
    /** @type {null} */
    that.onChangeInterval = null;
    /** @type {null} */
    that.onChange = null;
    /** @type {boolean} */
    that.isLocal = false;
    /** @type {null} */
    that.suggestionsContainer = null;
    /** @type {null} */
    that.noSuggestionsContainer = null;
    that.options = $.extend({}, defaults, options);
    that.classes = {
      selected : "autocomplete-selected",
      suggestion : "autocomplete-suggestion"
    };
    /** @type {null} */
    that.hint = null;
    /** @type {string} */
    that.hintValue = "";
    /** @type {null} */
    that.selection = null;
    that.initialize();
    that.setOptions(options);
  }
  var utils = function() {
    return {
      escapeRegExChars : function(value) {
        return value.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
      },
      createNode : function(innerHTML) {
        /** @type {!Element} */
        var div = document.createElement("div");
        /** @type {string} */
        div.className = innerHTML;
        /** @type {string} */
        div.style.position = "absolute";
        /** @type {string} */
        div.style.display = "none";
        return div;
      }
    };
  }();
  var keys = {
    ESC : 27,
    TAB : 9,
    RETURN : 13,
    LEFT : 37,
    UP : 38,
    RIGHT : 39,
    DOWN : 40
  };
  Autocomplete.utils = utils;
  /** @type {function(!Node, ?): undefined} */
  $.Autocomplete = Autocomplete;
  /**
   * @param {!Object} suggestion
   * @param {string} currentValue
   * @return {?}
   */
  Autocomplete.formatResult = function(suggestion, currentValue) {
    /** @type {string} */
    var u_dec = "(" + utils.escapeRegExChars(currentValue) + ")";
    return suggestion.value.replace(new RegExp(u_dec, "gi"), "<strong>$1</strong>").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/&lt;(\/?strong)&gt;/g, "<$1>");
  };
  Autocomplete.prototype = {
    killerFn : null,
    initialize : function() {
      var that = this;
      /** @type {string} */
      var s = "." + that.classes.suggestion;
      var selected = that.classes.selected;
      var options = that.options;
      var container;
      that.element.setAttribute("autocomplete", "off");
      /**
       * @param {!Event} e
       * @return {undefined}
       */
      that.killerFn = function(e) {
        if ($(e.target).closest("." + that.options.containerClass).length === 0) {
          that.killSuggestions();
          that.disableKillerFn();
        }
      };
      that.noSuggestionsContainer = $('<div class="autocomplete-no-suggestion"></div>').html(this.options.noSuggestionNotice).get(0);
      that.suggestionsContainer = Autocomplete.utils.createNode(options.containerClass);
      container = $(that.suggestionsContainer);
      container.appendTo(options.appendTo);
      if (options.width !== "auto") {
        container.width(options.width);
      }
      container.on("mouseover.autocomplete", s, function() {
        that.activate($(this).data("index"));
      });
      container.on("mouseout.autocomplete", function() {
        /** @type {number} */
        that.selectedIndex = -1;
        container.children("." + selected).removeClass(selected);
      });
      container.on("click.autocomplete", s, function() {
        that.select($(this).data("index"));
      });
      /**
       * @return {undefined}
       */
      that.fixPositionCapture = function() {
        if (that.visible) {
          that.fixPosition();
        }
      };
      $(window).on("resize.autocomplete", that.fixPositionCapture);
      that.el.on("keydown.autocomplete", function(e) {
        that.onKeyPress(e);
      });
      that.el.on("keyup.autocomplete", function(event) {
        that.onKeyUp(event);
      });
      that.el.on("blur.autocomplete", function() {
        that.onBlur();
      });
      that.el.on("focus.autocomplete", function() {
        that.onFocus();
      });
      that.el.on("change.autocomplete", function(event) {
        that.onKeyUp(event);
      });
      that.el.on("input.autocomplete", function(event) {
        that.onKeyUp(event);
      });
    },
    onFocus : function() {
      var that = this;
      that.fixPosition();
      if (that.options.minChars === 0 && that.el.val().length === 0) {
        that.onValueChange();
      }
    },
    onBlur : function() {
      this.enableKillerFn();
    },
    abortAjax : function() {
      var that = this;
      if (that.currentRequest) {
        that.currentRequest.abort();
        /** @type {null} */
        that.currentRequest = null;
      }
    },
    setOptions : function(suppliedOptions) {
      var that = this;
      var options = that.options;
      $.extend(options, suppliedOptions);
      that.isLocal = $.isArray(options.lookup);
      if (that.isLocal) {
        options.lookup = that.verifySuggestionsFormat(options.lookup);
      }
      options.orientation = that.validateOrientation(options.orientation, "bottom");
      $(that.suggestionsContainer).css({
        "max-height" : options.maxHeight + "px",
        "width" : options.width + "px",
        "z-index" : options.zIndex
      });
    },
    clearCache : function() {
      this.cachedResponse = {};
      /** @type {!Array} */
      this.badQueries = [];
    },
    clear : function() {
      this.clearCache();
      /** @type {string} */
      this.currentValue = "";
      /** @type {!Array} */
      this.suggestions = [];
    },
    disable : function() {
      var that = this;
      /** @type {boolean} */
      that.disabled = true;
      clearInterval(that.onChangeInterval);
      that.abortAjax();
    },
    enable : function() {
      /** @type {boolean} */
      this.disabled = false;
    },
    fixPosition : function() {
      var that = this;
      var $container = $(that.suggestionsContainer);
      var el = $container.parent().get(0);
      if (el !== document.body && !that.options.forceFixPosition) {
        return;
      }
      var orientation = that.options.orientation;
      var containerHeight = $container.outerHeight();
      var height = that.el.outerHeight();
      var offset = that.el.offset();
      var styles = {
        "top" : offset.top,
        "left" : offset.left
      };
      if (orientation === "auto") {
        var viewPortHeight = $(window).height();
        var scrollTop = $(window).scrollTop();
        /** @type {number} */
        var topOverflow = -scrollTop + offset.top - containerHeight;
        /** @type {number} */
        var bottomOverflow = scrollTop + viewPortHeight - (offset.top + height + containerHeight);
        /** @type {string} */
        orientation = Math.max(topOverflow, bottomOverflow) === topOverflow ? "top" : "bottom";
      }
      if (orientation === "top") {
        styles.top += -containerHeight;
      } else {
        styles.top += height;
      }
      if (el !== document.body) {
        var opacity = $container.css("opacity");
        var parentOffsetDiff;
        if (!that.visible) {
          $container.css("opacity", 0).show();
        }
        parentOffsetDiff = $container.offsetParent().offset();
        styles.top -= parentOffsetDiff.top;
        styles.left -= parentOffsetDiff.left;
        if (!that.visible) {
          $container.css("opacity", opacity).hide();
        }
      }
      if (that.options.width === "auto") {
        /** @type {string} */
        styles.width = that.el.outerWidth() - 2 + "px";
      }
      $container.css(styles);
    },
    enableKillerFn : function() {
      var that = this;
      $(document).on("click.autocomplete", that.killerFn);
    },
    disableKillerFn : function() {
      var that = this;
      $(document).off("click.autocomplete", that.killerFn);
    },
    killSuggestions : function() {
      var that = this;
      that.stopKillSuggestions();
      that.intervalId = window.setInterval(function() {
        that.hide();
        that.stopKillSuggestions();
      }, 50);
    },
    stopKillSuggestions : function() {
      window.clearInterval(this.intervalId);
    },
    isCursorAtEnd : function() {
      var that = this;
      var valLength = that.el.val().length;
      var selectionStart = that.element.selectionStart;
      var range;
      if (typeof selectionStart === "number") {
        return selectionStart === valLength;
      }
      if (document.selection) {
        /** @type {(ControlRange|TextRange|null)} */
        range = document.selection.createRange();
        range.moveStart("character", -valLength);
        return valLength === range.text.length;
      }
      return true;
    },
    onKeyPress : function(e) {
      var that = this;
      if (!that.disabled && !that.visible && e.which === keys.DOWN && that.currentValue) {
        that.suggest();
        return;
      }
      if (that.disabled || !that.visible) {
        return;
      }
      switch(e.which) {
        case keys.ESC:
          that.el.val(that.currentValue);
          that.hide();
          break;
        case keys.RIGHT:
          if (that.hint && that.options.onHint && that.isCursorAtEnd()) {
            that.selectHint();
            break;
          }
          return;
        case keys.TAB:
          if (that.hint && that.options.onHint) {
            that.selectHint();
            return;
          }
          if (that.selectedIndex === -1) {
            that.hide();
            return;
          }
          that.select(that.selectedIndex);
          if (that.options.tabDisabled === false) {
            return;
          }
          break;
        case keys.RETURN:
          if (that.selectedIndex === -1) {
            that.hide();
            return;
          }
          that.select(that.selectedIndex);
          break;
        case keys.UP:
          that.moveUp();
          break;
        case keys.DOWN:
          that.moveDown();
          break;
        default:
          return;
      }
      e.stopImmediatePropagation();
      e.preventDefault();
    },
    onKeyUp : function(event) {
      var that = this;
      if (that.disabled) {
        return;
      }
      switch(event.which) {
        case keys.UP:
        case keys.DOWN:
          return;
      }
      clearInterval(that.onChangeInterval);
      if (that.currentValue !== that.el.val()) {
        that.findBestHint();
        if (that.options.deferRequestBy > 0) {
          /** @type {number} */
          that.onChangeInterval = setInterval(function() {
            that.onValueChange();
          }, that.options.deferRequestBy);
        } else {
          that.onValueChange();
        }
      }
    },
    onValueChange : function() {
      var that = this;
      var options = that.options;
      var value = that.el.val();
      var query = that.getQuery(value);
      if (that.selection && that.currentValue !== query) {
        /** @type {null} */
        that.selection = null;
        (options.onInvalidateSelection || $.noop).call(that.element);
      }
      clearInterval(that.onChangeInterval);
      that.currentValue = value;
      /** @type {number} */
      that.selectedIndex = -1;
      if (options.triggerSelectOnValidInput && that.isExactMatch(query)) {
        that.select(0);
        return;
      }
      if (query.length < options.minChars) {
        that.hide();
      } else {
        that.getSuggestions(query);
      }
    },
    isExactMatch : function(query) {
      var suggestions = this.suggestions;
      return suggestions.length === 1 && suggestions[0].value.toLowerCase() === query.toLowerCase();
    },
    getQuery : function(value) {
      var delimiter = this.options.delimiter;
      var parts;
      if (!delimiter) {
        return value;
      }
      parts = value.split(delimiter);
      return $.trim(parts[parts.length - 1]);
    },
    getSuggestionsLocal : function(query) {
      var argumentsParam = this;
      var options = argumentsParam.options;
      var queryLowerCase = query.toLowerCase();
      var filter = options.lookupFilter;
      /** @type {number} */
      var value = parseInt(options.lookupLimit, 10);
      var data;
      data = {
        suggestions : $.grep(options.lookup, function(suggestion) {
          return filter(suggestion, query, queryLowerCase);
        })
      };
      if (value && data.suggestions.length > value) {
        data.suggestions = data.suggestions.slice(0, value);
      }
      return data;
    },
    getSuggestions : function(q) {
      var response;
      var that = this;
      var options = that.options;
      var serviceUrl = options.serviceUrl;
      var params;
      var cacheKey;
      var obj;
      /** @type {string} */
      options.params[options.paramName] = q;
      params = options.ignoreParams ? null : options.params;
      if (options.onSearchStart.call(that.element, options.params) === false) {
        return;
      }
      if ($.isFunction(options.lookup)) {
        options.lookup(q, function(data) {
          that.suggestions = data.suggestions;
          that.suggest();
          options.onSearchComplete.call(that.element, q, data.suggestions);
        });
        return;
      }
      if (that.isLocal) {
        response = that.getSuggestionsLocal(q);
      } else {
        if ($.isFunction(serviceUrl)) {
          serviceUrl = serviceUrl.call(that.element, q);
        }
        cacheKey = serviceUrl + "?" + $.param(params || {});
        response = that.cachedResponse[cacheKey];
      }
      if (response && $.isArray(response.suggestions)) {
        that.suggestions = response.suggestions;
        that.suggest();
        options.onSearchComplete.call(that.element, q, response.suggestions);
      } else {
        if (!that.isBadQuery(q)) {
          that.abortAjax();
          obj = {
            url : serviceUrl,
            data : params,
            type : options.type,
            dataType : options.dataType
          };
          $.extend(obj, options.ajaxSettings);
          that.currentRequest = $.ajax(obj).done(function(data) {
            var result;
            /** @type {null} */
            that.currentRequest = null;
            result = options.transformResult(data, q);
            that.processResponse(result, q, cacheKey);
            options.onSearchComplete.call(that.element, q, result.suggestions);
          }).fail(function(refC, entry__3995__auto__, s) {
            options.onSearchError.call(that.element, q, refC, entry__3995__auto__, s);
          });
        } else {
          options.onSearchComplete.call(that.element, q, []);
        }
      }
    },
    isBadQuery : function(q) {
      if (!this.options.preventBadQueries) {
        return false;
      }
      var badQueries = this.badQueries;
      var i = badQueries.length;
      for (; i--;) {
        if (q.indexOf(badQueries[i]) === 0) {
          return true;
        }
      }
      return false;
    },
    hide : function() {
      var that = this;
      var n = $(that.suggestionsContainer);
      if ($.isFunction(that.options.onHide) && that.visible) {
        that.options.onHide.call(that.element, n);
      }
      /** @type {boolean} */
      that.visible = false;
      /** @type {number} */
      that.selectedIndex = -1;
      clearInterval(that.onChangeInterval);
      $(that.suggestionsContainer).hide();
      that.signalHint(null);
    },
    suggest : function() {
      if (this.suggestions.length === 0) {
        if (this.options.showNoSuggestionNotice) {
          this.noSuggestions();
        } else {
          this.hide();
        }
        return;
      }
      var that = this;
      var options = that.options;
      var groupBy = options.groupBy;
      /** @type {function(!Object, string): ?} */
      var formatResult = options.formatResult;
      var value = that.getQuery(that.currentValue);
      var className = that.classes.suggestion;
      var temp = that.classes.selected;
      var container = $(that.suggestionsContainer);
      var $newHeader = $(that.noSuggestionsContainer);
      var beforeRender = options.beforeRender;
      /** @type {string} */
      var html = "";
      var _currDirection;
      /**
       * @param {!Object} suggestion
       * @param {?} index
       * @return {?}
       */
      var formatGroup = function(suggestion, index) {
        var fadein = suggestion.data[groupBy];
        if (_currDirection === fadein) {
          return "";
        }
        _currDirection = fadein;
        return '<div class="autocomplete-group"><strong>' + _currDirection + "</strong></div>";
      };
      if (options.triggerSelectOnValidInput && that.isExactMatch(value)) {
        that.select(0);
        return;
      }
      $.each(that.suggestions, function(i, suggestion) {
        if (groupBy) {
          html = html + formatGroup(suggestion, value, i);
        }
        /** @type {string} */
        html = html + ('<div class="' + className + '" data-index="' + i + '">' + formatResult(suggestion, value) + "</div>");
      });
      this.adjustContainerWidth();
      $newHeader.detach();
      container.html(html);
      if ($.isFunction(beforeRender)) {
        beforeRender.call(that.element, container);
      }
      that.fixPosition();
      container.show();
      if (options.autoSelectFirst) {
        /** @type {number} */
        that.selectedIndex = 0;
        container.scrollTop(0);
        container.children("." + className).first().addClass(temp);
      }
      /** @type {boolean} */
      that.visible = true;
      that.findBestHint();
    },
    noSuggestions : function() {
      var that = this;
      var albumPhotosContainer = $(that.suggestionsContainer);
      var content = $(that.noSuggestionsContainer);
      this.adjustContainerWidth();
      content.detach();
      albumPhotosContainer.empty();
      albumPhotosContainer.append(content);
      that.fixPosition();
      albumPhotosContainer.show();
      /** @type {boolean} */
      that.visible = true;
    },
    adjustContainerWidth : function() {
      var that = this;
      var options = that.options;
      var width;
      var $element = $(that.suggestionsContainer);
      if (options.width === "auto") {
        /** @type {number} */
        width = that.el.outerWidth() - 2;
        $element.width(width > 0 ? width : 300);
      }
    },
    findBestHint : function() {
      var that = this;
      var minFileName = that.el.val().toLowerCase();
      /** @type {null} */
      var bestMatch = null;
      if (!minFileName) {
        return;
      }
      $.each(that.suggestions, function(canCreateDiscussions, suggestion) {
        /** @type {boolean} */
        var o = suggestion.value.toLowerCase().indexOf(minFileName) === 0;
        if (o) {
          /** @type {!Object} */
          bestMatch = suggestion;
        }
        return !o;
      });
      that.signalHint(bestMatch);
    },
    signalHint : function(suggestion) {
      /** @type {string} */
      var hintValue = "";
      var that = this;
      if (suggestion) {
        hintValue = that.currentValue + suggestion.value.substr(that.currentValue.length);
      }
      if (that.hintValue !== hintValue) {
        that.hintValue = hintValue;
        /** @type {string} */
        that.hint = suggestion;
        (this.options.onHint || $.noop)(hintValue);
      }
    },
    verifySuggestionsFormat : function(suggestions) {
      if (suggestions.length && typeof suggestions[0] === "string") {
        return $.map(suggestions, function(command_module_id) {
          return {
            value : command_module_id,
            data : null
          };
        });
      }
      return suggestions;
    },
    validateOrientation : function(orientation, fallback) {
      orientation = $.trim(orientation || "").toLowerCase();
      if ($.inArray(orientation, ["auto", "bottom", "top"]) === -1) {
        /** @type {string} */
        orientation = fallback;
      }
      return orientation;
    },
    processResponse : function(result, originalQuery, cacheKey) {
      var that = this;
      var options = that.options;
      result.suggestions = that.verifySuggestionsFormat(result.suggestions);
      if (!options.noCache) {
        /** @type {!Object} */
        that.cachedResponse[cacheKey] = result;
        if (options.preventBadQueries && result.suggestions.length === 0) {
          that.badQueries.push(originalQuery);
        }
      }
      if (originalQuery !== that.getQuery(that.currentValue)) {
        return;
      }
      that.suggestions = result.suggestions;
      that.suggest();
    },
    activate : function(idx) {
      var that = this;
      var activeItem;
      var i = that.classes.selected;
      var $lcdText = $(that.suggestionsContainer);
      var children = $lcdText.find("." + that.classes.suggestion);
      $lcdText.find("." + i).removeClass(i);
      /** @type {number} */
      that.selectedIndex = idx;
      if (that.selectedIndex !== -1 && children.length > that.selectedIndex) {
        activeItem = children.get(that.selectedIndex);
        $(activeItem).addClass(i);
        return activeItem;
      }
      return null;
    },
    selectHint : function() {
      var that = this;
      var n = $.inArray(that.hint, that.suggestions);
      that.select(n);
    },
    select : function(i) {
      var _this = this;
      _this.hide();
      _this.onSelect(i);
    },
    moveUp : function() {
      var that = this;
      if (that.selectedIndex === -1) {
        return;
      }
      if (that.selectedIndex === 0) {
        $(that.suggestionsContainer).children().first().removeClass(that.classes.selected);
        /** @type {number} */
        that.selectedIndex = -1;
        that.el.val(that.currentValue);
        that.findBestHint();
        return;
      }
      that.adjustScroll(that.selectedIndex - 1);
    },
    moveDown : function() {
      var that = this;
      if (that.selectedIndex === that.suggestions.length - 1) {
        return;
      }
      that.adjustScroll(that.selectedIndex + 1);
    },
    adjustScroll : function(index) {
      var that = this;
      var elem = that.activate(index);
      if (!elem) {
        return;
      }
      var h;
      var maxHeight;
      var boxH;
      var dy = $(elem).outerHeight();
      h = elem.offsetTop;
      maxHeight = $(that.suggestionsContainer).scrollTop();
      /** @type {number} */
      boxH = maxHeight + that.options.maxHeight - dy;
      if (h < maxHeight) {
        $(that.suggestionsContainer).scrollTop(h);
      } else {
        if (h > boxH) {
          $(that.suggestionsContainer).scrollTop(h - that.options.maxHeight + dy);
        }
      }
      if (!that.options.preserveInput) {
        that.el.val(that.getValue(that.suggestions[index].value));
      }
      that.signalHint(null);
    },
    onSelect : function(index) {
      var that = this;
      var onSelectCallback = that.options.onSelect;
      var suggestion = that.suggestions[index];
      that.currentValue = that.getValue(suggestion.value);
      if (that.currentValue !== that.el.val() && !that.options.preserveInput) {
        that.el.val(that.currentValue);
      }
      that.signalHint(null);
      /** @type {!Array} */
      that.suggestions = [];
      that.selection = suggestion;
      if ($.isFunction(onSelectCallback)) {
        onSelectCallback.call(that.element, suggestion);
      }
    },
    getValue : function(value) {
      var that = this;
      var delimiter = that.options.delimiter;
      var currentValue;
      var parts;
      if (!delimiter) {
        return value;
      }
      currentValue = that.currentValue;
      parts = currentValue.split(delimiter);
      if (parts.length === 1) {
        return value;
      }
      return currentValue.substr(0, currentValue.length - parts[parts.length - 1].length) + value;
    },
    dispose : function() {
      var that = this;
      that.el.off(".autocomplete").removeData("autocomplete");
      that.disableKillerFn();
      $(window).off("resize.autocomplete", that.fixPositionCapture);
      $(that.suggestionsContainer).remove();
    }
  };
  /** @type {function(boolean, ?): ?} */
  $.fn.autocomplete = $.fn.devbridgeAutocomplete = function(options, args) {
    /** @type {string} */
    var elem = "autocomplete";
    if (arguments.length === 0) {
      return this.first().data(elem);
    }
    return this.each(function() {
      var $module = $(this);
      var instance = $module.data(elem);
      if (typeof options === "string") {
        if (instance && typeof instance[options] === "function") {
          instance[options](args);
        }
      } else {
        if (instance && instance.dispose) {
          instance.dispose();
        }
        instance = new Autocomplete(this, options);
        $module.data(elem, instance);
      }
    });
  };
});
/** @type {function(this:(IArrayLike<T>|string), *=, *=): !Array<T>} */
var _slice = Array.prototype.slice;
/**
 * @param {string} arr
 * @return {?}
 */
function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    /** @type {number} */
    var i = 0;
    /** @type {!Array} */
    var arr2 = Array(arr.length);
    for (; i < arr.length; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  } else {
    return Array.from(arr);
  }
}
(function(global, factory) {
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = factory(require("jquery"));
  } else {
    if (typeof define === "function" && define.amd) {
      define(["jquery"], factory);
    } else {
      global.parsley = factory(global.jQuery);
    }
  }
})(this, function($) {
  /**
   * @param {!Function} fn
   * @param {number} context
   * @return {?}
   */
  function adapt(fn, context) {
    if (!fn.parsleyAdaptedCallback) {
      /**
       * @return {undefined}
       */
      fn.parsleyAdaptedCallback = function() {
        /** @type {!Array<?>} */
        var arg = Array.prototype.slice.call(arguments, 0);
        arg.unshift(this);
        fn.apply(context || me, arg);
      };
    }
    return fn.parsleyAdaptedCallback;
  }
  /**
   * @param {string} name
   * @return {?}
   */
  function eventName(name) {
    if (name.lastIndexOf(eventPrefix, 0) === 0) {
      return name.substr(eventPrefix.length);
    }
    return name;
  }
  /** @type {number} */
  var nextGuid = 1;
  var mapTextToListeners = {};
  var ParsleyUtils__ParsleyUtils = {
    attr : function(name, value, obj) {
      var i;
      var attr;
      var attributes;
      /** @type {!RegExp} */
      var a = new RegExp("^" + value, "i");
      if ("undefined" === typeof obj) {
        obj = {};
      } else {
        for (i in obj) {
          if (obj.hasOwnProperty(i)) {
            delete obj[i];
          }
        }
      }
      if ("undefined" === typeof name || "undefined" === typeof name[0]) {
        return obj;
      }
      attributes = name[0].attributes;
      i = attributes.length;
      for (; i--;) {
        attr = attributes[i];
        if (attr && attr.specified && a.test(attr.name)) {
          obj[this.camelize(attr.name.slice(value.length))] = this.deserializeValue(attr.value);
        }
      }
      return obj;
    },
    checkAttr : function($element, namespace, checkAttr) {
      return $element.is("[" + namespace + checkAttr + "]");
    },
    setAttr : function($element, namespace, attr, val) {
      $element[0].setAttribute(this.dasherize(namespace + attr), String(val));
    },
    generateID : function() {
      return "" + nextGuid++;
    },
    deserializeValue : function(value) {
      var num;
      try {
        return value ? value == "true" || (value == "false" ? false : value == "null" ? null : !isNaN(num = Number(value)) ? num : /^[\[\{]/.test(value) ? $.parseJSON(value) : value) : value;
      } catch (r) {
        return value;
      }
    },
    camelize : function(s) {
      return s.replace(/-+(.)?/g, function(canCreateDiscussions, t) {
        return t ? t.toUpperCase() : "";
      });
    },
    dasherize : function(string) {
      return string.replace(/::/g, "/").replace(/([A-Z]+)([A-Z][a-z])/g, "$1_$2").replace(/([a-z\d])([A-Z])/g, "$1_$2").replace(/_/g, "-").toLowerCase();
    },
    warn : function() {
      var _ref;
      if (window.console && "function" === typeof window.console.warn) {
        (_ref = window.console).warn.apply(_ref, arguments);
      }
    },
    warnOnce : function(text) {
      if (!mapTextToListeners[text]) {
        /** @type {boolean} */
        mapTextToListeners[text] = true;
        this.warn.apply(this, arguments);
      }
    },
    _resetWarnings : function() {
      mapTextToListeners = {};
    },
    trimString : function(string) {
      return string.replace(/^\s+|\s+$/g, "");
    },
    namespaceEvents : function(events, namespace) {
      events = this.trimString(events || "").split(/\s+/);
      if (!events[0]) {
        return "";
      }
      return $.map(events, function(baseEventName) {
        return baseEventName + "." + namespace;
      }).join(" ");
    },
    objectCreate : Object.create || function() {
      /**
       * @return {undefined}
       */
      var NewJob = function() {
      };
      return function(parent) {
        if (arguments.length > 1) {
          throw Error("Second argument not supported");
        }
        if (typeof parent != "object") {
          throw TypeError("Argument must be an object");
        }
        /** @type {!Object} */
        NewJob.prototype = parent;
        var i = {};
        /** @type {null} */
        NewJob.prototype = null;
        return i;
      };
    }()
  };
  var ParsleyUtils__default = ParsleyUtils__ParsleyUtils;
  var ParsleyDefaults = {
    namespace : "data-parsley-",
    inputs : "input, textarea, select",
    excluded : "input[type=button], input[type=submit], input[type=reset], input[type=hidden]",
    priorityEnabled : true,
    multiple : null,
    group : null,
    uiEnabled : true,
    validationThreshold : 3,
    focus : "first",
    trigger : false,
    triggerAfterFailure : "input",
    errorClass : "parsley-error",
    successClass : "parsley-success",
    classHandler : function(elem) {
    },
    errorsContainer : function(ParsleyField) {
    },
    errorsWrapper : '<ul class="parsley-errors-list"></ul>',
    errorTemplate : "<li></li>"
  };
  /**
   * @return {undefined}
   */
  var ParsleyAbstract = function() {
  };
  ParsleyAbstract.prototype = {
    asyncSupport : true,
    actualizeOptions : function() {
      ParsleyUtils__default.attr(this.$element, this.options.namespace, this.domOptions);
      if (this.parent && this.parent.actualizeOptions) {
        this.parent.actualizeOptions();
      }
      return this;
    },
    _resetOptions : function(initOptions) {
      /** @type {!Object} */
      this.domOptions = ParsleyUtils__default.objectCreate(this.parent.options);
      /** @type {!Object} */
      this.options = ParsleyUtils__default.objectCreate(this.domOptions);
      var i;
      for (i in initOptions) {
        if (initOptions.hasOwnProperty(i)) {
          this.options[i] = initOptions[i];
        }
      }
      this.actualizeOptions();
    },
    _listeners : null,
    on : function(type, callback) {
      this._listeners = this._listeners || {};
      var fixedRightWatchers = this._listeners[type] = this._listeners[type] || [];
      fixedRightWatchers.push(callback);
      return this;
    },
    subscribe : function(type, fn) {
      $.listenTo(this, type.toLowerCase(), fn);
    },
    off : function(type, fn) {
      var queue = this._listeners && this._listeners[type];
      if (queue) {
        if (!fn) {
          delete this._listeners[type];
        } else {
          var i = queue.length;
          for (; i--;) {
            if (queue[i] === fn) {
              queue.splice(i, 1);
            }
          }
        }
      }
      return this;
    },
    unsubscribe : function(i, token) {
      $.unsubscribeTo(this, i.toLowerCase());
    },
    trigger : function(type, name, text) {
      name = name || this;
      var listeners = this._listeners && this._listeners[type];
      var result;
      var a;
      if (listeners) {
        var i = listeners.length;
        for (; i--;) {
          result = listeners[i].call(name, name, text);
          if (result === false) {
            return result;
          }
        }
      }
      if (this.parent) {
        return this.parent.trigger(type, name, text);
      }
      return true;
    },
    reset : function() {
      if ("ParsleyForm" !== this.__class__) {
        this._resetUI();
        return this._trigger("reset");
      }
      /** @type {number} */
      var i = 0;
      for (; i < this.fields.length; i++) {
        this.fields[i].reset();
      }
      this._trigger("reset");
    },
    destroy : function() {
      this._destroyUI();
      if ("ParsleyForm" !== this.__class__) {
        this.$element.removeData("Parsley");
        this.$element.removeData("ParsleyFieldMultiple");
        this._trigger("destroy");
        return;
      }
      /** @type {number} */
      var i = 0;
      for (; i < this.fields.length; i++) {
        this.fields[i].destroy();
      }
      this.$element.removeData("Parsley");
      this._trigger("destroy");
    },
    asyncIsValid : function(group, force) {
      ParsleyUtils__default.warnOnce("asyncIsValid is deprecated; please use whenValid instead");
      return this.whenValid({
        group : group,
        force : force
      });
    },
    _findRelated : function() {
      return this.options.multiple ? this.parent.$element.find("[" + this.options.namespace + 'multiple="' + this.options.multiple + '"]') : this.$element;
    }
  };
  var requirementConverters = {
    string : function(val) {
      return val;
    },
    integer : function(value) {
      if (isNaN(value)) {
        throw 'Requirement is not an integer: "' + value + '"';
      }
      return parseInt(value, 10);
    },
    number : function(value) {
      if (isNaN(value)) {
        throw 'Requirement is not a number: "' + value + '"';
      }
      return parseFloat(value);
    },
    reference : function(context) {
      var entry = $(context);
      if (entry.length === 0) {
        throw 'No such reference: "' + context + '"';
      }
      return entry;
    },
    boolean : function categorizeId(s) {
      return s !== "false";
    },
    object : function(value) {
      return ParsleyUtils__default.deserializeValue(value);
    },
    regexp : function(regexp) {
      /** @type {string} */
      var flags = "";
      if (/^\/.*\/(?:[gimy]*)$/.test(regexp)) {
        flags = regexp.replace(/.*\/([gimy]*)$/, "$1");
        regexp = regexp.replace(new RegExp("^/(.*?)/" + flags + "$"), "$1");
      } else {
        /** @type {string} */
        regexp = "^" + regexp + "$";
      }
      return new RegExp(regexp, flags);
    }
  };
  /**
   * @param {string} string
   * @param {string} length
   * @return {?}
   */
  var convertArrayRequirement = function(string, length) {
    var cache_message = string.match(/^\s*\[(.*)\]\s*$/);
    if (!cache_message) {
      throw 'Requirement is not an array: "' + string + '"';
    }
    var values = cache_message[1].split(",").map(ParsleyUtils__default.trimString);
    if (values.length !== length) {
      throw "Requirement has " + values.length + " values when " + length + " are needed";
    }
    return values;
  };
  /**
   * @param {string} requirementType
   * @param {string} string
   * @return {?}
   */
  var convertRequirement = function(requirementType, string) {
    var converter = requirementConverters[requirementType || "string"];
    if (!converter) {
      throw 'Unknown requirement specification: "' + requirementType + '"';
    }
    return converter(string);
  };
  /**
   * @param {!Object} requirementSpec
   * @param {string} string
   * @param {!Function} extraOptionReader
   * @return {?}
   */
  var convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {
    /** @type {null} */
    var main = null;
    var someStoreStorage = {};
    var key;
    for (key in requirementSpec) {
      if (key) {
        var value = extraOptionReader(key);
        if ("string" === typeof value) {
          value = convertRequirement(requirementSpec[key], value);
        }
        someStoreStorage[key] = value;
      } else {
        main = convertRequirement(requirementSpec[key], string);
      }
    }
    return [main, someStoreStorage];
  };
  /**
   * @param {?} spec
   * @return {undefined}
   */
  var ParsleyValidator = function(spec) {
    $.extend(true, this, spec);
  };
  ParsleyValidator.prototype = {
    validate : function(c, args) {
      if (this.fn) {
        if (arguments.length > 3) {
          /** @type {!Array<?>} */
          args = [].slice.call(arguments, 1, -1);
        }
        return this.fn.call(this, c, args);
      }
      if ($.isArray(c)) {
        if (!this.validateMultiple) {
          throw "Validator `" + this.name + "` does not handle multiple values";
        }
        return this.validateMultiple.apply(this, arguments);
      } else {
        if (this.validateNumber) {
          if (isNaN(c)) {
            return false;
          }
          /** @type {number} */
          arguments[0] = parseFloat(arguments[0]);
          return this.validateNumber.apply(this, arguments);
        }
        if (this.validateString) {
          return this.validateString.apply(this, arguments);
        }
        throw "Validator `" + this.name + "` only handles multiple values";
      }
    },
    parseRequirements : function(requirements, extraOptionReader) {
      if ("string" !== typeof requirements) {
        return $.isArray(requirements) ? requirements : [requirements];
      }
      var type = this.requirementType;
      if ($.isArray(type)) {
        var values = convertArrayRequirement(requirements, type.length);
        /** @type {number} */
        var i = 0;
        for (; i < values.length; i++) {
          values[i] = convertRequirement(type[i], values[i]);
        }
        return values;
      } else {
        if ($.isPlainObject(type)) {
          return convertExtraOptionRequirement(type, requirements, extraOptionReader);
        } else {
          return [convertRequirement(type, requirements)];
        }
      }
    },
    requirementType : "string",
    priority : 2
  };
  /**
   * @param {number} validators
   * @param {number} catalog
   * @return {undefined}
   */
  var ParsleyValidatorRegistry = function(validators, catalog) {
    /** @type {string} */
    this.__class__ = "ParsleyValidatorRegistry";
    /** @type {string} */
    this.locale = "en";
    this.init(validators || {}, catalog || {});
  };
  var typeRegexes = {
    email : /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,
    number : /^-?(\d*\.)?\d+(e[-+]?\d+)?$/i,
    integer : /^-?\d+$/,
    digits : /^\d+$/,
    alphanum : /^\w+$/i,
    url : new RegExp("^(?:(?:https?|ftp)://)?(?:\\S+(?::\\S*)?@)?(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:/\\S*)?$", "i")
  };
  /** @type {!RegExp} */
  typeRegexes.range = typeRegexes.number;
  /**
   * @param {number} num
   * @return {?}
   */
  var decimalPlaces = function(num) {
    /** @type {(Array<string>|null)} */
    var swarm = ("" + num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
    if (!swarm) {
      return 0;
    }
    return Math.max(0, (swarm[1] ? swarm[1].length : 0) - (swarm[2] ? +swarm[2] : 0));
  };
  ParsleyValidatorRegistry.prototype = {
    init : function(items, default_value) {
      this.catalog = default_value;
      this.validators = $.extend({}, this.validators);
      var name;
      for (name in items) {
        this.addValidator(name, items[name].fn, items[name].priority);
      }
      window.Parsley.trigger("parsley:validator:init");
    },
    setLocale : function(locale) {
      if ("undefined" === typeof this.catalog[locale]) {
        throw new Error(locale + " is not available in the catalog");
      }
      /** @type {string} */
      this.locale = locale;
      return this;
    },
    addCatalog : function(locale, messages, set) {
      if ("object" === typeof messages) {
        this.catalog[locale] = messages;
      }
      if (true === set) {
        return this.setLocale(locale);
      }
      return this;
    },
    addMessage : function(locale, name, dt) {
      if ("undefined" === typeof this.catalog[locale]) {
        this.catalog[locale] = {};
      }
      this.catalog[locale][name] = dt;
      return this;
    },
    addMessages : function(locale, nameMessageObject) {
      var name;
      for (name in nameMessageObject) {
        this.addMessage(locale, name, nameMessageObject[name]);
      }
      return this;
    },
    addValidator : function(name, priority, requirementsTransformer) {
      if (this.validators[name]) {
        ParsleyUtils__default.warn('Validator "' + name + '" is already defined.');
      } else {
        if (ParsleyDefaults.hasOwnProperty(name)) {
          ParsleyUtils__default.warn('"' + name + '" is a restricted keyword and is not a valid validator name.');
          return;
        }
      }
      return this._setValidator.apply(this, arguments);
    },
    updateValidator : function(name, fn, priority) {
      if (!this.validators[name]) {
        ParsleyUtils__default.warn('Validator "' + name + '" is not already defined.');
        return this.addValidator.apply(this, arguments);
      }
      return this._setValidator(this, arguments);
    },
    removeValidator : function(name) {
      if (!this.validators[name]) {
        ParsleyUtils__default.warn('Validator "' + name + '" is not defined.');
      }
      delete this.validators[name];
      return this;
    },
    _setValidator : function(name, validator, priority) {
      if ("object" !== typeof validator) {
        validator = {
          fn : validator,
          priority : priority
        };
      }
      if (!validator.validate) {
        validator = new ParsleyValidator(validator);
      }
      /** @type {!Object} */
      this.validators[name] = validator;
      var locale;
      for (locale in validator.messages || {}) {
        this.addMessage(locale, name, validator.messages[locale]);
      }
      return this;
    },
    getErrorMessage : function(constraint) {
      var message;
      if ("type" === constraint.name) {
        var typeMessages = this.catalog[this.locale][constraint.name] || {};
        message = typeMessages[constraint.requirements];
      } else {
        message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);
      }
      return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;
    },
    formatMessage : function(string, parameters) {
      if ("object" === typeof parameters) {
        var i;
        for (i in parameters) {
          string = this.formatMessage(string, parameters[i]);
        }
        return string;
      }
      return "string" === typeof string ? string.replace(/%s/i, parameters) : "";
    },
    validators : {
      notblank : {
        validateString : function(data) {
          return /\S/.test(data);
        },
        priority : 2
      },
      required : {
        validateMultiple : function(values) {
          return values.length > 0;
        },
        validateString : function(data) {
          return /\S/.test(data);
        },
        priority : 512
      },
      type : {
        validateString : function(str, type) {
          var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
          var val = opts.step;
          var value = val === undefined ? "1" : val;
          var folder = opts.base;
          var base = folder === undefined ? 0 : folder;
          var regex = typeRegexes[type];
          if (!regex) {
            throw new Error("validator type `" + type + "` is not supported");
          }
          if (!regex.test(str)) {
            return false;
          }
          if ("number" === type) {
            if (!/^any$/i.test(value || "")) {
              /** @type {number} */
              var nb = Number(str);
              /** @type {number} */
              var decimals = Math.max(decimalPlaces(value), decimalPlaces(base));
              if (decimalPlaces(nb) > decimals) {
                return false;
              }
              /**
               * @param {number} value
               * @return {?}
               */
              var toInt = function(value) {
                return Math.round(value * Math.pow(10, decimals));
              };
              if ((toInt(nb) - toInt(base)) % toInt(value) != 0) {
                return false;
              }
            }
          }
          return true;
        },
        requirementType : {
          "" : "string",
          step : "string",
          base : "number"
        },
        priority : 256
      },
      pattern : {
        validateString : function(options, data) {
          return data.test(options);
        },
        requirementType : "regexp",
        priority : 64
      },
      minlength : {
        validateString : function(value, min) {
          return value.length >= min;
        },
        requirementType : "integer",
        priority : 30
      },
      maxlength : {
        validateString : function(value, max) {
          return value.length <= max;
        },
        requirementType : "integer",
        priority : 30
      },
      length : {
        validateString : function(value, min, max) {
          return value.length >= min && value.length <= max;
        },
        requirementType : ["integer", "integer"],
        priority : 30
      },
      mincheck : {
        validateMultiple : function(values, min) {
          return values.length >= min;
        },
        requirementType : "integer",
        priority : 30
      },
      maxcheck : {
        validateMultiple : function(values, requirement) {
          return values.length <= requirement;
        },
        requirementType : "integer",
        priority : 30
      },
      check : {
        validateMultiple : function(values, min, max) {
          return values.length >= min && values.length <= max;
        },
        requirementType : ["integer", "integer"],
        priority : 30
      },
      min : {
        validateNumber : function(val, max) {
          return val >= max;
        },
        requirementType : "number",
        priority : 30
      },
      max : {
        validateNumber : function(val, min) {
          return val <= min;
        },
        requirementType : "number",
        priority : 30
      },
      range : {
        validateNumber : function(value, min, max) {
          return value >= min && value <= max;
        },
        requirementType : ["number", "number"],
        priority : 30
      },
      equalto : {
        validateString : function(val, data) {
          var $anchorTarget = $(data);
          if ($anchorTarget.length) {
            return val === $anchorTarget.val();
          } else {
            return val === data;
          }
        },
        priority : 256
      }
    }
  };
  var ParsleyUI = {};
  /**
   * @param {!NodeList} newResult
   * @param {!NodeList} oldResult
   * @param {boolean} deep
   * @return {?}
   */
  var diffResults = function diffResults(newResult, oldResult, deep) {
    /** @type {!Array} */
    var added = [];
    /** @type {!Array} */
    var kept = [];
    /** @type {number} */
    var i = 0;
    for (; i < newResult.length; i++) {
      /** @type {boolean} */
      var s = false;
      /** @type {number} */
      var j = 0;
      for (; j < oldResult.length; j++) {
        if (newResult[i].assert.name === oldResult[j].assert.name) {
          /** @type {boolean} */
          s = true;
          break;
        }
      }
      if (s) {
        kept.push(newResult[i]);
      } else {
        added.push(newResult[i]);
      }
    }
    return {
      kept : kept,
      added : added,
      removed : !deep ? diffResults(oldResult, newResult, true).added : []
    };
  };
  ParsleyUI.Form = {
    _actualizeTriggers : function() {
      var _this2 = this;
      this.$element.on("submit.Parsley", function(evt) {
        _this2.onSubmitValidate(evt);
      });
      this.$element.on("click.Parsley", 'input[type="submit"], button[type="submit"]', function(evt) {
        _this2.onSubmitButton(evt);
      });
      if (false === this.options.uiEnabled) {
        return;
      }
      this.$element.attr("novalidate", "");
    },
    focus : function() {
      /** @type {null} */
      this._focusedField = null;
      if (true === this.validationResult || "none" === this.options.focus) {
        return null;
      }
      /** @type {number} */
      var i = 0;
      for (; i < this.fields.length; i++) {
        var field = this.fields[i];
        if (true !== field.validationResult && field.validationResult.length > 0 && "undefined" === typeof field.options.noFocus) {
          this._focusedField = field.$element;
          if ("first" === this.options.focus) {
            break;
          }
        }
      }
      if (null === this._focusedField) {
        return null;
      }
      return this._focusedField.focus();
    },
    _destroyUI : function() {
      this.$element.off(".Parsley");
    }
  };
  ParsleyUI.Field = {
    _reflowUI : function() {
      this._buildUI();
      if (!this._ui) {
        return;
      }
      var diff = diffResults(this.validationResult, this._ui.lastValidationResult);
      this._ui.lastValidationResult = this.validationResult;
      this._manageStatusClass();
      this._manageErrorsMessages(diff);
      this._actualizeTriggers();
      if ((diff.kept.length || diff.added.length) && !this._failedOnce) {
        /** @type {boolean} */
        this._failedOnce = true;
        this._actualizeTriggers();
      }
    },
    getErrorsMessages : function() {
      if (true === this.validationResult) {
        return [];
      }
      /** @type {!Array} */
      var messages = [];
      /** @type {number} */
      var i = 0;
      for (; i < this.validationResult.length; i++) {
        messages.push(this.validationResult[i].errorMessage || this._getErrorMessage(this.validationResult[i].assert));
      }
      return messages;
    },
    addError : function(name) {
      var _ref3 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var message = _ref3.message;
      var assert = _ref3.assert;
      var _ref3$updateClass = _ref3.updateClass;
      var updateClass = _ref3$updateClass === undefined ? true : _ref3$updateClass;
      this._buildUI();
      this._addError(name, {
        message : message,
        assert : assert
      });
      if (updateClass) {
        this._errorClass();
      }
    },
    updateError : function(name) {
      var _ref3 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var message = _ref3.message;
      var assert = _ref3.assert;
      var _ref3$updateClass = _ref3.updateClass;
      var updateClass = _ref3$updateClass === undefined ? true : _ref3$updateClass;
      this._buildUI();
      this._updateError(name, {
        message : message,
        assert : assert
      });
      if (updateClass) {
        this._errorClass();
      }
    },
    removeError : function(name) {
      var _ref2 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var _ref2$updateClass = _ref2.updateClass;
      var updateClass = _ref2$updateClass === undefined ? true : _ref2$updateClass;
      this._buildUI();
      this._removeError(name);
      if (updateClass) {
        this._manageStatusClass();
      }
    },
    _manageStatusClass : function() {
      if (this.hasConstraints() && this.needsValidation() && true === this.validationResult) {
        this._successClass();
      } else {
        if (this.validationResult.length > 0) {
          this._errorClass();
        } else {
          this._resetClass();
        }
      }
    },
    _manageErrorsMessages : function(diff) {
      if ("undefined" !== typeof this.options.errorsMessagesDisabled) {
        return;
      }
      if ("undefined" !== typeof this.options.errorMessage) {
        if (diff.added.length || diff.kept.length) {
          this._insertErrorWrapper();
          if (0 === this._ui.$errorsWrapper.find(".parsley-custom-error-message").length) {
            this._ui.$errorsWrapper.append($(this.options.errorTemplate).addClass("parsley-custom-error-message"));
          }
          return this._ui.$errorsWrapper.addClass("filled").find(".parsley-custom-error-message").html(this.options.errorMessage);
        }
        return this._ui.$errorsWrapper.removeClass("filled").find(".parsley-custom-error-message").remove();
      }
      /** @type {number} */
      var i = 0;
      for (; i < diff.removed.length; i++) {
        this._removeError(diff.removed[i].assert.name);
      }
      /** @type {number} */
      i = 0;
      for (; i < diff.added.length; i++) {
        this._addError(diff.added[i].assert.name, {
          message : diff.added[i].errorMessage,
          assert : diff.added[i].assert
        });
      }
      /** @type {number} */
      i = 0;
      for (; i < diff.kept.length; i++) {
        this._updateError(diff.kept[i].assert.name, {
          message : diff.kept[i].errorMessage,
          assert : diff.kept[i].assert
        });
      }
    },
    _addError : function(name, _ref5) {
      var message = _ref5.message;
      var assert = _ref5.assert;
      this._insertErrorWrapper();
      this._ui.$errorsWrapper.addClass("filled").append($(this.options.errorTemplate).attr("data-parsley-field-name", name).html(message || this._getErrorMessage(assert)));
    },
    _updateError : function(name, _ref6) {
      var message = _ref6.message;
      var assert = _ref6.assert;
      this._ui.$errorsWrapper.addClass("filled").find('[data-parsley-field-name="' + name + '"]').html(message || this._getErrorMessage(assert));
    },
    _removeError : function(name) {
      this._ui.$errorsWrapper.removeClass("filled").find('[data-parsley-field-name="' + name + '"]').remove();
    },
    _getErrorMessage : function(constraint) {
      /** @type {string} */
      var customConstraintErrorMessage = constraint.name + "Message";
      if ("undefined" !== typeof this.options[customConstraintErrorMessage]) {
        return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);
      }
      return window.Parsley.getErrorMessage(constraint);
    },
    _buildUI : function() {
      if (this._ui || false === this.options.uiEnabled) {
        return;
      }
      var _ui = {};
      this.$element.attr(this.options.namespace + "id", this.__id__);
      _ui.$errorClassHandler = this._manageClassHandler();
      /** @type {string} */
      _ui.errorsWrapperId = "parsley-id-" + (this.options.multiple ? "multiple-" + this.options.multiple : this.__id__);
      _ui.$errorsWrapper = $(this.options.errorsWrapper).attr("id", _ui.errorsWrapperId);
      /** @type {!Array} */
      _ui.lastValidationResult = [];
      /** @type {boolean} */
      _ui.validationInformationVisible = false;
      this._ui = _ui;
    },
    _manageClassHandler : function() {
      if ("string" === typeof this.options.classHandler && $(this.options.classHandler).length) {
        return $(this.options.classHandler);
      }
      var $handler = this.options.classHandler.call(this, this);
      if ("undefined" !== typeof $handler && $handler.length) {
        return $handler;
      }
      if (!this.options.multiple || this.$element.is("select")) {
        return this.$element;
      }
      return this.$element.parent();
    },
    _insertErrorWrapper : function() {
      var $errorsContainer;
      if (0 !== this._ui.$errorsWrapper.parent().length) {
        return this._ui.$errorsWrapper.parent();
      }
      if ("string" === typeof this.options.errorsContainer) {
        if ($(this.options.errorsContainer).length) {
          return $(this.options.errorsContainer).append(this._ui.$errorsWrapper);
        } else {
          ParsleyUtils__default.warn("The errors container `" + this.options.errorsContainer + "` does not exist in DOM");
        }
      } else {
        if ("function" === typeof this.options.errorsContainer) {
          $errorsContainer = this.options.errorsContainer.call(this, this);
        }
      }
      if ("undefined" !== typeof $errorsContainer && $errorsContainer.length) {
        return $errorsContainer.append(this._ui.$errorsWrapper);
      }
      var $from = this.$element;
      if (this.options.multiple) {
        $from = $from.parent();
      }
      return $from.after(this._ui.$errorsWrapper);
    },
    _actualizeTriggers : function() {
      var _this3 = this;
      var $toBind = this._findRelated();
      $toBind.off(".Parsley");
      if (this._failedOnce) {
        $toBind.on(ParsleyUtils__default.namespaceEvents(this.options.triggerAfterFailure, "Parsley"), function() {
          _this3.validate();
        });
      } else {
        $toBind.on(ParsleyUtils__default.namespaceEvents(this.options.trigger, "Parsley"), function(event) {
          _this3._eventValidate(event);
        });
      }
    },
    _eventValidate : function(event) {
      if (/key|input/.test(event.type)) {
        if (!(this._ui && this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold) {
          return;
        }
      }
      this.validate();
    },
    _resetUI : function() {
      /** @type {boolean} */
      this._failedOnce = false;
      this._actualizeTriggers();
      if ("undefined" === typeof this._ui) {
        return;
      }
      this._ui.$errorsWrapper.removeClass("filled").children().remove();
      this._resetClass();
      /** @type {!Array} */
      this._ui.lastValidationResult = [];
      /** @type {boolean} */
      this._ui.validationInformationVisible = false;
    },
    _destroyUI : function() {
      this._resetUI();
      if ("undefined" !== typeof this._ui) {
        this._ui.$errorsWrapper.remove();
      }
      delete this._ui;
    },
    _successClass : function() {
      /** @type {boolean} */
      this._ui.validationInformationVisible = true;
      this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);
    },
    _errorClass : function() {
      /** @type {boolean} */
      this._ui.validationInformationVisible = true;
      this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);
    },
    _resetClass : function() {
      this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);
    }
  };
  /**
   * @param {?} element
   * @param {!Function} domOptions
   * @param {!Object} options
   * @return {undefined}
   */
  var ParsleyForm = function(element, domOptions, options) {
    /** @type {string} */
    this.__class__ = "ParsleyForm";
    this.__id__ = ParsleyUtils__default.generateID();
    this.$element = $(element);
    /** @type {!Function} */
    this.domOptions = domOptions;
    /** @type {!Object} */
    this.options = options;
    this.parent = window.Parsley;
    /** @type {!Array} */
    this.fields = [];
    /** @type {null} */
    this.validationResult = null;
  };
  var statusMapping = {
    pending : null,
    resolved : true,
    rejected : false
  };
  ParsleyForm.prototype = {
    onSubmitValidate : function(event) {
      var worker = this;
      if (true === event.parsley) {
        return;
      }
      var msg = this._$submitSource || this.$element.find('input[type="submit"], button[type="submit"]').first();
      /** @type {null} */
      this._$submitSource = null;
      this.$element.find(".parsley-synthetic-submit-button").prop("disabled", true);
      if (msg.is("[formnovalidate]")) {
        return;
      }
      var promise = this.whenValidate({
        event : event
      });
      if ("resolved" === promise.state() && false !== this._trigger("submit")) {
      } else {
        event.stopImmediatePropagation();
        event.preventDefault();
        if ("pending" === promise.state()) {
          promise.done(function() {
            worker._submit(msg);
          });
        }
      }
    },
    onSubmitButton : function(event) {
      this._$submitSource = $(event.target);
    },
    _submit : function(type) {
      if (false === this._trigger("submit")) {
        return;
      }
      if (type) {
        var $synthetic = this.$element.find(".parsley-synthetic-submit-button").prop("disabled", false);
        if (0 === $synthetic.length) {
          $synthetic = $('<input class="parsley-synthetic-submit-button" type="hidden">').appendTo(this.$element);
        }
        $synthetic.attr({
          name : type.attr("name"),
          value : type.attr("value")
        });
      }
      this.$element.trigger($.extend($.Event("submit"), {
        parsley : true
      }));
    },
    validate : function(options) {
      if (arguments.length >= 1 && !$.isPlainObject(options)) {
        ParsleyUtils__default.warnOnce("Calling validate on a parsley form without passing arguments as an object is deprecated.");
        var data = _slice.call(arguments);
        var org = data[0];
        var force = data[1];
        var name = data[2];
        options = {
          group : org,
          force : force,
          event : name
        };
      }
      return statusMapping[this.whenValidate(options).state()];
    },
    whenValidate : function() {
      var _this6 = this;
      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var group = options.group;
      var force = options.force;
      var event = options.event;
      this.submitEvent = event;
      if (event) {
        this.submitEvent = $.extend({}, event, {
          preventDefault : function() {
            ParsleyUtils__default.warnOnce("Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`");
            /** @type {boolean} */
            _this6.validationResult = false;
          }
        });
      }
      /** @type {boolean} */
      this.validationResult = true;
      this._trigger("validate");
      this._refreshFields();
      var promises = this._withoutReactualizingFormOptions(function() {
        return $.map(_this6.fields, function(field) {
          return field.whenValidate({
            force : force,
            group : group
          });
        });
      });
      /**
       * @return {?}
       */
      var pipe = function() {
        var logInDeferred = $.Deferred();
        if (false === _this6.validationResult) {
          logInDeferred.reject();
        }
        return logInDeferred.resolve().promise();
      };
      return $.when.apply($, _toConsumableArray(promises)).done(function() {
        _this6._trigger("success");
      }).fail(function() {
        /** @type {boolean} */
        _this6.validationResult = false;
        _this6.focus();
        _this6._trigger("error");
      }).always(function() {
        _this6._trigger("validated");
      }).pipe(pipe, pipe);
    },
    isValid : function(options) {
      if (arguments.length >= 1 && !$.isPlainObject(options)) {
        ParsleyUtils__default.warnOnce("Calling isValid on a parsley form without passing arguments as an object is deprecated.");
        var _arguments3 = _slice.call(arguments);
        var value = _arguments3[0];
        var force = _arguments3[1];
        options = {
          group : value,
          force : force
        };
      }
      return statusMapping[this.whenValid(options).state()];
    },
    whenValid : function() {
      var s = this;
      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var group = options.group;
      var force = options.force;
      this._refreshFields();
      var promises = this._withoutReactualizingFormOptions(function() {
        return $.map(s.fields, function(field) {
          return field.whenValid({
            group : group,
            force : force
          });
        });
      });
      return $.when.apply($, _toConsumableArray(promises));
    },
    _refreshFields : function() {
      return this.actualizeOptions()._bindFields();
    },
    _bindFields : function() {
      var _this7 = this;
      var oldFields = this.fields;
      /** @type {!Array} */
      this.fields = [];
      this.fieldsMappedById = {};
      this._withoutReactualizingFormOptions(function() {
        _this7.$element.find(_this7.options.inputs).not(_this7.options.excluded).each(function(canCreateDiscussions, element) {
          var fieldInstance = new window.Parsley.Factory(element, {}, _this7);
          if (("ParsleyField" === fieldInstance.__class__ || "ParsleyFieldMultiple" === fieldInstance.__class__) && true !== fieldInstance.options.excluded) {
            if ("undefined" === typeof _this7.fieldsMappedById[fieldInstance.__class__ + "-" + fieldInstance.__id__]) {
              _this7.fieldsMappedById[fieldInstance.__class__ + "-" + fieldInstance.__id__] = fieldInstance;
              _this7.fields.push(fieldInstance);
            }
          }
        });
        $(oldFields).not(_this7.fields).each(function(canCreateDiscussions, $this) {
          $this._trigger("reset");
        });
      });
      return this;
    },
    _withoutReactualizingFormOptions : function(fn) {
      var oldActualizeOptions = this.actualizeOptions;
      /**
       * @return {?}
       */
      this.actualizeOptions = function() {
        return this;
      };
      var result = fn();
      this.actualizeOptions = oldActualizeOptions;
      return result;
    },
    _trigger : function(type) {
      return this.trigger("form:" + type);
    }
  };
  /**
   * @param {!Object} parsleyField
   * @param {string} name
   * @param {!Function} requirements
   * @param {string} priority
   * @param {(number|string)} isDomConstraint
   * @return {undefined}
   */
  var ConstraintFactory = function(parsleyField, name, requirements, priority, isDomConstraint) {
    if (!/ParsleyField/.test(parsleyField.__class__)) {
      throw new Error("ParsleyField or ParsleyFieldMultiple instance expected");
    }
    var validatorSpec = window.Parsley._validatorRegistry.validators[name];
    var validator = new ParsleyValidator(validatorSpec);
    $.extend(this, {
      validator : validator,
      name : name,
      requirements : requirements,
      priority : priority || parsleyField.options[name + "Priority"] || validator.priority,
      isDomConstraint : true === isDomConstraint
    });
    this._parseRequirements(parsleyField.options);
  };
  /**
   * @param {string} word
   * @return {?}
   */
  var capitalize = function(word) {
    var t = word[0].toUpperCase();
    return t + word.slice(1);
  };
  ConstraintFactory.prototype = {
    validate : function(e, t) {
      var i = this.requirementList.slice(0);
      i.unshift(e);
      i.push(t);
      return this.validator.validate.apply(this.validator, i);
    },
    _parseRequirements : function(options) {
      var _this9 = this;
      this.requirementList = this.validator.parseRequirements(this.requirements, function(key) {
        return options[_this9.name + capitalize(key)];
      });
    }
  };
  /**
   * @param {?} field
   * @param {!Function} domOptions
   * @param {!Object} options
   * @param {?} parsleyFormInstance
   * @return {undefined}
   */
  var ParsleyField = function(field, domOptions, options, parsleyFormInstance) {
    /** @type {string} */
    this.__class__ = "ParsleyField";
    this.__id__ = ParsleyUtils__default.generateID();
    this.$element = $(field);
    if ("undefined" !== typeof parsleyFormInstance) {
      this.parent = parsleyFormInstance;
    }
    /** @type {!Object} */
    this.options = options;
    /** @type {!Function} */
    this.domOptions = domOptions;
    /** @type {!Array} */
    this.constraints = [];
    this.constraintsByName = {};
    /** @type {!Array} */
    this.validationResult = [];
    this._bindConstraints();
  };
  var promiseStates = {
    pending : null,
    resolved : true,
    rejected : false
  };
  ParsleyField.prototype = {
    validate : function(options) {
      if (arguments.length >= 1 && !$.isPlainObject(options)) {
        ParsleyUtils__default.warnOnce("Calling validate on a parsley field without passing arguments as an object is deprecated.");
        options = {
          options : options
        };
      }
      var promise = this.whenValidate(options);
      if (!promise) {
        return true;
      }
      switch(promise.state()) {
        case "pending":
          return null;
        case "resolved":
          return true;
        case "rejected":
          return this.validationResult;
      }
    },
    whenValidate : function() {
      var _this9 = this;
      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var force = options.force;
      var group = options.group;
      this.refreshConstraints();
      if (group && !this._isInGroup(group)) {
        return;
      }
      this.value = this.getValue();
      this._trigger("validate");
      return this.whenValid({
        force : force,
        value : this.value,
        _refreshed : true
      }).always(function() {
        _this9._reflowUI();
      }).done(function() {
        _this9._trigger("success");
      }).fail(function() {
        _this9._trigger("error");
      }).always(function() {
        _this9._trigger("validated");
      });
    },
    hasConstraints : function() {
      return 0 !== this.constraints.length;
    },
    needsValidation : function(value) {
      if ("undefined" === typeof value) {
        value = this.getValue();
      }
      if (!value.length && !this._isRequired() && "undefined" === typeof this.options.validateIfEmpty) {
        return false;
      }
      return true;
    },
    _isInGroup : function(group) {
      if ($.isArray(this.options.group)) {
        return -1 !== $.inArray(group, this.options.group);
      }
      return this.options.group === group;
    },
    isValid : function(options) {
      if (arguments.length >= 1 && !$.isPlainObject(options)) {
        ParsleyUtils__default.warnOnce("Calling isValid on a parsley field without passing arguments as an object is deprecated.");
        var _arguments3 = _slice.call(arguments);
        var force = _arguments3[0];
        var value = _arguments3[1];
        options = {
          force : force,
          value : value
        };
      }
      var promise = this.whenValid(options);
      if (!promise) {
        return true;
      }
      return promiseStates[promise.state()];
    },
    whenValid : function() {
      var _this11 = this;
      var _ref10 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var _ref10$multiInstance = _ref10.force;
      var multiInstance = _ref10$multiInstance === undefined ? false : _ref10$multiInstance;
      var value = _ref10.value;
      var group = _ref10.group;
      var _refreshed = _ref10._refreshed;
      if (!_refreshed) {
        this.refreshConstraints();
      }
      if (group && !this._isInGroup(group)) {
        return;
      }
      /** @type {boolean} */
      this.validationResult = true;
      if (!this.hasConstraints()) {
        return $.when();
      }
      if ("undefined" === typeof value || null === value) {
        value = this.getValue();
      }
      if (!this.needsValidation(value) && true !== multiInstance) {
        return $.when();
      }
      var a = this._getGroupedConstraints();
      /** @type {!Array} */
      var ret = [];
      $.each(a, function(i, args) {
        var extra = $.when.apply($, _toConsumableArray($.map(args, function(constraint) {
          return _this11._validateConstraint(value, constraint);
        })));
        ret.push(extra);
        if (extra.state() === "rejected") {
          return false;
        }
      });
      return $.when.apply($, ret);
    },
    _validateConstraint : function(value, constraint) {
      var fieldInstance = this;
      var $loadMetadataPromise = constraint.validate(value, this);
      if (false === $loadMetadataPromise) {
        $loadMetadataPromise = $.Deferred().reject();
      }
      return $.when($loadMetadataPromise).fail(function(errorMessage) {
        if (true === fieldInstance.validationResult) {
          /** @type {!Array} */
          fieldInstance.validationResult = [];
        }
        fieldInstance.validationResult.push({
          assert : constraint,
          errorMessage : "string" === typeof errorMessage && errorMessage
        });
      });
    },
    getValue : function() {
      var value;
      if ("function" === typeof this.options.value) {
        value = this.options.value(this);
      } else {
        if ("undefined" !== typeof this.options.value) {
          value = this.options.value;
        } else {
          value = this.$element.val();
        }
      }
      if ("undefined" === typeof value || null === value) {
        return "";
      }
      return this._handleWhitespace(value);
    },
    refreshConstraints : function() {
      return this.actualizeOptions()._bindConstraints();
    },
    addConstraint : function(name, requirements, priority, isDomConstraint) {
      if (window.Parsley._validatorRegistry.validators[name]) {
        var constraint = new ConstraintFactory(this, name, requirements, priority, isDomConstraint);
        if ("undefined" !== this.constraintsByName[constraint.name]) {
          this.removeConstraint(constraint.name);
        }
        this.constraints.push(constraint);
        this.constraintsByName[constraint.name] = constraint;
      }
      return this;
    },
    removeConstraint : function(name) {
      /** @type {number} */
      var i = 0;
      for (; i < this.constraints.length; i++) {
        if (name === this.constraints[i].name) {
          this.constraints.splice(i, 1);
          break;
        }
      }
      delete this.constraintsByName[name];
      return this;
    },
    updateConstraint : function(name, parameters, priority) {
      return this.removeConstraint(name).addConstraint(name, parameters, priority);
    },
    _bindConstraints : function() {
      /** @type {!Array} */
      var constraints = [];
      var constraintsByName = {};
      /** @type {number} */
      var i = 0;
      for (; i < this.constraints.length; i++) {
        if (false === this.constraints[i].isDomConstraint) {
          constraints.push(this.constraints[i]);
          constraintsByName[this.constraints[i].name] = this.constraints[i];
        }
      }
      /** @type {!Array} */
      this.constraints = constraints;
      this.constraintsByName = constraintsByName;
      var name;
      for (name in this.options) {
        this.addConstraint(name, this.options[name], undefined, true);
      }
      return this._bindHtml5Constraints();
    },
    _bindHtml5Constraints : function() {
      if (this.$element.hasClass("required") || this.$element.attr("required")) {
        this.addConstraint("required", true, undefined, true);
      }
      if ("string" === typeof this.$element.attr("pattern")) {
        this.addConstraint("pattern", this.$element.attr("pattern"), undefined, true);
      }
      if ("undefined" !== typeof this.$element.attr("min") && "undefined" !== typeof this.$element.attr("max")) {
        this.addConstraint("range", [this.$element.attr("min"), this.$element.attr("max")], undefined, true);
      } else {
        if ("undefined" !== typeof this.$element.attr("min")) {
          this.addConstraint("min", this.$element.attr("min"), undefined, true);
        } else {
          if ("undefined" !== typeof this.$element.attr("max")) {
            this.addConstraint("max", this.$element.attr("max"), undefined, true);
          }
        }
      }
      if ("undefined" !== typeof this.$element.attr("minlength") && "undefined" !== typeof this.$element.attr("maxlength")) {
        this.addConstraint("length", [this.$element.attr("minlength"), this.$element.attr("maxlength")], undefined, true);
      } else {
        if ("undefined" !== typeof this.$element.attr("minlength")) {
          this.addConstraint("minlength", this.$element.attr("minlength"), undefined, true);
        } else {
          if ("undefined" !== typeof this.$element.attr("maxlength")) {
            this.addConstraint("maxlength", this.$element.attr("maxlength"), undefined, true);
          }
        }
      }
      var type = this.$element.attr("type");
      if ("undefined" === typeof type) {
        return this;
      }
      if ("number" === type) {
        return this.addConstraint("type", ["number", {
          step : this.$element.attr("step"),
          base : this.$element.attr("min") || this.$element.attr("value")
        }], undefined, true);
      } else {
        if (/^(email|url|range)$/i.test(type)) {
          return this.addConstraint("type", type, undefined, true);
        }
      }
      return this;
    },
    _isRequired : function() {
      if ("undefined" === typeof this.constraintsByName.required) {
        return false;
      }
      return false !== this.constraintsByName.required.requirements;
    },
    _trigger : function(type) {
      return this.trigger("field:" + type);
    },
    _handleWhitespace : function(value) {
      if (true === this.options.trimValue) {
        ParsleyUtils__default.warnOnce('data-parsley-trim-value="true" is deprecated, please use data-parsley-whitespace="trim"');
      }
      if ("squish" === this.options.whitespace) {
        value = value.replace(/\s{2,}/g, " ");
      }
      if ("trim" === this.options.whitespace || "squish" === this.options.whitespace || true === this.options.trimValue) {
        value = ParsleyUtils__default.trimString(value);
      }
      return value;
    },
    _getGroupedConstraints : function() {
      if (false === this.options.priorityEnabled) {
        return [this.constraints];
      }
      /** @type {!Array} */
      var groupedConstraints = [];
      var slots = {};
      /** @type {number} */
      var i = 0;
      for (; i < this.constraints.length; i++) {
        var priority = this.constraints[i].priority;
        if (!slots[priority]) {
          groupedConstraints.push(slots[priority] = []);
        }
        slots[priority].push(this.constraints[i]);
      }
      groupedConstraints.sort(function(notifList, results) {
        return results[0].priority - notifList[0].priority;
      });
      return groupedConstraints;
    }
  };
  /** @type {function(?, !Function, !Object, ?): undefined} */
  var parsley_field = ParsleyField;
  /**
   * @return {undefined}
   */
  var ParsleyMultiple = function() {
    /** @type {string} */
    this.__class__ = "ParsleyFieldMultiple";
  };
  ParsleyMultiple.prototype = {
    addElement : function(b) {
      this.$elements.push(b);
      return this;
    },
    refreshConstraints : function() {
      var fieldConstraints;
      /** @type {!Array} */
      this.constraints = [];
      if (this.$element.is("select")) {
        this.actualizeOptions()._bindConstraints();
        return this;
      }
      /** @type {number} */
      var i = 0;
      for (; i < this.$elements.length; i++) {
        if (!$("html").has(this.$elements[i]).length) {
          this.$elements.splice(i, 1);
          continue;
        }
        fieldConstraints = this.$elements[i].data("ParsleyFieldMultiple").refreshConstraints().constraints;
        /** @type {number} */
        var j = 0;
        for (; j < fieldConstraints.length; j++) {
          this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);
        }
      }
      return this;
    },
    getValue : function() {
      if ("function" === typeof this.options.value) {
        value = this.options.value(this);
      } else {
        if ("undefined" !== typeof this.options.value) {
          return this.options.value;
        }
      }
      if (this.$element.is("input[type=radio]")) {
        return this._findRelated().filter(":checked").val() || "";
      }
      if (this.$element.is("input[type=checkbox]")) {
        /** @type {!Array} */
        var paramsValues = [];
        this._findRelated().filter(":checked").each(function() {
          paramsValues.push($(this).val());
        });
        return paramsValues;
      }
      if (this.$element.is("select") && null === this.$element.val()) {
        return [];
      }
      return this.$element.val();
    },
    _init : function() {
      /** @type {!Array} */
      this.$elements = [this.$element];
      return this;
    }
  };
  /**
   * @param {?} element
   * @param {undefined} options
   * @param {!Object} parsleyFormInstance
   * @return {?}
   */
  var ParsleyFactory = function(element, options, parsleyFormInstance) {
    this.$element = $(element);
    var savedparsleyFormInstance = this.$element.data("Parsley");
    if (savedparsleyFormInstance) {
      if ("undefined" !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {
        /** @type {!Object} */
        savedparsleyFormInstance.parent = parsleyFormInstance;
        savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);
      }
      return savedparsleyFormInstance;
    }
    if (!this.$element.length) {
      throw new Error("You must bind Parsley on an existing element.");
    }
    if ("undefined" !== typeof parsleyFormInstance && "ParsleyForm" !== parsleyFormInstance.__class__) {
      throw new Error("Parent instance must be a ParsleyForm instance");
    }
    this.parent = parsleyFormInstance || window.Parsley;
    return this.init(options);
  };
  ParsleyFactory.prototype = {
    init : function(options) {
      /** @type {string} */
      this.__class__ = "Parsley";
      /** @type {string} */
      this.__version__ = "2.3.5";
      this.__id__ = ParsleyUtils__default.generateID();
      this._resetOptions(options);
      if (this.$element.is("form") || ParsleyUtils__default.checkAttr(this.$element, this.options.namespace, "validate") && !this.$element.is(this.options.inputs)) {
        return this.bind("parsleyForm");
      }
      return this.isMultiple() ? this.handleMultiple() : this.bind("parsleyField");
    },
    isMultiple : function() {
      return this.$element.is("input[type=radio], input[type=checkbox]") || this.$element.is("select") && "undefined" !== typeof this.$element.attr("multiple");
    },
    handleMultiple : function() {
      var fieldInstance = this;
      var name;
      var o;
      var parsleyMultipleInstance;
      if (this.options.multiple) {
      } else {
        if ("undefined" !== typeof this.$element.attr("name") && this.$element.attr("name").length) {
          this.options.multiple = name = this.$element.attr("name");
        } else {
          if ("undefined" !== typeof this.$element.attr("id") && this.$element.attr("id").length) {
            this.options.multiple = this.$element.attr("id");
          }
        }
      }
      if (this.$element.is("select") && "undefined" !== typeof this.$element.attr("multiple")) {
        this.options.multiple = this.options.multiple || this.__id__;
        return this.bind("parsleyFieldMultiple");
      } else {
        if (!this.options.multiple) {
          ParsleyUtils__default.warn("To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.", this.$element);
          return this;
        }
      }
      this.options.multiple = this.options.multiple.replace(/(:|\.|\[|\]|\{|\}|\$)/g, "");
      if ("undefined" !== typeof name) {
        $('input[name="' + name + '"]').each(function(canCreateDiscussions, chartDiv) {
          if ($(chartDiv).is("input[type=radio], input[type=checkbox]")) {
            $(chartDiv).attr(fieldInstance.options.namespace + "multiple", fieldInstance.options.multiple);
          }
        });
      }
      var $previouslyRelated = this._findRelated();
      /** @type {number} */
      var i = 0;
      for (; i < $previouslyRelated.length; i++) {
        parsleyMultipleInstance = $($previouslyRelated.get(i)).data("Parsley");
        if ("undefined" !== typeof parsleyMultipleInstance) {
          if (!this.$element.data("ParsleyFieldMultiple")) {
            parsleyMultipleInstance.addElement(this.$element);
          }
          break;
        }
      }
      this.bind("parsleyField", true);
      return parsleyMultipleInstance || this.bind("parsleyFieldMultiple");
    },
    bind : function(type, name) {
      var obj;
      switch(type) {
        case "parsleyForm":
          obj = $.extend(new ParsleyForm(this.$element, this.domOptions, this.options), window.ParsleyExtend)._bindFields();
          break;
        case "parsleyField":
          obj = $.extend(new parsley_field(this.$element, this.domOptions, this.options, this.parent), window.ParsleyExtend);
          break;
        case "parsleyFieldMultiple":
          obj = $.extend(new parsley_field(this.$element, this.domOptions, this.options, this.parent), new ParsleyMultiple, window.ParsleyExtend)._init();
          break;
        default:
          throw new Error(type + "is not a supported Parsley type");
      }
      if (this.options.multiple) {
        ParsleyUtils__default.setAttr(this.$element, this.options.namespace, "multiple", this.options.multiple);
      }
      if ("undefined" !== typeof name) {
        this.$element.data("ParsleyFieldMultiple", obj);
        return obj;
      }
      this.$element.data("Parsley", obj);
      obj._actualizeTriggers();
      obj._trigger("init");
      return obj;
    }
  };
  var h = $.fn.jquery.split(".");
  if (parseInt(h[0]) <= 1 && parseInt(h[1]) < 8) {
    throw "The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.";
  }
  if (!h.forEach) {
    ParsleyUtils__default.warn("Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim");
  }
  var Parsley = $.extend(new ParsleyAbstract, {
    $element : $(document),
    actualizeOptions : null,
    _resetOptions : null,
    Factory : ParsleyFactory,
    version : "2.3.5"
  });
  $.extend(parsley_field.prototype, ParsleyUI.Field, ParsleyAbstract.prototype);
  $.extend(ParsleyForm.prototype, ParsleyUI.Form, ParsleyAbstract.prototype);
  $.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);
  /** @type {function(boolean): ?} */
  $.fn.parsley = $.fn.psly = function(options) {
    if (this.length > 1) {
      /** @type {!Array} */
      var instances = [];
      this.each(function() {
        instances.push($(this).parsley(options));
      });
      return instances;
    }
    if (!$(this).length) {
      ParsleyUtils__default.warn("You must bind Parsley on an existing element.");
      return;
    }
    return new ParsleyFactory(this, options);
  };
  if ("undefined" === typeof window.ParsleyExtend) {
    window.ParsleyExtend = {};
  }
  Parsley.options = $.extend(ParsleyUtils__default.objectCreate(ParsleyDefaults), window.ParsleyConfig);
  window.ParsleyConfig = Parsley.options;
  window.Parsley = window.psly = Parsley;
  window.ParsleyUtils = ParsleyUtils__default;
  var data = window.Parsley._validatorRegistry = new ParsleyValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);
  window.ParsleyValidator = {};
  $.each("setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator".split(" "), function(i, method) {
    window.Parsley[method] = $.proxy(data, method);
    /**
     * @return {?}
     */
    window.ParsleyValidator[method] = function() {
      var _base;
      ParsleyUtils__default.warnOnce("Accessing the method '" + method + "' through ParsleyValidator is deprecated. Simply call 'window.Parsley." + method + "(...)'");
      return (_base = window.Parsley)[method].apply(_base, arguments);
    };
  });
  window.Parsley.UI = ParsleyUI;
  window.ParsleyUI = {
    removeError : function(instance, name, doNotUpdateClass) {
      /** @type {boolean} */
      var updateClass = true !== doNotUpdateClass;
      ParsleyUtils__default.warnOnce("Accessing ParsleyUI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method.");
      return instance.removeError(name, {
        updateClass : updateClass
      });
    },
    getErrorsMessages : function(instance) {
      ParsleyUtils__default.warnOnce("Accessing ParsleyUI is deprecated. Call 'getErrorsMessages' on the instance directly.");
      return instance.getErrorsMessages();
    }
  };
  $.each("addError updateError".split(" "), function(canCreateDiscussions, method) {
    /**
     * @param {!Object} instance
     * @param {?} args
     * @param {string} notMessage
     * @param {string} assertions
     * @param {boolean} doNotUpdateClass
     * @return {?}
     */
    window.ParsleyUI[method] = function(instance, args, notMessage, assertions, doNotUpdateClass) {
      /** @type {boolean} */
      var updateClass = true !== doNotUpdateClass;
      ParsleyUtils__default.warnOnce("Accessing ParsleyUI is deprecated. Call '" + method + "' on the instance directly. Please comment in issue 1073 as to your need to call this method.");
      return instance[method](args, {
        message : notMessage,
        assert : assertions,
        updateClass : updateClass
      });
    };
  });
  if (/firefox/i.test(navigator.userAgent)) {
    $(document).on("change", "select", function(jEvent) {
      $(jEvent.target).trigger("input");
    });
  }
  if (false !== window.ParsleyConfig.autoBind) {
    $(function() {
      if ($("[data-parsley-validate]").length) {
        $("[data-parsley-validate]").parsley();
      }
    });
  }
  var me = $({});
  /**
   * @return {undefined}
   */
  var deprecated = function() {
    ParsleyUtils__default.warnOnce("Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley");
  };
  /** @type {string} */
  var eventPrefix = "parsley:";
  /**
   * @param {string} name
   * @param {!Function} callback
   * @return {undefined}
   */
  $.listen = function(name, callback) {
    var context;
    deprecated();
    if ("object" === typeof arguments[1] && "function" === typeof arguments[2]) {
      context = arguments[1];
      callback = arguments[2];
    }
    if ("function" !== typeof callback) {
      throw new Error("Wrong parameters");
    }
    window.Parsley.on(eventName(name), adapt(callback, context));
  };
  /**
   * @param {!Object} instance
   * @param {string} name
   * @param {!Function} fn
   * @return {undefined}
   */
  $.listenTo = function(instance, name, fn) {
    deprecated();
    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm)) {
      throw new Error("Must give Parsley instance");
    }
    if ("string" !== typeof name || "function" !== typeof fn) {
      throw new Error("Wrong parameters");
    }
    instance.on(eventName(name), adapt(fn));
  };
  /**
   * @param {string} name
   * @param {?} fn
   * @return {undefined}
   */
  $.unsubscribe = function(name, fn) {
    deprecated();
    if ("string" !== typeof name || "function" !== typeof fn) {
      throw new Error("Wrong arguments");
    }
    window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);
  };
  /**
   * @param {!Object} instance
   * @param {string} name
   * @return {undefined}
   */
  $.unsubscribeTo = function(instance, name) {
    deprecated();
    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm)) {
      throw new Error("Must give Parsley instance");
    }
    instance.off(eventName(name));
  };
  /**
   * @param {string} name
   * @return {undefined}
   */
  $.unsubscribeAll = function(name) {
    deprecated();
    window.Parsley.off(eventName(name));
    $("form,input,textarea,select").each(function() {
      var instance = $(this).data("Parsley");
      if (instance) {
        instance.off(eventName(name));
      }
    });
  };
  /**
   * @param {string} name
   * @param {(Object|string)} instance
   * @return {undefined}
   */
  $.emit = function(name, instance) {
    var _instance;
    deprecated();
    /** @type {boolean} */
    var isSizeConstrained = instance instanceof parsley_field || instance instanceof ParsleyForm;
    /** @type {!Array<?>} */
    var args = Array.prototype.slice.call(arguments, isSizeConstrained ? 2 : 1);
    args.unshift(eventName(name));
    if (!isSizeConstrained) {
      instance = window.Parsley;
    }
    (_instance = instance).trigger.apply(_instance, _toConsumableArray(args));
  };
  var z = {};
  $.extend(true, Parsley, {
    asyncValidators : {
      "default" : {
        fn : function(type) {
          return type.status >= 200 && type.status < 300;
        },
        url : false
      },
      reverse : {
        fn : function(type) {
          return type.status < 200 || type.status >= 300;
        },
        url : false
      }
    },
    addAsyncValidator : function(name, fn, url, options) {
      Parsley.asyncValidators[name] = {
        fn : fn,
        url : url || false,
        options : options || {}
      };
      return this;
    }
  });
  Parsley.addValidator("remote", {
    requirementType : {
      "" : "string",
      "validator" : "string",
      "reverse" : "boolean",
      "options" : "object"
    },
    validateString : function(match, url, options, input) {
      var finalResults = {};
      var data;
      var csr;
      var name = options.validator || (true === options.reverse ? "reverse" : "default");
      if ("undefined" === typeof Parsley.asyncValidators[name]) {
        throw new Error("Calling an undefined async validator: `" + name + "`");
      }
      url = Parsley.asyncValidators[name].url || url;
      if (url.indexOf("{value}") > -1) {
        url = url.replace("{value}", encodeURIComponent(match));
      } else {
        finalResults[input.$element.attr("name") || input.$element.attr("id")] = match;
      }
      var formData = $.extend(true, options.options || {}, Parsley.asyncValidators[name].options);
      data = $.extend(true, {}, {
        url : url,
        data : finalResults,
        type : "GET"
      }, formData);
      input.trigger("field:ajaxoptions", input, data);
      csr = $.param(data);
      if ("undefined" === typeof Parsley._remoteCache) {
        Parsley._remoteCache = {};
      }
      var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(data);
      /**
       * @return {?}
       */
      var handleXhr = function() {
        var result = Parsley.asyncValidators[name].fn.call(input, xhr, url, options);
        if (!result) {
          result = $.Deferred().reject();
        }
        return $.when(result);
      };
      return xhr.then(handleXhr, handleXhr);
    },
    priority : -1
  });
  Parsley.on("form:submit", function() {
    Parsley._remoteCache = {};
  });
  /**
   * @return {?}
   */
  window.ParsleyExtend.addAsyncValidator = function() {
    ParsleyUtils.warnOnce("Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`");
    return Parsley.addAsyncValidator.apply(Parsley, arguments);
  };
  Parsley.addMessages("en", {
    defaultMessage : "This value seems to be invalid.",
    type : {
      email : "This value should be a valid email.",
      url : "This value should be a valid url.",
      number : "This value should be a valid number.",
      integer : "This value should be a valid integer.",
      digits : "This value should be digits.",
      alphanum : "This value should be alphanumeric."
    },
    notblank : "This value should not be blank.",
    required : "This value is required.",
    pattern : "This value seems to be invalid.",
    min : "This value should be greater than or equal to %s.",
    max : "This value should be lower than or equal to %s.",
    range : "This value should be between %s and %s.",
    minlength : "This value is too short. It should have %s characters or more.",
    maxlength : "This value is too long. It should have %s characters or fewer.",
    length : "This value length is invalid. It should be between %s and %s characters long.",
    mincheck : "You must select at least %s choices.",
    maxcheck : "You must select %s choices or fewer.",
    check : "You must select between %s and %s choices.",
    equalto : "This value should be the same."
  });
  Parsley.setLocale("en");
  var parsley = Parsley;
  return parsley;
});
Parsley.addMessages("ru", {
  defaultMessage : "\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.",
  type : {
    email : "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b.",
    url : "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 URL \u0430\u0434\u0440\u0435\u0441.",
    number : "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e.",
    integer : "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.",
    digits : "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0446\u0438\u0444\u0440\u044b.",
    alphanum : "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0431\u0443\u043a\u0432\u0435\u043d\u043d\u043e-\u0446\u0438\u0444\u0440\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435."
  },
  notblank : "\u042d\u0442\u043e \u043f\u043e\u043b\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043e.",
  required : "\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435.",
  pattern : "\u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e.",
  min : "\u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u0447\u0435\u043c %s.",
  max : "\u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c %s.",
  range : "\u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043e\u0442 %s \u0434\u043e %s.",
  minlength : "\u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 %s \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.",
  maxlength : "\u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 %s \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.",
  length : "\u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u0442 %s \u0434\u043e %s \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.",
  mincheck : "\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 %s \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.",
  maxcheck : "\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 %s \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.",
  check : "\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043e\u0442 %s \u0434\u043e %s \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.",
  equalto : "\u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c."
});
Parsley.setLocale("ru");
(function(root, factory) {
  var moment;
  if (typeof exports === "object") {
    try {
      moment = require("moment");
    } catch (n) {
    }
    module.exports = factory(moment);
  } else {
    if (typeof define === "function" && define.amd) {
      define(function(require) {
        /** @type {string} */
        var id = "moment";
        try {
          moment = require(id);
        } catch (a) {
        }
        return factory(moment);
      });
    } else {
      root.Pikaday = factory(root.moment);
    }
  }
})(this, function(moment) {
  /** @type {boolean} */
  var hasMoment = typeof moment === "function";
  /** @type {boolean} */
  var hasEventListeners = !!window.addEventListener;
  var document = window.document;
  var sto = window.setTimeout;
  /**
   * @param {!Object} elem
   * @param {string} type
   * @param {!Function} fn
   * @param {boolean} add
   * @return {undefined}
   */
  var addEvent = function(elem, type, fn, add) {
    if (hasEventListeners) {
      elem.addEventListener(type, fn, !!add);
    } else {
      elem.attachEvent("on" + type, fn);
    }
  };
  /**
   * @param {!Element} elem
   * @param {string} type
   * @param {!Function} fn
   * @param {boolean} bubble
   * @return {undefined}
   */
  var removeEvent = function(elem, type, fn, bubble) {
    if (hasEventListeners) {
      elem.removeEventListener(type, fn, !!bubble);
    } else {
      elem.detachEvent("on" + type, fn);
    }
  };
  /**
   * @param {string} s
   * @return {?}
   */
  var trim = function(s) {
    return s.trim ? s.trim() : s.replace(/^\s+|\s+$/g, "");
  };
  /**
   * @param {!Object} el
   * @param {string} cn
   * @return {?}
   */
  var hasClass = function(el, cn) {
    return (" " + el.className + " ").indexOf(" " + cn + " ") !== -1;
  };
  /**
   * @param {!Object} el
   * @param {string} cn
   * @return {undefined}
   */
  var addClass = function(el, cn) {
    if (!hasClass(el, cn)) {
      el.className = el.className === "" ? cn : el.className + " " + cn;
    }
  };
  /**
   * @param {!Object} elem
   * @param {string} name
   * @return {undefined}
   */
  var removeClass = function(elem, name) {
    elem.className = trim((" " + elem.className + " ").replace(" " + name + " ", " "));
  };
  /**
   * @param {?} obj
   * @return {?}
   */
  var isArray = function(obj) {
    return /Array/.test(Object.prototype.toString.call(obj));
  };
  /**
   * @param {!Date} obj
   * @return {?}
   */
  var isDate = function(obj) {
    return /Date/.test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime());
  };
  /**
   * @param {!Date} day
   * @return {?}
   */
  var isWeekend = function(day) {
    var type = day.getDay();
    return type === 0 || type === 6;
  };
  /**
   * @param {number} value
   * @return {?}
   */
  var getPlusValue = function(value) {
    return value % 4 === 0 && value % 100 !== 0 || value % 400 === 0;
  };
  /**
   * @param {number} value
   * @param {number} category
   * @return {?}
   */
  var format = function(value, category) {
    return [31, getPlusValue(value) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][category];
  };
  /**
   * @param {!Date} date
   * @return {undefined}
   */
  var setToStartOfDay = function(date) {
    if (isDate(date)) {
      date.setHours(0, 0, 0, 0);
    }
  };
  /**
   * @param {!Date} b
   * @param {!Date} a
   * @return {?}
   */
  var compareDates = function(b, a) {
    return b.getTime() === a.getTime();
  };
  /**
   * @param {!Object} to
   * @param {!Array} from
   * @param {string} overwrite
   * @return {?}
   */
  var extend = function(to, from, overwrite) {
    var prop;
    var hasProp;
    for (prop in from) {
      /** @type {boolean} */
      hasProp = to[prop] !== undefined;
      if (hasProp && typeof from[prop] === "object" && from[prop] !== null && from[prop].nodeName === undefined) {
        if (isDate(from[prop])) {
          if (overwrite) {
            /** @type {!Date} */
            to[prop] = new Date(from[prop].getTime());
          }
        } else {
          if (isArray(from[prop])) {
            if (overwrite) {
              to[prop] = from[prop].slice(0);
            }
          } else {
            to[prop] = extend({}, from[prop], overwrite);
          }
        }
      } else {
        if (overwrite || !hasProp) {
          to[prop] = from[prop];
        }
      }
    }
    return to;
  };
  /**
   * @param {!EventTarget} elem
   * @param {string} type
   * @param {!Array} data
   * @return {undefined}
   */
  var fireEvent = function(elem, type, data) {
    var event;
    if (document.createEvent) {
      event = document.createEvent("HTMLEvents");
      event.initEvent(type, true, false);
      event = extend(event, data);
      elem.dispatchEvent(event);
    } else {
      if (document.createEventObject) {
        event = document.createEventObject();
        event = extend(event, data);
        elem.fireEvent("on" + type, event);
      }
    }
  };
  /**
   * @param {string} calendar
   * @return {?}
   */
  var adjustCalendar = function(calendar) {
    if (calendar.month < 0) {
      calendar.year -= Math.ceil(Math.abs(calendar.month) / 12);
      calendar.month += 12;
    }
    if (calendar.month > 11) {
      calendar.year += Math.floor(Math.abs(calendar.month) / 12);
      calendar.month -= 12;
    }
    return calendar;
  };
  var defaults = {
    field : null,
    bound : undefined,
    ariaLabel : "Use the arrow keys to pick a date",
    position : "bottom left",
    reposition : true,
    format : "YYYY-MM-DD",
    toString : null,
    parse : null,
    defaultDate : null,
    setDefaultDate : false,
    firstDay : 0,
    firstWeekOfYearMinDays : 4,
    formatStrict : false,
    minDate : null,
    maxDate : null,
    yearRange : 10,
    showWeekNumber : false,
    pickWholeWeek : false,
    minYear : 0,
    maxYear : 9999,
    minMonth : undefined,
    maxMonth : undefined,
    startRange : null,
    endRange : null,
    isRTL : false,
    yearSuffix : "",
    showMonthAfterYear : false,
    showDaysInNextAndPreviousMonths : false,
    enableSelectionDaysInNextAndPreviousMonths : false,
    numberOfMonths : 1,
    mainCalendar : "left",
    container : undefined,
    blurFieldOnSelect : true,
    i18n : {
      previousMonth : "Previous Month",
      nextMonth : "Next Month",
      months : ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      weekdays : ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      weekdaysShort : ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    },
    theme : null,
    events : [],
    onSelect : null,
    onOpen : null,
    onClose : null,
    onDraw : null,
    keyboardInput : true
  };
  /**
   * @param {!Object} opts
   * @param {number} day
   * @param {boolean} abbr
   * @return {?}
   */
  var renderDayName = function(opts, day, abbr) {
    day = day + opts.firstDay;
    for (; day >= 7;) {
      /** @type {number} */
      day = day - 7;
    }
    return abbr ? opts.i18n.weekdaysShort[day] : opts.i18n.weekdays[day];
  };
  /**
   * @param {!Object} opts
   * @return {?}
   */
  var renderDay = function(opts) {
    /** @type {!Array} */
    var arr = [];
    /** @type {string} */
    var vip_status = "false";
    if (opts.isEmpty) {
      if (opts.showDaysInNextAndPreviousMonths) {
        arr.push("is-outside-current-month");
        if (!opts.enableSelectionDaysInNextAndPreviousMonths) {
          arr.push("is-selection-disabled");
        }
      } else {
        return '<td class="is-empty"></td>';
      }
    }
    if (opts.isDisabled) {
      arr.push("is-disabled");
    }
    if (opts.isToday) {
      arr.push("is-today");
    }
    if (opts.isSelected) {
      arr.push("is-selected");
      /** @type {string} */
      vip_status = "true";
    }
    if (opts.hasEvent) {
      arr.push("has-event");
    }
    if (opts.isInRange) {
      arr.push("is-inrange");
    }
    if (opts.isStartRange) {
      arr.push("is-startrange");
    }
    if (opts.isEndRange) {
      arr.push("is-endrange");
    }
    return '<td data-day="' + opts.day + '" class="' + arr.join(" ") + '" aria-selected="' + vip_status + '"><button class="pika-button pika-day" type="button" data-pika-year="' + opts.year + '" data-pika-month="' + opts.month + '" data-pika-day="' + opts.day + '">' + opts.day + "</button></td>";
  };
  /**
   * @param {!Date} data
   * @param {number} start
   * @return {?}
   */
  var getDate = function(data, start) {
    data.setHours(0, 0, 0, 0);
    var v = data.getDate();
    var year = data.getDay();
    /** @type {number} */
    var y = start;
    /** @type {number} */
    var date = y - 1;
    /** @type {number} */
    var day = 7;
    /**
     * @param {number} date
     * @return {?}
     */
    var getDay = function(date) {
      return (date + day - 1) % day;
    };
    data.setDate(v + date - getDay(year));
    /** @type {!Date} */
    var r = new Date(data.getFullYear(), 0, y);
    /** @type {number} */
    var numberOfHeadersToCount = 24 * 60 * 60 * 1000;
    /** @type {number} */
    var averageDistanceBetweenHeaders = (data.getTime() - r.getTime()) / numberOfHeadersToCount;
    /** @type {number} */
    var res = 1 + Math.round((averageDistanceBetweenHeaders - date + getDay(r.getDay())) / day);
    return res;
  };
  /**
   * @param {number} d
   * @param {number} i
   * @param {number} m
   * @param {undefined} y
   * @return {?}
   */
  var renderWeek = function(d, i, m, y) {
    /** @type {!Date} */
    var date = new Date(m, i, d);
    var o = hasMoment ? moment(date).isoWeek() : getDate(date, y);
    return '<td class="pika-week">' + o + "</td>";
  };
  /**
   * @param {!Array} days
   * @param {!Event} isRTL
   * @param {string} index
   * @param {string} value
   * @return {?}
   */
  var renderRow = function(days, isRTL, index, value) {
    return '<tr class="pika-row' + (index ? " pick-whole-week" : "") + (value ? " is-selected" : "") + '">' + (isRTL ? days.reverse() : days).join("") + "</tr>";
  };
  /**
   * @param {!Array} rows
   * @return {?}
   */
  var renderBody = function(rows) {
    return "<tbody>" + rows.join("") + "</tbody>";
  };
  /**
   * @param {!Object} opts
   * @return {?}
   */
  var renderHead = function(opts) {
    var i;
    /** @type {!Array} */
    var arr = [];
    if (opts.showWeekNumber) {
      arr.push("<th></th>");
    }
    /** @type {number} */
    i = 0;
    for (; i < 7; i++) {
      arr.push('<th scope="col"><abbr title="' + renderDayName(opts, i) + '">' + renderDayName(opts, i, true) + "</abbr></th>");
    }
    return "<thead><tr>" + (opts.isRTL ? arr.reverse() : arr).join("") + "</tr></thead>";
  };
  /**
   * @param {?} instance
   * @param {number} c
   * @param {number} year
   * @param {number} month
   * @param {undefined} refYear
   * @param {string} randId
   * @return {?}
   */
  var renderTitle = function(instance, c, year, month, refYear, randId) {
    var i;
    var len;
    var outChance;
    var opts = instance._o;
    /** @type {boolean} */
    var isMinYear = year === opts.minYear;
    /** @type {boolean} */
    var isMaxYear = year === opts.maxYear;
    /** @type {string} */
    var param = '<div id="' + randId + '" class="pika-title" role="heading" aria-live="assertive">';
    var h;
    var m;
    /** @type {boolean} */
    var HAS_BROKEN_LINEHEIGHT = true;
    /** @type {boolean} */
    var exclude_rt = true;
    /** @type {!Array} */
    outChance = [];
    /** @type {number} */
    i = 0;
    for (; i < 12; i++) {
      outChance.push('<option value="' + (year === refYear ? i - c : 12 + i - c) + '"' + (i === month ? ' selected="selected"' : "") + (isMinYear && i < opts.minMonth || isMaxYear && i > opts.maxMonth ? ' disabled="disabled"' : "") + ">" + opts.i18n.months[i] + "</option>");
    }
    /** @type {string} */
    h = '<div class="pika-label">' + opts.i18n.months[month] + '<select class="pika-select pika-select-month" tabindex="-1">' + outChance.join("") + "</select></div>";
    if (isArray(opts.yearRange)) {
      i = opts.yearRange[0];
      len = opts.yearRange[1] + 1;
    } else {
      /** @type {number} */
      i = year - opts.yearRange;
      len = 1 + year + opts.yearRange;
    }
    /** @type {!Array} */
    outChance = [];
    for (; i < len && i <= opts.maxYear; i++) {
      if (i >= opts.minYear) {
        outChance.push('<option value="' + i + '"' + (i === year ? ' selected="selected"' : "") + ">" + i + "</option>");
      }
    }
    /** @type {string} */
    m = '<div class="pika-label">' + year + opts.yearSuffix + '<select class="pika-select pika-select-year" tabindex="-1">' + outChance.join("") + "</select></div>";
    if (opts.showMonthAfterYear) {
      /** @type {string} */
      param = param + (m + h);
    } else {
      /** @type {string} */
      param = param + (h + m);
    }
    if (isMinYear && (month === 0 || opts.minMonth >= month)) {
      /** @type {boolean} */
      HAS_BROKEN_LINEHEIGHT = false;
    }
    if (isMaxYear && (month === 11 || opts.maxMonth <= month)) {
      /** @type {boolean} */
      exclude_rt = false;
    }
    if (c === 0) {
      /** @type {string} */
      param = param + ('<button class="pika-prev' + (HAS_BROKEN_LINEHEIGHT ? "" : " is-disabled") + '" type="button">' + opts.i18n.previousMonth + "</button>");
    }
    if (c === instance._o.numberOfMonths - 1) {
      /** @type {string} */
      param = param + ('<button class="pika-next' + (exclude_rt ? "" : " is-disabled") + '" type="button">' + opts.i18n.nextMonth + "</button>");
    }
    return param = param + "</div>";
  };
  /**
   * @param {!Object} opts
   * @param {!Array} data
   * @param {string} randId
   * @return {?}
   */
  var renderTable = function(opts, data, randId) {
    return '<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="' + randId + '">' + renderHead(opts) + renderBody(data) + "</table>";
  };
  /**
   * @param {!Array} options
   * @return {undefined}
   */
  var Pikaday = function(options) {
    var self = this;
    var opts = self.config(options);
    /**
     * @param {!Object} event
     * @return {?}
     */
    self._onMouseDown = function(event) {
      if (!self._v) {
        return;
      }
      event = event || window.event;
      var target = event.target || event.srcElement;
      if (!target) {
        return;
      }
      if (!hasClass(target, "is-disabled")) {
        if (hasClass(target, "pika-button") && !hasClass(target, "is-empty") && !hasClass(target.parentNode, "is-disabled")) {
          self.setDate(new Date(target.getAttribute("data-pika-year"), target.getAttribute("data-pika-month"), target.getAttribute("data-pika-day")));
          if (opts.bound) {
            sto(function() {
              self.hide();
              if (opts.blurFieldOnSelect && opts.field) {
                opts.field.blur();
              }
            }, 100);
          }
        } else {
          if (hasClass(target, "pika-prev")) {
            self.prevMonth();
          } else {
            if (hasClass(target, "pika-next")) {
              self.nextMonth();
            }
          }
        }
      }
      if (!hasClass(target, "pika-select")) {
        if (event.preventDefault) {
          event.preventDefault();
        } else {
          /** @type {boolean} */
          event.returnValue = false;
          return false;
        }
      } else {
        /** @type {boolean} */
        self._c = true;
      }
    };
    /**
     * @param {!Object} event
     * @return {undefined}
     */
    self._onChange = function(event) {
      event = event || window.event;
      var target = event.target || event.srcElement;
      if (!target) {
        return;
      }
      if (hasClass(target, "pika-select-month")) {
        self.gotoMonth(target.value);
      } else {
        if (hasClass(target, "pika-select-year")) {
          self.gotoYear(target.value);
        }
      }
    };
    /**
     * @param {!Object} event
     * @return {undefined}
     */
    self._onKeyChange = function(event) {
      event = event || window.event;
      if (self.isVisible()) {
        switch(event.keyCode) {
          case 13:
          case 27:
            if (opts.field) {
              opts.field.blur();
            }
            break;
          case 37:
            self.adjustDate("subtract", 1);
            break;
          case 38:
            self.adjustDate("subtract", 7);
            break;
          case 39:
            self.adjustDate("add", 1);
            break;
          case 40:
            self.adjustDate("add", 7);
            break;
          case 8:
          case 46:
            self.setDate(null);
            break;
        }
      }
    };
    /**
     * @return {?}
     */
    self._parseFieldValue = function() {
      if (opts.parse) {
        return opts.parse(opts.field.value, opts.format);
      } else {
        if (hasMoment) {
          var parsedMoment = moment(opts.field.value, opts.format, opts.formatStrict);
          return parsedMoment && parsedMoment.isValid() ? parsedMoment.toDate() : null;
        } else {
          return new Date(Date.parse(opts.field.value));
        }
      }
    };
    /**
     * @param {?} e
     * @return {undefined}
     */
    self._onInputChange = function(e) {
      var defDate;
      if (e.firedBy === self) {
        return;
      }
      defDate = self._parseFieldValue();
      if (isDate(defDate)) {
        self.setDate(defDate);
      }
      if (!self._v) {
        self.show();
      }
    };
    /**
     * @return {undefined}
     */
    self._onInputFocus = function() {
      self.show();
    };
    /**
     * @return {undefined}
     */
    self._onInputClick = function() {
      self.show();
    };
    /**
     * @return {undefined}
     */
    self._onInputBlur = function() {
      var pEl = document.activeElement;
      do {
        if (hasClass(pEl, "pika-single")) {
          return;
        }
      } while (pEl = pEl.parentNode);
      if (!self._c) {
        self._b = sto(function() {
          self.hide();
        }, 50);
      }
      /** @type {boolean} */
      self._c = false;
    };
    /**
     * @param {!Object} event
     * @return {undefined}
     */
    self._onClick = function(event) {
      event = event || window.event;
      var target = event.target || event.srcElement;
      var pEl = target;
      if (!target) {
        return;
      }
      if (!hasEventListeners && hasClass(target, "pika-select")) {
        if (!target.onchange) {
          target.setAttribute("onchange", "return;");
          addEvent(target, "change", self._onChange);
        }
      }
      do {
        if (hasClass(pEl, "pika-single") || pEl === opts.trigger) {
          return;
        }
      } while (pEl = pEl.parentNode);
      if (self._v && target !== opts.trigger && pEl !== opts.trigger) {
        self.hide();
      }
    };
    self.el = document.createElement("div");
    /** @type {string} */
    self.el.className = "pika-single" + (opts.isRTL ? " is-rtl" : "") + (opts.theme ? " " + opts.theme : "");
    addEvent(self.el, "mousedown", self._onMouseDown, true);
    addEvent(self.el, "touchend", self._onMouseDown, true);
    addEvent(self.el, "change", self._onChange);
    if (opts.keyboardInput) {
      addEvent(document, "keydown", self._onKeyChange);
    }
    if (opts.field) {
      if (opts.container) {
        opts.container.appendChild(self.el);
      } else {
        if (opts.bound) {
          document.body.appendChild(self.el);
        } else {
          opts.field.parentNode.insertBefore(self.el, opts.field.nextSibling);
        }
      }
      addEvent(opts.field, "change", self._onInputChange);
      if (!opts.defaultDate) {
        opts.defaultDate = self._parseFieldValue();
        /** @type {boolean} */
        opts.setDefaultDate = true;
      }
    }
    var defDate = opts.defaultDate;
    if (isDate(defDate)) {
      if (opts.setDefaultDate) {
        self.setDate(defDate, true);
      } else {
        self.gotoDate(defDate);
      }
    } else {
      self.gotoDate(new Date);
    }
    if (opts.bound) {
      this.hide();
      self.el.className += " is-bound";
      addEvent(opts.trigger, "click", self._onInputClick);
      addEvent(opts.trigger, "focus", self._onInputFocus);
      addEvent(opts.trigger, "blur", self._onInputBlur);
    } else {
      this.show();
    }
  };
  Pikaday.prototype = {
    config : function(data) {
      if (!this._o) {
        this._o = extend({}, defaults, true);
      }
      var opts = extend(this._o, data, true);
      /** @type {boolean} */
      opts.isRTL = !!opts.isRTL;
      opts.field = opts.field && opts.field.nodeName ? opts.field : null;
      /** @type {(null|string)} */
      opts.theme = typeof opts.theme === "string" && opts.theme ? opts.theme : null;
      /** @type {boolean} */
      opts.bound = !!(opts.bound !== undefined ? opts.field && opts.bound : opts.field);
      opts.trigger = opts.trigger && opts.trigger.nodeName ? opts.trigger : opts.field;
      /** @type {boolean} */
      opts.disableWeekends = !!opts.disableWeekends;
      /** @type {(!Function|null)} */
      opts.disableDayFn = typeof opts.disableDayFn === "function" ? opts.disableDayFn : null;
      /** @type {number} */
      var nom = parseInt(opts.numberOfMonths, 10) || 1;
      /** @type {number} */
      opts.numberOfMonths = nom > 4 ? 4 : nom;
      if (!isDate(opts.minDate)) {
        /** @type {boolean} */
        opts.minDate = false;
      }
      if (!isDate(opts.maxDate)) {
        /** @type {boolean} */
        opts.maxDate = false;
      }
      if (opts.minDate && opts.maxDate && opts.maxDate < opts.minDate) {
        /** @type {boolean} */
        opts.maxDate = opts.minDate = false;
      }
      if (opts.minDate) {
        this.setMinDate(opts.minDate);
      }
      if (opts.maxDate) {
        this.setMaxDate(opts.maxDate);
      }
      if (isArray(opts.yearRange)) {
        /** @type {number} */
        var MENU_SCALE_PART = (new Date).getFullYear() - 10;
        /** @type {number} */
        opts.yearRange[0] = parseInt(opts.yearRange[0], 10) || MENU_SCALE_PART;
        /** @type {number} */
        opts.yearRange[1] = parseInt(opts.yearRange[1], 10) || MENU_SCALE_PART;
      } else {
        /** @type {number} */
        opts.yearRange = Math.abs(parseInt(opts.yearRange, 10)) || defaults.yearRange;
        if (opts.yearRange > 100) {
          /** @type {number} */
          opts.yearRange = 100;
        }
      }
      return opts;
    },
    toString : function(format) {
      format = format || this._o.format;
      if (!isDate(this._d)) {
        return "";
      }
      if (this._o.toString) {
        return this._o.toString(this._d, format);
      }
      if (hasMoment) {
        return moment(this._d).format(format);
      }
      return this._d.toDateString();
    },
    getMoment : function() {
      return hasMoment ? moment(this._d) : null;
    },
    setMoment : function(date, preventOnSelect) {
      if (hasMoment && moment.isMoment(date)) {
        this.setDate(date.toDate(), preventOnSelect);
      }
    },
    getDate : function() {
      return isDate(this._d) ? new Date(this._d.getTime()) : null;
    },
    setDate : function(date, preventOnSelect) {
      if (!date) {
        /** @type {null} */
        this._d = null;
        if (this._o.field) {
          /** @type {string} */
          this._o.field.value = "";
          fireEvent(this._o.field, "change", {
            firedBy : this
          });
        }
        return this.draw();
      }
      if (typeof date === "string") {
        /** @type {!Date} */
        date = new Date(Date.parse(date));
      }
      if (!isDate(date)) {
        return;
      }
      var min = this._o.minDate;
      var max = this._o.maxDate;
      if (isDate(min) && date < min) {
        date = min;
      } else {
        if (isDate(max) && date > max) {
          date = max;
        }
      }
      /** @type {!Date} */
      this._d = new Date(date.getTime());
      setToStartOfDay(this._d);
      this.gotoDate(this._d);
      if (this._o.field) {
        this._o.field.value = this.toString();
        fireEvent(this._o.field, "change", {
          firedBy : this
        });
      }
      if (!preventOnSelect && typeof this._o.onSelect === "function") {
        this._o.onSelect.call(this, this.getDate());
      }
    },
    clear : function() {
      this.setDate(null);
    },
    gotoDate : function(date) {
      /** @type {boolean} */
      var a = true;
      if (!isDate(date)) {
        return;
      }
      if (this.calendars) {
        /** @type {!Date} */
        var semiannualPing = new Date(this.calendars[0].year, this.calendars[0].month, 1);
        /** @type {!Date} */
        var playdate = new Date(this.calendars[this.calendars.length - 1].year, this.calendars[this.calendars.length - 1].month, 1);
        var x = date.getTime();
        playdate.setMonth(playdate.getMonth() + 1);
        playdate.setDate(playdate.getDate() - 1);
        /** @type {boolean} */
        a = x < semiannualPing.getTime() || playdate.getTime() < x;
      }
      if (a) {
        /** @type {!Array} */
        this.calendars = [{
          month : date.getMonth(),
          year : date.getFullYear()
        }];
        if (this._o.mainCalendar === "right") {
          this.calendars[0].month += 1 - this._o.numberOfMonths;
        }
      }
      this.adjustCalendars();
    },
    adjustDate : function(sign, offset) {
      var petNameAsDate = this.getDate() || new Date;
      /** @type {number} */
      var tzDiff = parseInt(offset) * 24 * 60 * 60 * 1000;
      var date;
      if (sign === "add") {
        /** @type {!Date} */
        date = new Date(petNameAsDate.valueOf() + tzDiff);
      } else {
        if (sign === "subtract") {
          /** @type {!Date} */
          date = new Date(petNameAsDate.valueOf() - tzDiff);
        }
      }
      this.setDate(date);
    },
    adjustCalendars : function() {
      this.calendars[0] = adjustCalendar(this.calendars[0]);
      /** @type {number} */
      var c = 1;
      for (; c < this._o.numberOfMonths; c++) {
        this.calendars[c] = adjustCalendar({
          month : this.calendars[0].month + c,
          year : this.calendars[0].year
        });
      }
      this.draw();
    },
    gotoToday : function() {
      this.gotoDate(new Date);
    },
    gotoMonth : function(month) {
      if (!isNaN(month)) {
        /** @type {number} */
        this.calendars[0].month = parseInt(month, 10);
        this.adjustCalendars();
      }
    },
    nextMonth : function() {
      this.calendars[0].month++;
      this.adjustCalendars();
    },
    prevMonth : function() {
      this.calendars[0].month--;
      this.adjustCalendars();
    },
    gotoYear : function(year) {
      if (!isNaN(year)) {
        /** @type {number} */
        this.calendars[0].year = parseInt(year, 10);
        this.adjustCalendars();
      }
    },
    setMinDate : function(value) {
      if (value instanceof Date) {
        setToStartOfDay(value);
        /** @type {!Date} */
        this._o.minDate = value;
        /** @type {number} */
        this._o.minYear = value.getFullYear();
        /** @type {number} */
        this._o.minMonth = value.getMonth();
      } else {
        /** @type {null} */
        this._o.minDate = defaults.minDate;
        /** @type {number} */
        this._o.minYear = defaults.minYear;
        this._o.minMonth = defaults.minMonth;
        /** @type {null} */
        this._o.startRange = defaults.startRange;
      }
      this.draw();
    },
    setMaxDate : function(value) {
      if (value instanceof Date) {
        setToStartOfDay(value);
        /** @type {!Date} */
        this._o.maxDate = value;
        /** @type {number} */
        this._o.maxYear = value.getFullYear();
        /** @type {number} */
        this._o.maxMonth = value.getMonth();
      } else {
        /** @type {null} */
        this._o.maxDate = defaults.maxDate;
        /** @type {number} */
        this._o.maxYear = defaults.maxYear;
        this._o.maxMonth = defaults.maxMonth;
        /** @type {null} */
        this._o.endRange = defaults.endRange;
      }
      this.draw();
    },
    setStartRange : function(value) {
      /** @type {number} */
      this._o.startRange = value;
    },
    setEndRange : function(value) {
      /** @type {number} */
      this._o.endRange = value;
    },
    draw : function(force) {
      if (!this._v && !force) {
        return;
      }
      var opts = this._o;
      var minYear = opts.minYear;
      var maxYear = opts.maxYear;
      var minMonth = opts.minMonth;
      var maxMonth = opts.maxMonth;
      /** @type {string} */
      var style = "";
      var randId;
      if (this._y <= minYear) {
        this._y = minYear;
        if (!isNaN(minMonth) && this._m < minMonth) {
          this._m = minMonth;
        }
      }
      if (this._y >= maxYear) {
        this._y = maxYear;
        if (!isNaN(maxMonth) && this._m > maxMonth) {
          this._m = maxMonth;
        }
      }
      /** @type {number} */
      var c = 0;
      for (; c < opts.numberOfMonths; c++) {
        /** @type {string} */
        randId = "pika-title-" + Math.random().toString(36).replace(/[^a-z]+/g, "").substr(0, 2);
        /** @type {string} */
        style = style + ('<div class="pika-lendar">' + renderTitle(this, c, this.calendars[c].year, this.calendars[c].month, this.calendars[0].year, randId) + this.render(this.calendars[c].year, this.calendars[c].month, randId) + "</div>");
      }
      /** @type {string} */
      this.el.innerHTML = style;
      if (opts.bound) {
        if (opts.field.type !== "hidden") {
          sto(function() {
            opts.trigger.focus();
          }, 1);
        }
      }
      if (typeof this._o.onDraw === "function") {
        this._o.onDraw(this);
      }
      if (opts.bound) {
        opts.field.setAttribute("aria-label", opts.ariaLabel);
      }
    },
    adjustPosition : function() {
      var field;
      var pEl;
      var width;
      var height;
      var viewportWidth;
      var viewportHeight;
      var scrollTop;
      var left;
      var top;
      var rect;
      var isOpen;
      var l;
      if (this._o.container) {
        return;
      }
      /** @type {string} */
      this.el.style.position = "absolute";
      field = this._o.trigger;
      pEl = field;
      width = this.el.offsetWidth;
      height = this.el.offsetHeight;
      viewportWidth = window.innerWidth || document.documentElement.clientWidth;
      viewportHeight = window.innerHeight || document.documentElement.clientHeight;
      scrollTop = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;
      /** @type {boolean} */
      isOpen = true;
      /** @type {boolean} */
      l = true;
      if (typeof field.getBoundingClientRect === "function") {
        rect = field.getBoundingClientRect();
        left = rect.left + window.pageXOffset;
        top = rect.bottom + window.pageYOffset;
      } else {
        left = pEl.offsetLeft;
        top = pEl.offsetTop + pEl.offsetHeight;
        for (; pEl = pEl.offsetParent;) {
          left = left + pEl.offsetLeft;
          top = top + pEl.offsetTop;
        }
      }
      if (this._o.reposition && left + width > viewportWidth || this._o.position.indexOf("right") > -1 && left - width + field.offsetWidth > 0) {
        left = left - width + field.offsetWidth;
        /** @type {boolean} */
        isOpen = false;
      }
      if (this._o.reposition && top + height > viewportHeight + scrollTop || this._o.position.indexOf("top") > -1 && top - height - field.offsetHeight > 0) {
        /** @type {number} */
        top = top - height - field.offsetHeight;
        /** @type {boolean} */
        l = false;
      }
      /** @type {string} */
      this.el.style.left = left + "px";
      /** @type {string} */
      this.el.style.top = top + "px";
      addClass(this.el, isOpen ? "left-aligned" : "right-aligned");
      addClass(this.el, l ? "bottom-aligned" : "top-aligned");
      removeClass(this.el, !isOpen ? "left-aligned" : "right-aligned");
      removeClass(this.el, !l ? "bottom-aligned" : "top-aligned");
    },
    render : function(year, month, randId) {
      var opts = this._o;
      /** @type {!Date} */
      var now = new Date;
      var days = format(year, month);
      /** @type {number} */
      var before = (new Date(year, month, 1)).getDay();
      /** @type {!Array} */
      var data = [];
      /** @type {!Array} */
      var row = [];
      setToStartOfDay(now);
      if (opts.firstDay > 0) {
        /** @type {number} */
        before = before - opts.firstDay;
        if (before < 0) {
          /** @type {number} */
          before = before + 7;
        }
      }
      /** @type {number} */
      var from = month === 0 ? 11 : month - 1;
      var Some_title_here_0xtest = month === 11 ? 0 : month + 1;
      var yearOfPreviousMonth = month === 0 ? year - 1 : year;
      var yearOfNextMonth = month === 11 ? year + 1 : year;
      var daysInPreviousMonth = format(yearOfPreviousMonth, from);
      var cells = days + before;
      var after = cells;
      for (; after > 7;) {
        /** @type {number} */
        after = after - 7;
      }
      cells = cells + (7 - after);
      /** @type {boolean} */
      var provider = false;
      /** @type {number} */
      var i = 0;
      /** @type {number} */
      var w = 0;
      for (; i < cells; i++) {
        /** @type {!Date} */
        var day = new Date(year, month, 1 + (i - before));
        var value = isDate(this._d) ? compareDates(day, this._d) : false;
        var isToday = compareDates(day, now);
        /** @type {boolean} */
        var O = opts.events.indexOf(day.toDateString()) !== -1 ? true : false;
        /** @type {boolean} */
        var isEmpty = i < before || i >= days + before;
        /** @type {number} */
        var dayNumber = 1 + (i - before);
        /** @type {number} */
        var m = month;
        /** @type {number} */
        var yearNumber = year;
        var isStartRange = opts.startRange && compareDates(opts.startRange, day);
        var isEndRange = opts.endRange && compareDates(opts.endRange, day);
        var isInRange = opts.startRange && opts.endRange && opts.startRange < day && day < opts.endRange;
        var isDisabled = opts.minDate && day < opts.minDate || opts.maxDate && day > opts.maxDate || opts.disableWeekends && isWeekend(day) || opts.disableDayFn && opts.disableDayFn(day);
        if (isEmpty) {
          if (i < before) {
            dayNumber = daysInPreviousMonth + dayNumber;
            /** @type {number} */
            m = from;
            yearNumber = yearOfPreviousMonth;
          } else {
            /** @type {number} */
            dayNumber = dayNumber - days;
            m = Some_title_here_0xtest;
            yearNumber = yearOfNextMonth;
          }
        }
        var dayConfig = {
          day : dayNumber,
          month : m,
          year : yearNumber,
          hasEvent : O,
          isSelected : value,
          isToday : isToday,
          isDisabled : isDisabled,
          isEmpty : isEmpty,
          isStartRange : isStartRange,
          isEndRange : isEndRange,
          isInRange : isInRange,
          showDaysInNextAndPreviousMonths : opts.showDaysInNextAndPreviousMonths,
          enableSelectionDaysInNextAndPreviousMonths : opts.enableSelectionDaysInNextAndPreviousMonths
        };
        if (opts.pickWholeWeek && value) {
          /** @type {boolean} */
          provider = true;
        }
        row.push(renderDay(dayConfig));
        if (++w === 7) {
          if (opts.showWeekNumber) {
            row.unshift(renderWeek(i - before, month, year, opts.firstWeekOfYearMinDays));
          }
          data.push(renderRow(row, opts.isRTL, opts.pickWholeWeek, provider));
          /** @type {!Array} */
          row = [];
          /** @type {number} */
          w = 0;
          /** @type {boolean} */
          provider = false;
        }
      }
      return renderTable(opts, data, randId);
    },
    isVisible : function() {
      return this._v;
    },
    show : function() {
      if (!this.isVisible()) {
        /** @type {boolean} */
        this._v = true;
        this.draw();
        removeClass(this.el, "is-hidden");
        if (this._o.bound) {
          addEvent(document, "click", this._onClick);
          this.adjustPosition();
        }
        if (typeof this._o.onOpen === "function") {
          this._o.onOpen.call(this);
        }
      }
    },
    hide : function() {
      var v = this._v;
      if (v !== false) {
        if (this._o.bound) {
          removeEvent(document, "click", this._onClick);
        }
        if (!this._o.container) {
          /** @type {string} */
          this.el.style.position = "static";
          /** @type {string} */
          this.el.style.left = "auto";
          /** @type {string} */
          this.el.style.top = "auto";
        }
        addClass(this.el, "is-hidden");
        /** @type {boolean} */
        this._v = false;
        if (v !== undefined && typeof this._o.onClose === "function") {
          this._o.onClose.call(this);
        }
      }
    },
    destroy : function() {
      var opts = this._o;
      this.hide();
      removeEvent(this.el, "mousedown", this._onMouseDown, true);
      removeEvent(this.el, "touchend", this._onMouseDown, true);
      removeEvent(this.el, "change", this._onChange);
      if (opts.keyboardInput) {
        removeEvent(document, "keydown", this._onKeyChange);
      }
      if (opts.field) {
        removeEvent(opts.field, "change", this._onInputChange);
        if (opts.bound) {
          removeEvent(opts.trigger, "click", this._onInputClick);
          removeEvent(opts.trigger, "focus", this._onInputFocus);
          removeEvent(opts.trigger, "blur", this._onInputBlur);
        }
      }
      if (this.el.parentNode) {
        this.el.parentNode.removeChild(this.el);
      }
    }
  };
  return Pikaday;
});
(function(root, factory) {
  if (typeof exports === "object") {
    factory(require("jquery"), require("../pikaday"));
  } else {
    if (typeof define === "function" && define.amd) {
      define(["jquery", "pikaday"], factory);
    } else {
      factory(root.jQuery, root.Pikaday);
    }
  }
})(this, function($, Pikaday) {
  /**
   * @return {?}
   */
  $.fn.pikaday = function() {
    /** @type {!Arguments} */
    var args = arguments;
    if (!args || !args.length) {
      /** @type {!Array} */
      args = [{}];
    }
    return this.each(function() {
      var self = $(this);
      var plugin = self.data("pikaday");
      if (!(plugin instanceof Pikaday)) {
        if (typeof args[0] === "object") {
          var options = $.extend({}, args[0]);
          options.field = self[0];
          self.data("pikaday", new Pikaday(options));
        }
      } else {
        if (typeof args[0] === "string" && typeof plugin[args[0]] === "function") {
          plugin[args[0]].apply(plugin, Array.prototype.slice.call(args, 1));
        }
      }
    });
  };
});
(function(factory) {
  if (typeof exports === "object" && exports && typeof module === "object" && module && module.exports === exports) {
    factory(require("jquery"));
  } else {
    if (typeof define === "function" && define.amd) {
      define(["jquery"], factory);
    } else {
      factory(jQuery);
    }
  }
})(function($) {
  /**
   * @param {!Object} element
   * @return {?}
   */
  function _isVisible(element) {
    var htmlElement = element[0];
    return htmlElement.offsetWidth > 0 && htmlElement.offsetHeight > 0;
  }
  /**
   * @param {!Object} settings
   * @return {?}
   */
  function _parseSettings(settings) {
    if (settings.minTime) {
      settings.minTime = _time2int(settings.minTime);
    }
    if (settings.maxTime) {
      settings.maxTime = _time2int(settings.maxTime);
    }
    if (settings.durationTime && typeof settings.durationTime !== "function") {
      settings.durationTime = _time2int(settings.durationTime);
    }
    if (settings.scrollDefault == "now") {
      /**
       * @return {?}
       */
      settings.scrollDefault = function() {
        return settings.roundingFunction(_time2int(new Date), settings);
      };
    } else {
      if (settings.scrollDefault && typeof settings.scrollDefault != "function") {
        var val = settings.scrollDefault;
        /**
         * @return {?}
         */
        settings.scrollDefault = function() {
          return settings.roundingFunction(_time2int(val), settings);
        };
      } else {
        if (settings.minTime) {
          /**
           * @return {?}
           */
          settings.scrollDefault = function() {
            return settings.roundingFunction(settings.minTime, settings);
          };
        }
      }
    }
    if ($.type(settings.timeFormat) === "string" && settings.timeFormat.match(/[gh]/)) {
      /** @type {boolean} */
      settings._twelveHourTime = true;
    }
    if (settings.showOnFocus === false && settings.showOn.indexOf("focus") != -1) {
      settings.showOn.splice(settings.showOn.indexOf("focus"), 1);
    }
    if (settings.disableTimeRanges.length > 0) {
      var i;
      for (i in settings.disableTimeRanges) {
        /** @type {!Array} */
        settings.disableTimeRanges[i] = [_time2int(settings.disableTimeRanges[i][0]), _time2int(settings.disableTimeRanges[i][1])];
      }
      settings.disableTimeRanges = settings.disableTimeRanges.sort(function(subtractor, subtractee) {
        return subtractor[0] - subtractee[0];
      });
      /** @type {number} */
      i = settings.disableTimeRanges.length - 1;
      for (; i > 0; i--) {
        if (settings.disableTimeRanges[i][0] <= settings.disableTimeRanges[i - 1][1]) {
          /** @type {!Array} */
          settings.disableTimeRanges[i - 1] = [Math.min(settings.disableTimeRanges[i][0], settings.disableTimeRanges[i - 1][0]), Math.max(settings.disableTimeRanges[i][1], settings.disableTimeRanges[i - 1][1])];
          settings.disableTimeRanges.splice(i, 1);
        }
      }
    }
    return settings;
  }
  /**
   * @param {!Object} self
   * @return {undefined}
   */
  function _render(self) {
    var settings = self.data("timepicker-settings");
    var list = self.data("timepicker-list");
    if (list && list.length) {
      list.remove();
      self.data("timepicker-list", false);
    }
    if (settings.useSelect) {
      list = $("<select />", {
        "class" : "ui-timepicker-select"
      });
      var element = list;
    } else {
      list = $("<ul />", {
        "class" : "ui-timepicker-list"
      });
      element = $("<div />", {
        "class" : "ui-timepicker-wrapper",
        "tabindex" : -1
      });
      element.css({
        "display" : "none",
        "position" : "absolute"
      }).append(list);
    }
    if (settings.noneOption) {
      if (settings.noneOption === true) {
        /** @type {string} */
        settings.noneOption = settings.useSelect ? "Time..." : "None";
      }
      if ($.isArray(settings.noneOption)) {
        var i;
        for (i in settings.noneOption) {
          if (parseInt(i, 10) == i) {
            var noneElement = _generateNoneElement(settings.noneOption[i], settings.useSelect);
            list.append(noneElement);
          }
        }
      } else {
        noneElement = _generateNoneElement(settings.noneOption, settings.useSelect);
        list.append(noneElement);
      }
    }
    if (settings.className) {
      element.addClass(settings.className);
    }
    if ((settings.minTime !== null || settings.durationTime !== null) && settings.showDuration) {
      var stepval = typeof settings.step == "function" ? "function" : settings.step;
      element.addClass("ui-timepicker-with-duration");
      element.addClass("ui-timepicker-step-" + settings.step);
    }
    var durStart = settings.minTime;
    if (typeof settings.durationTime === "function") {
      durStart = _time2int(settings.durationTime());
    } else {
      if (settings.durationTime !== null) {
        durStart = settings.durationTime;
      }
    }
    var start = settings.minTime !== null ? settings.minTime : 0;
    var end = settings.maxTime !== null ? settings.maxTime : start + _ONE_DAY - 1;
    if (end < start) {
      end = end + _ONE_DAY;
    }
    if (end === _ONE_DAY - 1 && $.type(settings.timeFormat) === "string" && settings.show2400) {
      /** @type {number} */
      end = _ONE_DAY;
    }
    var dr = settings.disableTimeRanges;
    /** @type {number} */
    var drCur = 0;
    var drLen = dr.length;
    var stepFunc = settings.step;
    if (typeof stepFunc != "function") {
      /**
       * @return {?}
       */
      stepFunc = function() {
        return settings.step;
      };
    }
    i = start;
    /** @type {number} */
    var j = 0;
    for (; i <= end; j++, i = i + stepFunc(j) * 60) {
      var timeInt = i;
      var o = _int2time(timeInt, settings);
      if (settings.useSelect) {
        var row = $("<option />", {
          "value" : o
        });
        row.text(o);
      } else {
        row = $("<li />");
        row.addClass(timeInt % _ONE_DAY < _ONE_DAY / 2 ? "ui-timepicker-am" : "ui-timepicker-pm");
        row.data("time", _moduloSeconds(timeInt, settings));
        row.text(o);
      }
      if ((settings.minTime !== null || settings.durationTime !== null) && settings.showDuration) {
        var durationString = _int2duration(i - durStart, settings.step);
        if (settings.useSelect) {
          row.text(row.text() + " (" + durationString + ")");
        } else {
          var sparklineElement = $("<span />", {
            "class" : "ui-timepicker-duration"
          });
          sparklineElement.text(" (" + durationString + ")");
          row.append(sparklineElement);
        }
      }
      if (drCur < drLen) {
        if (timeInt >= dr[drCur][1]) {
          /** @type {number} */
          drCur = drCur + 1;
        }
        if (dr[drCur] && timeInt >= dr[drCur][0] && timeInt < dr[drCur][1]) {
          if (settings.useSelect) {
            row.prop("disabled", true);
          } else {
            row.addClass("ui-timepicker-disabled");
          }
        }
      }
      list.append(row);
    }
    element.data("timepicker-input", self);
    self.data("timepicker-list", element);
    if (settings.useSelect) {
      if (self.val()) {
        list.val(_roundAndFormatTime(_time2int(self.val()), settings));
      }
      list.on("focus", function() {
        $(this).data("timepicker-input").trigger("showTimepicker");
      });
      list.on("blur", function() {
        $(this).data("timepicker-input").trigger("hideTimepicker");
      });
      list.on("change", function() {
        _setTimeValue(self, $(this).val(), "select");
      });
      _setTimeValue(self, list.val(), "initial");
      self.hide().after(list);
    } else {
      var appendTo = settings.appendTo;
      if (typeof appendTo === "string") {
        appendTo = $(appendTo);
      } else {
        if (typeof appendTo === "function") {
          appendTo = appendTo(self);
        }
      }
      appendTo.append(element);
      _setSelected(self, list);
      list.on("mousedown click", "li", function(canCreateDiscussions) {
        self.off("focus.timepicker");
        self.on("focus.timepicker-ie-hack", function() {
          self.off("focus.timepicker-ie-hack");
          self.on("focus.timepicker", methods.show);
        });
        if (!_hideKeyboard(self)) {
          self[0].focus();
        }
        list.find("li").removeClass("ui-timepicker-selected");
        $(this).addClass("ui-timepicker-selected");
        if (_selectValue(self)) {
          self.trigger("hideTimepicker");
          list.on("mouseup.timepicker click.timepicker", "li", function(canCreateDiscussions) {
            list.off("mouseup.timepicker click.timepicker");
            element.hide();
          });
        }
      });
    }
  }
  /**
   * @param {!Object} optionValue
   * @param {?} useSelect
   * @return {?}
   */
  function _generateNoneElement(optionValue, useSelect) {
    var label;
    var className;
    var value;
    if (typeof optionValue == "object") {
      label = optionValue.label;
      className = optionValue.className;
      value = optionValue.value;
    } else {
      if (typeof optionValue == "string") {
        /** @type {!Object} */
        label = optionValue;
      } else {
        $.error("Invalid noneOption value");
      }
    }
    if (useSelect) {
      return $("<option />", {
        "value" : value,
        "class" : className,
        "text" : label
      });
    } else {
      return $("<li />", {
        "class" : className,
        "text" : label
      }).data("time", String(value));
    }
  }
  /**
   * @param {number} seconds
   * @param {!Object} settings
   * @return {?}
   */
  function _roundAndFormatTime(seconds, settings) {
    seconds = settings.roundingFunction(seconds, settings);
    if (seconds !== null) {
      return _int2time(seconds, settings);
    }
  }
  /**
   * @param {!Event} e
   * @return {undefined}
   */
  function m(e) {
    if (e.target == window) {
      return;
    }
    var jField = $(e.target);
    if (jField.closest(".ui-timepicker-input").length || jField.closest(".ui-timepicker-wrapper").length) {
      return;
    }
    methods.hide();
    $(document).unbind(".ui-timepicker");
    $(window).unbind(".ui-timepicker");
  }
  /**
   * @param {!Object} self
   * @return {?}
   */
  function _hideKeyboard(self) {
    var settings = self.data("timepicker-settings");
    return (window.navigator.msMaxTouchPoints || "ontouchstart" in document) && settings.disableTouchKeyboard;
  }
  /**
   * @param {!Object} self
   * @param {!Object} list
   * @param {number} value
   * @return {?}
   */
  function _findRow(self, list, value) {
    if (!value && value !== 0) {
      return false;
    }
    var settings = self.data("timepicker-settings");
    /** @type {boolean} */
    var lastTrackTitle = false;
    value = settings.roundingFunction(value, settings);
    list.find("li").each(function(i, elem) {
      var track = $(elem);
      if (typeof track.data("time") != "number") {
        return;
      }
      if (track.data("time") == value) {
        lastTrackTitle = track;
        return false;
      }
    });
    return lastTrackTitle;
  }
  /**
   * @param {!Object} self
   * @param {!Object} list
   * @return {undefined}
   */
  function _setSelected(self, list) {
    list.find("li").removeClass("ui-timepicker-selected");
    var timeValue = _time2int(_getTimeValue(self), self.data("timepicker-settings"));
    if (timeValue === null) {
      return;
    }
    var selected = _findRow(self, list, timeValue);
    if (selected) {
      /** @type {number} */
      var n = selected.offset().top - list.offset().top;
      if (n + selected.outerHeight() > list.outerHeight() || n < 0) {
        list.scrollTop(list.scrollTop() + selected.position().top - selected.outerHeight());
      }
      selected.addClass("ui-timepicker-selected");
    }
  }
  /**
   * @param {!Object} e
   * @param {string} origin
   * @return {undefined}
   */
  function _formatValue(e, origin) {
    if (this.value === "" || origin == "timepicker") {
      return;
    }
    var self = $(this);
    if (self.is(":focus") && (!e || e.type != "change")) {
      return;
    }
    var settings = self.data("timepicker-settings");
    var seconds = _time2int(this.value, settings);
    if (seconds === null) {
      self.trigger("timeFormatError");
      return;
    }
    /** @type {boolean} */
    var c = false;
    if (settings.minTime !== null && settings.maxTime !== null && (seconds < settings.minTime || seconds > settings.maxTime)) {
      /** @type {boolean} */
      c = true;
    }
    $.each(settings.disableTimeRanges, function() {
      if (seconds >= this[0] && seconds < this[1]) {
        /** @type {boolean} */
        c = true;
        return false;
      }
    });
    if (settings.forceRoundTime) {
      var roundSeconds = settings.roundingFunction(seconds, settings);
      if (roundSeconds != seconds) {
        seconds = roundSeconds;
        /** @type {null} */
        origin = null;
      }
    }
    var prettyTime = _int2time(seconds, settings);
    if (c) {
      if (_setTimeValue(self, prettyTime, "error") || e && e.type == "change") {
        self.trigger("timeRangeError");
      }
    } else {
      _setTimeValue(self, prettyTime, origin);
    }
  }
  /**
   * @param {!Object} self
   * @return {?}
   */
  function _getTimeValue(self) {
    if (self.is("input")) {
      return self.val();
    } else {
      return self.data("ui-timepicker-value");
    }
  }
  /**
   * @param {!Object} self
   * @param {!Object} value
   * @param {string} source
   * @return {?}
   */
  function _setTimeValue(self, value, source) {
    if (self.is("input")) {
      self.val(value);
      var settings = self.data("timepicker-settings");
      if (settings.useSelect && source != "select" && source != "initial") {
        self.data("timepicker-list").val(_roundAndFormatTime(_time2int(value), settings));
      }
    }
    if (self.data("ui-timepicker-value") != value) {
      self.data("ui-timepicker-value", value);
      if (source == "select") {
        self.trigger("selectTime").trigger("changeTime").trigger("change", "timepicker");
      } else {
        if (["error", "initial"].indexOf(source) == -1) {
          self.trigger("changeTime");
        }
      }
      return true;
    } else {
      self.trigger("selectTime");
      return false;
    }
  }
  /**
   * @param {!Event} e
   * @return {undefined}
   */
  function b(e) {
    switch(e.keyCode) {
      case 13:
      case 9:
        return;
      default:
        e.preventDefault();
    }
  }
  /**
   * @param {!Event} e
   * @return {?}
   */
  function _keydownhandler(e) {
    var self = $(this);
    var list = self.data("timepicker-list");
    if (!list || !_isVisible(list)) {
      if (e.keyCode == 40) {
        methods.show.call(self.get(0));
        list = self.data("timepicker-list");
        if (!_hideKeyboard(self)) {
          self.focus();
        }
      } else {
        return true;
      }
    }
    switch(e.keyCode) {
      case 13:
        if (_selectValue(self)) {
          _formatValue.call(self.get(0), {
            "type" : "change"
          });
          methods.hide.apply(this);
        }
        e.preventDefault();
        return false;
      case 38:
        var selected = list.find(".ui-timepicker-selected");
        if (!selected.length) {
          list.find("li").each(function(i, href) {
            if ($(href).position().top > 0) {
              selected = $(href);
              return false;
            }
          });
          selected.addClass("ui-timepicker-selected");
        } else {
          if (!selected.is(":first-child")) {
            selected.removeClass("ui-timepicker-selected");
            selected.prev().addClass("ui-timepicker-selected");
            if (selected.prev().position().top < selected.outerHeight()) {
              list.scrollTop(list.scrollTop() - selected.outerHeight());
            }
          }
        }
        return false;
      case 40:
        selected = list.find(".ui-timepicker-selected");
        if (selected.length === 0) {
          list.find("li").each(function(i, href) {
            if ($(href).position().top > 0) {
              selected = $(href);
              return false;
            }
          });
          selected.addClass("ui-timepicker-selected");
        } else {
          if (!selected.is(":last-child")) {
            selected.removeClass("ui-timepicker-selected");
            selected.next().addClass("ui-timepicker-selected");
            if (selected.next().position().top + 2 * selected.outerHeight() > list.outerHeight()) {
              list.scrollTop(list.scrollTop() + selected.outerHeight());
            }
          }
        }
        return false;
      case 27:
        list.find("li").removeClass("ui-timepicker-selected");
        methods.hide();
        break;
      case 9:
        methods.hide();
        break;
      default:
        return true;
    }
  }
  /**
   * @param {!Event} e
   * @return {?}
   */
  function _keyuphandler(e) {
    var self = $(this);
    var list = self.data("timepicker-list");
    var settings = self.data("timepicker-settings");
    if (!list || !_isVisible(list) || settings.disableTextInput) {
      return true;
    }
    switch(e.keyCode) {
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 65:
      case 77:
      case 80:
      case 186:
      case 8:
      case 46:
        if (settings.typeaheadHighlight) {
          _setSelected(self, list);
        } else {
          list.hide();
        }
        break;
    }
  }
  /**
   * @param {!Object} self
   * @return {?}
   */
  function _selectValue(self) {
    var settings = self.data("timepicker-settings");
    var list = self.data("timepicker-list");
    /** @type {null} */
    var timeValue = null;
    var selected = list.find(".ui-timepicker-selected");
    if (selected.hasClass("ui-timepicker-disabled")) {
      return false;
    }
    if (selected.length) {
      timeValue = selected.data("time");
    }
    if (timeValue !== null) {
      if (typeof timeValue != "string") {
        timeValue = _int2time(timeValue, settings);
      }
      _setTimeValue(self, timeValue, "select");
    }
    return true;
  }
  /**
   * @param {number} seconds
   * @param {number} step
   * @return {?}
   */
  function _int2duration(seconds, step) {
    /** @type {number} */
    seconds = Math.abs(seconds);
    /** @type {number} */
    var minutes = Math.round(seconds / 60);
    /** @type {!Array} */
    var duration = [];
    var hours;
    var mins;
    if (minutes < 60) {
      /** @type {!Array} */
      duration = [minutes, _lang.mins];
    } else {
      /** @type {number} */
      hours = Math.floor(minutes / 60);
      /** @type {number} */
      mins = minutes % 60;
      if (step == 30 && mins == 30) {
        hours = hours + (_lang.decimal + 5);
      }
      duration.push(hours);
      duration.push(hours == 1 ? _lang.hr : _lang.hrs);
      if (step != 30 && mins) {
        duration.push(mins);
        duration.push(_lang.mins);
      }
    }
    return duration.join(" ");
  }
  /**
   * @param {number} timeInt
   * @param {!Object} settings
   * @return {?}
   */
  function _int2time(timeInt, settings) {
    if (typeof timeInt != "number") {
      return null;
    }
    /** @type {number} */
    var seconds = parseInt(timeInt % 60);
    /** @type {number} */
    var minutes = parseInt(timeInt / 60 % 60);
    /** @type {number} */
    var hours = parseInt(timeInt / (60 * 60) % 24);
    /** @type {!Date} */
    var time = new Date(1970, 0, 2, hours, minutes, seconds, 0);
    if (isNaN(time.getTime())) {
      return null;
    }
    if ($.type(settings.timeFormat) === "function") {
      return settings.timeFormat(time);
    }
    /** @type {string} */
    var output = "";
    var hour;
    var code;
    /** @type {number} */
    var i = 0;
    for (; i < settings.timeFormat.length; i++) {
      code = settings.timeFormat.charAt(i);
      switch(code) {
        case "a":
          output = output + (time.getHours() > 11 ? _lang.pm : _lang.am);
          break;
        case "A":
          output = output + (time.getHours() > 11 ? _lang.PM : _lang.AM);
          break;
        case "g":
          /** @type {number} */
          hour = time.getHours() % 12;
          output = output + (hour === 0 ? "12" : hour);
          break;
        case "G":
          /** @type {number} */
          hour = time.getHours();
          if (timeInt === _ONE_DAY) {
            /** @type {number} */
            hour = settings.show2400 ? 24 : 0;
          }
          output = output + hour;
          break;
        case "h":
          /** @type {number} */
          hour = time.getHours() % 12;
          if (hour !== 0 && hour < 10) {
            /** @type {string} */
            hour = "0" + hour;
          }
          output = output + (hour === 0 ? "12" : hour);
          break;
        case "H":
          /** @type {number} */
          hour = time.getHours();
          if (timeInt === _ONE_DAY) {
            /** @type {number} */
            hour = settings.show2400 ? 24 : 0;
          }
          output = output + (hour > 9 ? hour : "0" + hour);
          break;
        case "i":
          /** @type {number} */
          minutes = time.getMinutes();
          output = output + (minutes > 9 ? minutes : "0" + minutes);
          break;
        case "s":
          /** @type {number} */
          seconds = time.getSeconds();
          output = output + (seconds > 9 ? seconds : "0" + seconds);
          break;
        case "\\":
          i++;
          output = output + settings.timeFormat.charAt(i);
          break;
        default:
          output = output + code;
      }
    }
    return output;
  }
  /**
   * @param {!Object} timeString
   * @param {?} settings
   * @return {?}
   */
  function _time2int(timeString, settings) {
    if (timeString === "" || timeString === null) {
      return null;
    }
    if (typeof timeString == "object") {
      return timeString.getHours() * 3600 + timeString.getMinutes() * 60 + timeString.getSeconds();
    }
    if (typeof timeString != "string") {
      return timeString;
    }
    /** @type {string} */
    timeString = timeString.toLowerCase().replace(/[\s\.]/g, "");
    if (timeString.slice(-1) == "a" || timeString.slice(-1) == "p") {
      /** @type {string} */
      timeString = timeString + "m";
    }
    /** @type {string} */
    var escRightBracket = "(" + _lang.am.replace(".", "") + "|" + _lang.pm.replace(".", "") + "|" + _lang.AM.replace(".", "") + "|" + _lang.PM.replace(".", "") + ")?";
    /** @type {!RegExp} */
    var pattern = new RegExp("^" + escRightBracket + "([0-9]?[0-9])\\W?([0-5][0-9])?\\W?([0-5][0-9])?" + escRightBracket + "$");
    /** @type {(Array<string>|null)} */
    var method = timeString.match(pattern);
    if (!method) {
      return null;
    }
    /** @type {number} */
    var hour = parseInt(method[2] * 1, 10);
    if (hour > 24) {
      if (settings && settings.wrapHours === false) {
        return null;
      } else {
        /** @type {number} */
        hour = hour % 24;
      }
    }
    /** @type {string} */
    var ampm = method[1] || method[5];
    /** @type {number} */
    var hours = hour;
    if (hour <= 12 && ampm) {
      /** @type {boolean} */
      var isPm = ampm == _lang.pm || ampm == _lang.PM;
      if (hour == 12) {
        /** @type {number} */
        hours = isPm ? 12 : 0;
      } else {
        /** @type {number} */
        hours = hour + (isPm ? 12 : 0);
      }
    }
    /** @type {number} */
    var minutes = method[3] * 1 || 0;
    /** @type {number} */
    var seconds = method[4] * 1 || 0;
    /** @type {number} */
    var timeInt = hours * 3600 + minutes * 60 + seconds;
    if (hour < 12 && !ampm && settings && settings._twelveHourTime && settings.scrollDefault) {
      /** @type {number} */
      var delta = timeInt - settings.scrollDefault();
      if (delta < 0 && delta >= _ONE_DAY / -2) {
        /** @type {number} */
        timeInt = (timeInt + _ONE_DAY / 2) % _ONE_DAY;
      }
    }
    return timeInt;
  }
  /**
   * @param {string} stringToPad
   * @return {?}
   */
  function leftPadString(stringToPad) {
    return ("0" + stringToPad).slice(-2);
  }
  /**
   * @param {number} seconds
   * @param {!Object} settings
   * @return {?}
   */
  function _moduloSeconds(seconds, settings) {
    if (seconds == _ONE_DAY && settings.show2400) {
      return seconds;
    }
    return seconds % _ONE_DAY;
  }
  /** @type {number} */
  var _ONE_DAY = 86400;
  var _lang = {
    am : "am",
    pm : "pm",
    AM : "AM",
    PM : "PM",
    decimal : ".",
    mins : "mins",
    hr : "hr",
    hrs : "hrs"
  };
  var methods = {
    init : function(defaults) {
      return this.each(function() {
        var self = $(this);
        /** @type {!Array} */
        var options = [];
        var name;
        for (name in $.fn.timepicker.defaults) {
          if (self.data(name)) {
            options[name] = self.data(name);
          }
        }
        var settings = $.extend({}, $.fn.timepicker.defaults, defaults, options);
        if (settings.lang) {
          _lang = $.extend(_lang, settings.lang);
        }
        settings = _parseSettings(settings);
        self.data("timepicker-settings", settings);
        self.addClass("ui-timepicker-input");
        if (settings.useSelect) {
          _render(self);
        } else {
          self.prop("autocomplete", "off");
          if (settings.showOn) {
            var i;
            for (i in settings.showOn) {
              self.on(settings.showOn[i] + ".timepicker", methods.show);
            }
          }
          self.on("change.timepicker", _formatValue);
          self.on("keydown.timepicker", _keydownhandler);
          self.on("keyup.timepicker", _keyuphandler);
          if (settings.disableTextInput) {
            self.on("keydown.timepicker", b);
          }
          _formatValue.call(self.get(0), null, "initial");
        }
      });
    },
    show : function(type) {
      var self = $(this);
      var settings = self.data("timepicker-settings");
      if (type) {
        type.preventDefault();
      }
      if (settings.useSelect) {
        self.data("timepicker-list").focus();
        return;
      }
      if (_hideKeyboard(self)) {
        self.blur();
      }
      var list = self.data("timepicker-list");
      if (self.prop("readonly")) {
        return;
      }
      if (!list || list.length === 0 || typeof settings.durationTime === "function") {
        _render(self);
        list = self.data("timepicker-list");
      }
      if (_isVisible(list)) {
        return;
      }
      self.data("ui-timepicker-value", self.val());
      _setSelected(self, list);
      methods.hide();
      list.show();
      var pos = {};
      if (settings.orientation.match(/r/)) {
        /** @type {number} */
        pos.left = self.offset().left + self.outerWidth() - list.outerWidth() + parseInt(list.css("marginLeft").replace("px", ""), 10);
      } else {
        pos.left = self.offset().left + parseInt(list.css("marginLeft").replace("px", ""), 10);
      }
      var sort;
      if (settings.orientation.match(/t/)) {
        /** @type {string} */
        sort = "t";
      } else {
        if (settings.orientation.match(/b/)) {
          /** @type {string} */
          sort = "b";
        } else {
          if (self.offset().top + self.outerHeight(true) + list.outerHeight() > $(window).height() + $(window).scrollTop()) {
            /** @type {string} */
            sort = "t";
          } else {
            /** @type {string} */
            sort = "b";
          }
        }
      }
      if (sort == "t") {
        list.addClass("ui-timepicker-positioned-top");
        /** @type {number} */
        pos.top = self.offset().top - list.outerHeight() + parseInt(list.css("marginTop").replace("px", ""), 10);
      } else {
        list.removeClass("ui-timepicker-positioned-top");
        pos.top = self.offset().top + self.outerHeight() + parseInt(list.css("marginTop").replace("px", ""), 10);
      }
      list.offset(pos);
      var selected = list.find(".ui-timepicker-selected");
      if (!selected.length) {
        var timeInt = _time2int(_getTimeValue(self));
        if (timeInt !== null) {
          selected = _findRow(self, list, timeInt);
        } else {
          if (settings.scrollDefault) {
            selected = _findRow(self, list, settings.scrollDefault());
          }
        }
      }
      if (selected && selected.length) {
        /** @type {number} */
        var value = list.scrollTop() + selected.position().top - selected.outerHeight();
        list.scrollTop(value);
      } else {
        list.scrollTop(0);
      }
      if (settings.stopScrollPropagation) {
        $(document).on("wheel.ui-timepicker", ".ui-timepicker-wrapper", function(event) {
          event.preventDefault();
          var currentScroll = $(this).scrollTop();
          $(this).scrollTop(currentScroll + event.originalEvent.deltaY);
        });
      }
      $(document).on("touchstart.ui-timepicker mousedown.ui-timepicker", m);
      $(window).on("resize.ui-timepicker", m);
      if (settings.closeOnWindowScroll) {
        $(document).on("scroll.ui-timepicker", m);
      }
      self.trigger("showTimepicker");
      return this;
    },
    hide : function(type) {
      var self = $(this);
      var settings = self.data("timepicker-settings");
      if (settings && settings.useSelect) {
        self.blur();
      }
      $(".ui-timepicker-wrapper").each(function() {
        var list = $(this);
        if (!_isVisible(list)) {
          return;
        }
        var self = list.data("timepicker-input");
        var settings = self.data("timepicker-settings");
        if (settings && settings.selectOnBlur) {
          _selectValue(self);
        }
        list.hide();
        self.trigger("hideTimepicker");
      });
      return this;
    },
    option : function(name, value) {
      if (typeof name == "string" && typeof value == "undefined") {
        return $(this).data("timepicker-settings")[name];
      }
      return this.each(function() {
        var self = $(this);
        var settings = self.data("timepicker-settings");
        var list = self.data("timepicker-list");
        if (typeof name == "object") {
          settings = $.extend(settings, name);
        } else {
          if (typeof name == "string") {
            /** @type {!Object} */
            settings[name] = value;
          }
        }
        settings = _parseSettings(settings);
        self.data("timepicker-settings", settings);
        _formatValue.call(self.get(0), {
          "type" : "change"
        }, "initial");
        if (list) {
          list.remove();
          self.data("timepicker-list", false);
        }
        if (settings.useSelect) {
          _render(self);
        }
      });
    },
    getSecondsFromMidnight : function() {
      return _time2int(_getTimeValue(this));
    },
    getTime : function(relative_date) {
      var self = this;
      var time_string = _getTimeValue(self);
      if (!time_string) {
        return null;
      }
      var offset = _time2int(time_string);
      if (offset === null) {
        return null;
      }
      if (!relative_date) {
        /** @type {!Date} */
        relative_date = new Date;
      }
      /** @type {!Date} */
      var time = new Date(relative_date);
      time.setHours(offset / 3600);
      time.setMinutes(offset % 3600 / 60);
      time.setSeconds(offset % 60);
      time.setMilliseconds(0);
      return time;
    },
    isVisible : function() {
      var self = this;
      var list = self.data("timepicker-list");
      return !!(list && _isVisible(list));
    },
    setTime : function(value) {
      var self = this;
      var settings = self.data("timepicker-settings");
      if (settings.forceRoundTime) {
        var prettyTime = _roundAndFormatTime(_time2int(value), settings);
      } else {
        prettyTime = _int2time(_time2int(value), settings);
      }
      if (value && prettyTime === null && settings.noneOption) {
        /** @type {string} */
        prettyTime = value;
      }
      _setTimeValue(self, prettyTime);
      if (self.data("timepicker-list")) {
        _setSelected(self, self.data("timepicker-list"));
      }
      return this;
    },
    remove : function() {
      var self = this;
      if (!self.hasClass("ui-timepicker-input")) {
        return;
      }
      var settings = self.data("timepicker-settings");
      self.removeAttr("autocomplete", "off");
      self.removeClass("ui-timepicker-input");
      self.removeData("timepicker-settings");
      self.off(".timepicker");
      if (self.data("timepicker-list")) {
        self.data("timepicker-list").remove();
      }
      if (settings.useSelect) {
        self.show();
      }
      self.removeData("timepicker-list");
      return this;
    }
  };
  /**
   * @param {string} method
   * @return {?}
   */
  $.fn.timepicker = function(method) {
    if (!this.length) {
      return this;
    }
    if (methods[method]) {
      if (!this.hasClass("ui-timepicker-input")) {
        return this;
      }
      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof method === "object" || !method) {
        return methods.init.apply(this, arguments);
      } else {
        $.error("Method " + method + " does not exist on jQuery.timepicker");
      }
    }
  };
  $.fn.timepicker.defaults = {
    appendTo : "body",
    className : null,
    closeOnWindowScroll : false,
    disableTextInput : false,
    disableTimeRanges : [],
    disableTouchKeyboard : false,
    durationTime : null,
    forceRoundTime : false,
    maxTime : null,
    minTime : null,
    noneOption : false,
    orientation : "l",
    roundingFunction : function(seconds, settings) {
      if (seconds === null) {
        return null;
      } else {
        if (typeof settings.step !== "number") {
          return seconds;
        } else {
          /** @type {number} */
          var offset = seconds % (settings.step * 60);
          var start = settings.minTime || 0;
          /** @type {number} */
          offset = offset - start % (settings.step * 60);
          if (offset >= settings.step * 30) {
            seconds = seconds + (settings.step * 60 - offset);
          } else {
            /** @type {number} */
            seconds = seconds - offset;
          }
          return _moduloSeconds(seconds, settings);
        }
      }
    },
    scrollDefault : null,
    selectOnBlur : false,
    show2400 : false,
    showDuration : false,
    showOn : ["click", "focus"],
    showOnFocus : true,
    step : 30,
    stopScrollPropagation : false,
    timeFormat : "g:ia",
    typeaheadHighlight : true,
    useSelect : false,
    wrapHours : true
  };
});
window.Parsley.addAsyncValidator("livestreet", function(xhr) {
  this._remoteCache = {};
  xhr.done(function(rom) {
    if ("undefined" !== typeof rom.errors) {
      var i = this.$element.attr("name") || this.$element.attr("id");
      var artistTrack = rom.errors[i].join("<br>");
      window.ParsleyUI.updateError(this, "remote", artistTrack);
      return false;
    }
  }.bind(this));
  return "undefined" === typeof xhr.responseJSON.errors;
});
jQuery(function(canCreateDiscussions) {
  Parsley.addValidator("rangetags", {
    requirementType : ["integer", "integer"],
    validateString : function(url, min, max) {
      var username = url.replace(/ /g, "").match(/[^\s,]+(,|)/gi);
      return username && username.length >= min && username.length <= max;
    },
    messages : {
      ru : ls.lang.get("validate.tags.count", {
        "field" : "",
        "min" : "%s",
        "max" : "%s"
      })
    }
  });
});
(function($) {
  $.widget("livestreet.lsAutocomplete", {
    options : {
      multiple : false,
      urls : {
        load : null
      },
      responseName : "aItems",
      params : {}
    },
    _create : function() {
      this.element.autocomplete({
        serviceUrl : this.option("urls.load"),
        type : "POST",
        dataType : "json",
        paramName : "value",
        delimiter : this.option("multiple") ? "," : null,
        transformResult : function(data) {
          return {
            suggestions : data[this.option("responseName")]
          };
        }.bind(this),
        params : $.extend({}, {
          security_ls_key : LIVESTREET_SECURITY_KEY
        }, this.option("params"))
      });
    }
  });
})(jQuery);
window.PikadayConfig = window.PikadayConfig || {};
window.PikadayConfig.i18n = window.PikadayConfig.i18n || {};
window.PikadayConfig.i18n.ru = {
  previousMonth : "\u041f\u0440\u0435\u0434. \u043c\u0435\u0441\u044f\u0446",
  nextMonth : "\u0421\u043b\u0435\u0434. \u043c\u0435\u0441\u044f\u0446",
  months : ["\u042f\u043d\u0432\u0430\u0440\u044c", "\u0424\u0435\u0432\u0440\u0430\u043b\u044c", "\u041c\u0430\u0440\u0442", "\u0410\u043f\u0440\u0435\u043b\u044c", "\u041c\u0430\u0439", "\u0418\u044e\u043d\u044c", "\u0418\u044e\u043b\u044c", "\u0410\u0432\u0433\u0443\u0441\u0442", "\u0421\u0435\u043d\u0442\u044f\u0431\u0440\u044c", "\u041e\u043a\u0442\u044f\u0431\u0440\u044c", "\u041d\u043e\u044f\u0431\u0440\u044c", "\u0414\u0435\u043a\u0430\u0431\u0440\u044c"],
  weekdays : ["\u0412\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435", "\u041f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a", "\u0412\u0442\u043e\u0440\u043d\u0438\u043a", "\u0421\u0440\u0435\u0434\u0430", "\u0427\u0435\u0442\u0432\u0435\u0440\u0433", "\u041f\u044f\u0442\u043d\u0438\u0446\u0430", "\u0421\u0443\u0431\u0431\u043e\u0442\u0430"],
  weekdaysShort : ["\u0412\u0441", "\u041f\u043d", "\u0412\u0442", "\u0421\u0440", "\u0427\u0442", "\u041f\u0442", "\u0421\u0431"]
};
(function($) {
  $.widget("livestreet.lsDate", $.livestreet.lsComponent, {
    options : {
      format : "DD.MM.YYYY",
      yearRange : 100,
      firstDay : 1,
      language : null,
      i18n : {
        previousMonth : "Previous Month",
        nextMonth : "Next Month",
        months : ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        weekdays : ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        weekdaysShort : ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
      },
      toString(date, force) {
        const CredentialScope = date.getFullYear();
        const month = date.getMonth() + 1;
        const day = date.getDate();
        const graphString = [day < 10 ? "0" + day : day, month < 10 ? "0" + month : month, CredentialScope].join(".");
        return graphString;
      },
      parse(dateString, options) {
        const sArrDayId = dateString.split(".");
        const prevDay = parseInt(sArrDayId[0], 10);
        const mm2 = parseInt(sArrDayId[1], 10) - 1;
        const year = parseInt(sArrDayId[2], 10);
        return new Date(year, mm2, prevDay);
      }
    },
    _create : function() {
      this._super();
      this.option("i18n", window.PikadayConfig.i18n[this.option("language")] || this.option("i18n"));
      this.element.pikaday(this.options);
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsTime", $.livestreet.lsComponent, {
    options : {
      timeFormat : "H:i"
    },
    _create : function() {
      this._super();
      this.element.timepicker(this.options);
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsCaptcha", $.livestreet.lsComponent, {
    options : {
      name : null,
      url : aRouter.ajax + "captcha/"
    },
    _create : function() {
      this._super();
      this.update();
      this._on({
        click : "update"
      });
    },
    getUrl : function() {
      return this.options.url + "?security_ls_key=" + LIVESTREET_SECURITY_KEY + "&n=" + Math.random() + "&name=" + this.options.name;
    },
    update : function() {
      this.element.css("background-image", "url(" + this.getUrl() + ")");
    }
  });
})(jQuery);
(function($) {
  /** @type {!Array} */
  var e = [];
  $.widget("livestreet.lsReCaptcha", $.livestreet.lsComponent, {
    options : {
      captchaName : null,
      name : null,
      key : null
    },
    _create : function() {
      this._super();
      if (window["grecaptcha"]) {
        this.init();
      } else {
        e.push(this);
      }
    },
    init : function() {
      var elem = this.element.get(0);
      this.grecaptcha = grecaptcha.render(elem, {
        sitekey : this.options.key,
        callback : this.callbackResponse.bind(this)
      });
      this.input = $("<input>").attr({
        name : this.options.name,
        type : "hidden"
      });
      this.input.appendTo(this.element);
      var e = $("#" + $(elem).attr("id") + "-reset");
      if (e.length) {
        e.click(this.reset.bind(this));
      }
    },
    callbackResponse : function(text) {
      this.input.val(text);
    },
    initNotReady : function() {
      if (e) {
        $.each(e, function(canCreateDiscussions, TabEvents) {
          TabEvents.init();
        });
        /** @type {!Array} */
        e = [];
      }
    },
    reset : function() {
      grecaptcha.reset(this.grecaptcha);
    }
  });
})(jQuery);
/**
 * @return {undefined}
 */
function ___ls_grecaptcha_onload() {
  jQuery.livestreet.lsReCaptcha.prototype.initNotReady();
  $(window).trigger("___ls_grecaptcha_onload");
}
window["___grecaptcha_cfg"] = window["___grecaptcha_cfg"] || [];
/** @type {string} */
window["___grecaptcha_cfg"]["onload"] = "___ls_grecaptcha_onload";
(function($) {
  $.widget("livestreet.lsFieldAutocomplete", {
    options : {
      max_selected_options : 3,
      width : "100%",
      urls : {
        load : null
      },
      response : {
        value : "value",
        text : "label"
      },
      params : {}
    },
    _create : function() {
      if (this.option("urls.load")) {
        this._initAjax();
      } else {
        this.element.chosen(this.options);
      }
    },
    _initAjax : function() {
      this.element.ajaxChosen({
        type : "POST",
        url : this.option("urls.load"),
        jsonTermKey : "value",
        data : $.extend({}, {
          security_ls_key : LIVESTREET_SECURITY_KEY
        }, this.option("params")),
        dataType : "json"
      }, function(item_obj) {
        /** @type {!Array} */
        var newNodeLists = [];
        $.each(item_obj.aItems, function(i, value) {
          newNodeLists.push($.isArray(value) ? {
            value : value,
            text : value
          } : {
            value : value[this.options.response.value],
            text : value[this.options.response.text]
          });
        }.bind(this));
        return newNodeLists;
      }.bind(this), this.options);
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsFieldGeo", $.livestreet.lsComponent, {
    options : {
      urls : {
        regions : null,
        cities : null
      },
      selectors : {
        country : ".js-field-geo-country",
        region : ".js-field-geo-region",
        city : ".js-field-geo-city"
      },
      params : {},
      i18n : {
        select_region : "@field.geo.select_region",
        select_city : "@field.geo.select_city"
      }
    },
    _create : function() {
      this._super();
      this.type = this.element.data("type");
      this.option("params.type", this.type);
      this.elements.country.on("change" + this.eventNamespace, this._loadRegions.bind(this));
      this.elements.region.on("change" + this.eventNamespace, this._loadCities.bind(this));
    },
    _loadRegions : function() {
      this.elements.city.empty().hide();
      if (!this.elements.country.val()) {
        this.elements.region.empty().hide().change();
        return;
      }
      this._load("regions", {
        country : this.elements.country.val(),
        target_type : this.type
      }, function(matrix) {
        this.append(this.elements.region, matrix.aRegions, this._i18n("select_region"));
      }.bind(this));
    },
    _loadCities : function() {
      if (!this.elements.region.val()) {
        this.elements.city.empty().hide().change();
        return;
      }
      this._load("cities", {
        region : this.elements.region.val(),
        target_type : this.type
      }, function(matrix) {
        this.append(this.elements.city, matrix.aCities, this._i18n("select_city"));
      }.bind(this));
    },
    append : function(element, array, kind) {
      element.empty().show().append('<option value="">' + kind + "</option>");
      $($.map(array, function(e, canCreateDiscussions) {
        return '<option value="' + e.id + '">' + e.name + "</option>";
      }).join("")).appendTo(element);
    },
    getCountry : function() {
      return this.elements.country.val();
    },
    getRegion : function() {
      return this.elements.region.val();
    },
    getCity : function() {
      return this.elements.city.val();
    },
    getElement : function(type) {
      return this.elements[type];
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsFieldImageAjax", $.livestreet.lsComponent, {
    options : {
      urls : {
        create : aRouter["ajax"] + "media/create-preview-file/",
        remove : aRouter["ajax"] + "media/remove-preview-file/",
        load : aRouter["ajax"] + "media/load-preview-items/"
      },
      selectors : {
        show_modal : ".js-field-image-ajax-show-modal",
        remove : ".js-field-image-ajax-remove",
        image : ".js-field-image-ajax-image",
        modal : ".js-field-image-ajax-modal",
        uploader : ".js-field-image-ajax-modal .js-uploader-modal",
        choose : ".js-field-image-ajax-modal .js-uploader-modal-choose"
      },
      classes : {
        loading : "ls-loading"
      },
      params : {}
    },
    _create : function() {
      var _this = this;
      this._super();
      this.elements.modal.lsModal({
        aftershow : function() {
          _this.elements.uploader.lsUploader("getElement", "list").lsUploaderFileList("load");
          _this._setParam("target_tmp", _this.elements.uploader.lsUploader("option", "params.target_tmp"));
        }
      });
      this.elements.uploader.lsUploader({
        autoload : false,
        params : $.extend({}, {
          security_ls_key : LIVESTREET_SECURITY_KEY
        }, this.options.params)
      });
      this.elements.show_modal.on("click" + this.eventNamespace, function() {
        _this.elements.modal.lsModal("show");
      });
      this.elements.remove.on("click" + this.eventNamespace, this.remove.bind(this));
      this.elements.choose.on("click" + this.eventNamespace, this.createPreview.bind(this));
    },
    createPreview : function() {
      var e = this.elements.uploader.lsUploader("getElement", "list").lsUploaderFileList("getSelectedFiles").eq(0).lsUploaderFile("getProperty", "id");
      if (!e) {
        return;
      }
      this.elements.image.show().addClass(this.option("classes.loading"));
      this.elements.modal.lsModal("hide");
      this._load("create", {
        "id" : e
      }, function(s) {
        this.load();
        this.elements.show_modal.hide();
        this.elements.remove.show();
        this.options.params["id"] = e;
      });
    },
    remove : function() {
      this._load("remove", function(canCreateDiscussions) {
        this.elements.image.empty().hide();
        this.elements.remove.hide();
        this.elements.show_modal.show();
      });
    },
    load : function() {
      this._load("load", function(tmp) {
        this.elements.image.removeClass(this.option("classes.loading")).show().html($.trim(tmp.sTemplatePreview));
      });
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsUploaderFileList", $.livestreet.lsComponent, {
    options : {
      multiselect : true,
      multiselect_ctrl : true,
      max_height : 113 * 3 + 15,
      urls : {
        load : null,
        remove : null
      },
      selectors : {
        file : ".js-uploader-file"
      },
      classes : {
        loading : "ls-loading"
      },
      html : {
        file : '<li class="ls-uploader-file js-uploader-file"><div class="progress"><div class="progress-value js-uploader-file-progress-value"></div><span class="progress-info js-uploader-file-progress-label">0%</span></div></li>'
      },
      params : {}
    },
    _create : function() {
      this._super();
    },
    load : function() {
      this._trigger("beforeload", null, this);
      this.unselectAll();
      this.empty();
      this._addClass("loading");
      this._load("load", "onLoad");
    },
    empty : function() {
      this.getFiles().lsUploaderFile("destroy").remove();
      this.element.empty();
    },
    isEmpty : function() {
      return !this.getFiles().length;
    },
    onLoad : function(response) {
      this._removeClass("loading");
      this.element.html($.trim(response.html));
      this.initFiles(this.getFiles());
      this._trigger("afterload", null, {
        context : this,
        response : response
      });
    },
    addFile : function(data) {
      data.context = $(this.option("html.file"));
      this.initFiles(data.context).lsUploaderFile("uploading");
      this.element.prepend(data.context);
      this._trigger("afterfileadd", null, {
        context : this,
        data : data
      });
    },
    initFiles : function(iceServers) {
      return iceServers.lsUploaderFile({
        urls : {
          remove : this.option("urls.remove")
        },
        beforeactivate : this._onFileBeforeActivate.bind(this),
        afteractivate : this._onFileAfterActivate.bind(this),
        afterdeactivate : this._onFileAfterDeactivate.bind(this),
        afterunselect : this._onFileAfterUnselect.bind(this),
        afterremove : this._onFileAfterRemove.bind(this),
        beforeclick : this._onFileBeforeClick.bind(this)
      });
    },
    reinitFiles : function() {
      this.initFiles(this.getFiles().not(":data( 'livestreet-lsUploaderFile' )"));
    },
    getActiveFile : function() {
      return this.getFiles().filter("." + ls.options.classes.states.active);
    },
    getSelectedFiles : function() {
      return this.getFiles().filter(function() {
        return $(this).lsUploaderFile("getState", "selected");
      });
    },
    getFileById : function(id) {
      return this.getFiles().filter(function() {
        return $(this).lsUploaderFile("getProperty", "id") === id;
      });
    },
    getFiles : function() {
      return this.element.find(this.option("selectors.file"));
    },
    unselectAll : function() {
      this.getFiles().lsUploaderFile("unselect");
    },
    filterFilesByType : function(listeners) {
      this.unselectAll();
      this.getFiles().each(function() {
        var i = $(this);
        if (!~listeners.indexOf(i.lsUploaderFile("getProperty", "type"))) {
          i.hide();
        }
      });
    },
    resetFilter : function() {
      this.getFiles().show();
    },
    _activateNextFile : function() {
      this.getSelectedFiles().last().lsUploaderFile("activate");
    },
    _onFileBeforeClick : function(event, tempalte) {
      var data = this.option("multiselect");
      var len = this.option("multiselect_ctrl");
      if (!data || data && len && !(event.ctrlKey || event.metaKey)) {
        this.unselectAll();
      }
    },
    _onFileBeforeActivate : function(formatters, customFormatters) {
      this.getActiveFile().lsUploaderFile("deactivate");
    },
    _onFileAfterActivate : function(e, data) {
      this._trigger("filebeforeactivate", e, data);
      this._trigger("fileactivate", e, data);
    },
    _onFileAfterDeactivate : function(e, data) {
      this._trigger("filebeforedeactivate", e, data);
      this._trigger("filedeactivate", e, data);
    },
    _onFileAfterUnselect : function(formatters, customFormatters) {
      this._activateNextFile();
    },
    _onFileAfterRemove : function(e, data) {
      this._trigger("filebeforeremove", e, data);
      data.element.lsUploaderFile("destroy");
      data.element.remove();
      this._trigger("fileafterremove", e, data);
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsUploaderFile", $.livestreet.lsComponent, {
    options : {
      urls : {
        remove : aRouter["ajax"] + "media/remove-file/"
      },
      selectors : {
        progress_value : ".js-uploader-file-progress-value",
        progress_label : ".js-uploader-file-progress-label"
      },
      classes : {
        active : "active",
        error : "is-error",
        uploading : "is-uploading",
        selected : "is-selected"
      },
      params : {}
    },
    _create : function() {
      this._super();
      this._info = this.getInfo();
      this._states = {
        active : false,
        selected : false,
        uploading : false,
        error : false
      };
      this._on({
        click : "onClick"
      });
    },
    onClick : function(e) {
      this._trigger("beforeclick", e, this);
      this.toggleActive();
      this._trigger("afterclick", e, this);
    },
    toggleActive : function() {
      this[this.getState("active") ? "unselect" : "activate"]();
    },
    getInfo : function() {
      var result = {};
      $.each(this.element[0].attributes, function(canCreateDiscussions, prop) {
        if (~prop.name.indexOf("data-media")) {
          result[prop.name.slice(11)] = prop.value;
        }
      });
      return result;
    },
    setProperty : function(key, value) {
      this._info[key] = value;
    },
    getProperty : function(key) {
      return this._info[key];
    },
    remove : function() {
      this.unselect();
      this._load("remove", {
        id : this._info.id
      }, "removeDom");
    },
    removeDom : function() {
      this.element.fadeOut(500, this.onRemoveDom.bind(this));
    },
    onRemoveDom : function() {
      this._trigger("afterremove", null, this);
    },
    activate : function() {
      if (this.getState("active") || this.getState("error") || this.getState("uploading")) {
        return;
      }
      this._trigger("beforeactivate", null, this);
      this.select();
      this.setState("active", true);
      this._addClass("active");
      this._trigger("afteractivate", null, this);
    },
    deactivate : function() {
      if (!this.getState("active")) {
        return;
      }
      this._trigger("beforedeactivate", null, this);
      this.setState("active", false);
      this.element.removeClass(this.option("classes.active"));
      this._trigger("afterdeactivate", null, this);
    },
    select : function() {
      if (this.getState("selected")) {
        return;
      }
      this._trigger("beforeselect", null, this);
      this.setState("selected", true);
      this._addClass("selected");
      this._trigger("afterselect", null, this);
    },
    unselect : function() {
      if (!this.getState("selected")) {
        return;
      }
      this._trigger("beforeunselect", null, this);
      this.setState("selected", false);
      this.element.removeClass(this.option("classes.selected"));
      if (this.getState("active")) {
        this.deactivate();
      }
      this._trigger("afterunselect", null, this);
    },
    error : function() {
      this.setState("error", true);
      this._addClass("error");
      this.getElement("progress_value").height(0);
      this.getElement("progress_label").text("ERROR");
    },
    uploading : function() {
      this.setState("uploading", true);
      this._addClass("uploading");
    },
    uploaded : function() {
      this.setState("uploading", false);
      this.element.removeClass(this.option("classes.uploading"));
    },
    setProgress : function(value) {
      this.getElement("progress_value").height(value + "%");
      this.getElement("progress_label").text(value == 100 ? "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430.." : value + "%");
    },
    getState : function(name) {
      return this._states[name];
    },
    setState : function(name, data) {
      /** @type {!Object} */
      this._states[name] = data;
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsUploader", $.livestreet.lsComponent, {
    options : {
      urls : {
        upload : aRouter["ajax"] + "media/upload/",
        load : aRouter["ajax"] + "media/load-gallery/",
        remove : aRouter["ajax"] + "media/remove-file/",
        update_property : aRouter["ajax"] + "media/save-data-file/",
        generate_target_tmp : aRouter["ajax"] + "media/generate-target-tmp/"
      },
      selectors : {
        list : ".js-uploader-list",
        info : ".js-uploader-info",
        aside : ".js-uploader-aside",
        blocks : ".js-uploader-blocks",
        empty : ".js-uploader-aside-empty",
        content : ".js-uploader-content",
        upload_zone : ".js-uploader-area",
        upload_input : ".js-uploader-file",
        filter : ".js-uploader-filter",
        filter_item : ".js-uploader-filter-item",
        list_blankslate : ".js-uploader-list-blankslate",
        list_pagination : ".js-uploader-list-pagination"
      },
      classes : {
        empty : "is-empty"
      },
      fileupload : {
        url : null,
        sequentialUploads : false,
        singleFileUploads : true,
        limitConcurrentUploads : 3
      },
      params : {},
      autoload : true,
      info_options : {},
      list_options : {}
    },
    _create : function() {
      this._super();
      this.option("target_type", this.option("params.target_type"));
      if (!this.option("params.target_id")) {
        this.option("params.target_tmp", this.element.data("tmp") || $.cookie("media_target_tmp_" + this.option("params.target_type")));
        if (!this.option("params.target_tmp")) {
          this.generateTargetTmp();
        }
      }
      this.elements.info.lsUploaderInfo($.extend({}, this.option("info_options"), {
        urls : {
          update_property : this.option("urls.update_property")
        },
        uploader : this.element
      }));
      this.elements.list.lsUploaderFileList($.extend({}, this.option("list_options"), {
        urls : {
          load : this.option("urls.load"),
          remove : this.option("urls.remove")
        },
        params : this.option("params"),
        beforeload : this._onFileListBeforeLoad.bind(this),
        afterload : this._onFileListLoaded.bind(this),
        filebeforeactivate : this._onFileBeforeActivate.bind(this),
        fileactivate : this._onFileActivate.bind(this),
        filedeactivate : this._onFileDeactivate.bind(this),
        filebeforedeactivate : this._onFileBeforeDeactivate.bind(this),
        fileafterremove : this._onFileAfterRemove.bind(this)
      }));
      this.elements.list_pagination.lsPaginationAjax({
        pagechanged : this._onPageChanged.bind(this)
      });
      this._initFileUploader();
      /** @type {string} */
      this._activeFilter = "uploaded";
      this._on(this.elements.filter_item, {
        click : function(type) {
          this.setTargetTypeFilter($(type.target).data("filter"));
        }
      });
      if (this.option("autoload")) {
        this.elements.list.lsUploaderFileList("load");
      }
    },
    setTargetTypeFilter : function(multiBehavior) {
      var artistTrack = multiBehavior === "all" ? null : this.option("target_type");
      /** @type {boolean} */
      this._activeFilter = multiBehavior;
      this.elements.filter_item.removeClass("active");
      this.elements.filter_item.filter("[data-filter=" + multiBehavior + "]").addClass("active");
      this.elements.list.lsUploaderFileList("option", "params.target_type", artistTrack);
      this.elements.list.lsUploaderFileList("option", "params.page", 1);
      this.elements.list_pagination.hide();
      this.reload();
    },
    _initFileUploader : function() {
      $.extend(this.option("fileupload"), {
        url : this.option("urls.upload"),
        dropZone : this.elements.upload_zone
      });
      this.elements.upload_input.fileupload(this.option("fileupload"));
      this.element.on({
        fileuploadadd : this.onUploadAdd.bind(this),
        fileuploaddone : function(canCreateDiscussions, oldResult) {
          this[oldResult.result.bStateError ? "onUploadError" : "onUploadDone"](oldResult.context, oldResult.result);
        }.bind(this),
        fileuploadprogress : function(canCreateDiscussions, data) {
          this.onUploadProgress(data.context, parseInt(data.loaded / data.total * 100, 10));
        }.bind(this)
      });
    },
    _resizeFileList : function() {
      var width = this.getElement("aside").outerHeight();
      var minWidth = this.getElement("list").lsUploaderFileList("option", "max_height");
      if (!this.getElement("aside").hasClass("is-empty") && width > minWidth) {
        this.getElement("list").css("max-height", width);
      } else {
        this.getElement("list").css("max-height", minWidth);
      }
    },
    _onPageChanged : function(mmCoreLogEnabledDefault, mmCoreLogEnabledConfigName) {
      this.getElement("list").lsUploaderFileList("option", "params.page", mmCoreLogEnabledConfigName);
      this.reload();
    },
    _onFileAfterRemove : function(formatters, customFormatters) {
      this.checkEmpty();
    },
    _onFileBeforeDeactivate : function(formatters, customFormatters) {
      this.hideBlocks();
      this.getElement("info").lsUploaderInfo("empty");
    },
    _onFileBeforeActivate : function(e, data) {
      this.showBlocks();
      this.getElement("info").lsUploaderInfo("setFile", data.element);
      this._trigger("filebeforeactivate", e, data);
    },
    _onFileDeactivate : function(e, data) {
      this._resizeFileList();
      this._trigger("fileafteractivate", e, data);
    },
    _onFileActivate : function(e, data) {
      this._resizeFileList();
      this._trigger("fileafteractivate", e, data);
    },
    _onFileListBeforeLoad : function(formatters, customFormatters) {
      this.elements.list_blankslate.hide();
    },
    _onFileListLoaded : function(nfolder, resp) {
      if (resp.response.pagination) {
        this.elements.list_pagination.lsPaginationAjax("setTotalPages", resp.response.pagination.iCountPage).lsPaginationAjax("setCurrentPage", resp.response.pagination.iCurrentPage).show();
      } else {
        this.elements.list_pagination.hide();
      }
      this.checkEmpty();
      this._resizeFileList();
    },
    onUploadProgress : function(index, percent) {
      index.lsUploaderFile("setProgress", percent);
    },
    onUploadAdd : function(t, i) {
      $.each(this.option("params"), function(name, canCreateDiscussions) {
        if (canCreateDiscussions === null) {
          this.option("params." + name, "");
        }
      }.bind(this));
      $(t.target).fileupload("option", "formData", this.option("params"));
      this.elements.list.lsUploaderFileList("addFile", i);
      this.elements.list_blankslate.hide();
    },
    onUploadDone : function(p, n) {
      if (!this.elements.list.lsUploaderFileList("option", "multiselect")) {
        this.elements.list.lsUploaderFileList("unselectAll");
      }
      p.lsUploaderFile("destroy");
      p.replaceWith(this.elements.list.lsUploaderFileList("initFiles", $($.trim(n.sTemplateFile))).lsUploaderFile("uploaded"));
      /** @type {null} */
      p = null;
    },
    onUploadError : function(e, message) {
      ls.msg.error(message.sMsgTitle, message.sMsg);
      e.lsUploaderFile("error");
      setTimeout(function() {
        e.lsUploaderFile("removeDom");
        /** @type {null} */
        e = null;
      }.bind(this), 500);
    },
    generateTargetTmp : function() {
      var value = "ls.media.target_tmp_create_request_" + this.option("params.target_type");
      if (ls.registry.get(value)) {
        this.window.bind(value, function(canCreateDiscussions, description) {
          this.option("params.target_tmp", description || null);
        }.bind(this));
      } else {
        ls.registry.set(value, true);
        this._load("generate_target_tmp", {
          type : this.option("params.target_type")
        }, function(canCreateDiscussions) {
          this.window.trigger(value, [canCreateDiscussions.sTmpKey]);
          this.option("params.target_tmp", canCreateDiscussions.sTmpKey || null);
        }, {
          async : false
        });
      }
    },
    hideBlocks : function() {
      this._addClass(this.getElement("aside"), "empty");
    },
    showBlocks : function() {
      this._removeClass(this.getElement("aside"), "empty");
    },
    checkEmpty : function() {
      this.elements.list_blankslate[this.getElement("list").lsUploaderFileList("isEmpty") ? "show" : "hide"]();
    },
    getElement : function(type) {
      return this.elements[type];
    },
    reload : function() {
      this.getElement("list").lsUploaderFileList("load");
    },
    getActiveFile : function() {
      return this.getElement("list").lsUploaderFileList("getActiveFile");
    },
    getSelectedFiles : function() {
      return this.getElement("list").lsUploaderFileList("getSelectedFiles");
    },
    getFiles : function() {
      return this.getElement("list").lsUploaderFileList("getFiles");
    },
    unselectAll : function() {
      this.getElement("list").lsUploaderFileList("unselectAll");
    },
    filterFilesByType : function(e) {
      this.getElement("list").lsUploaderFileList("filterFilesByType", e);
    },
    resetFilter : function() {
      this.getElement("list").lsUploaderFileList("resetFilter");
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsUploaderInfo", $.livestreet.lsComponent, {
    options : {
      urls : {
        update_property : aRouter["ajax"] + "media/save-data-file/"
      },
      selectors : {
        group : ".js-uploader-info-group",
        property : ".js-uploader-info-property",
        remove : ".js-uploader-info-remove"
      }
    },
    _create : function() {
      this._super();
      var self = this;
      this.elements = {
        groups : this.element.find(this.option("selectors.group")),
        info : this.element.find(this.option("selectors.info")),
        properties : {
          image : this.element.find(this.option("selectors.property") + "[data-name=image]"),
          name : this.element.find(this.option("selectors.property") + "[data-name=name]"),
          filesize : this.element.find(this.option("selectors.property") + "[data-name=size]"),
          date : this.element.find(this.option("selectors.property") + "[data-name=date]")
        }
      };
      this.file = $();
      this.element.on("click" + this.eventNamespace, this.option("selectors.remove"), function(event) {
        this.file.lsUploaderFile("remove");
        event.preventDefault();
      }.bind(this));
      this.element.on("blur" + this.eventNamespace, ".js-uploader-info-property[type=text]", function() {
        var i = $(this);
        self._updateProperty(i.attr("name"), i.val());
      });
    },
    setFile : function(file) {
      /** @type {string} */
      this.file = file;
      var $item = this._getGroupByType(this.file.lsUploaderFile("getProperty", "type"));
      this._setProperty(this.elements.properties.image, this.file.lsUploaderFile("getProperty", "preview"));
      this._setProperty(this.elements.properties.name, this.file.lsUploaderFile("getProperty", "file-name"));
      this._setProperty(this.elements.properties.filesize, Math.floor(this.file.lsUploaderFile("getProperty", "file-size") / 1024) + " KB");
      this._setProperty(this.elements.properties.date, this.file.lsUploaderFile("getProperty", "date-add"));
      this._activateGroup($item);
      this._getPropertiesByGroup($item).each(function(canCreateDiscussions, elem) {
        elem = $(elem);
        this._setProperty(elem, this.getFile().lsUploaderFile("getProperty", elem.data("name")));
      }.bind(this));
    },
    getFile : function() {
      return this.file;
    },
    empty : function() {
      this.file = $();
    },
    update : function() {
      this.setFile(this.file);
    },
    _setProperty : function(elem, value) {
      switch(elem.prop("tagName").toLowerCase()) {
        case "img":
          elem.attr("src", value);
          break;
        case "input":
        case "textarea":
          elem.val(value);
          break;
        default:
          elem.text(value);
      }
    },
    _updateProperty : function(property, value) {
      var properties = this.getFile();
      this._load("update_property", {
        name : property,
        value : value,
        id : properties.lsUploaderFile("getProperty", "id")
      }, function(canCreateDiscussions) {
        properties.lsUploaderFile("setProperty", property, value);
      });
    },
    _activateGroup : function($elements) {
      this.elements.groups.hide();
      $elements.show();
    },
    _getGroupByType : function(canCreateDiscussions) {
      return this.elements.groups.filter("[data-type=" + canCreateDiscussions + "]");
    },
    _getPropertiesByGroup : function($itemFrame) {
      return $itemFrame.find(this.option("selectors.property"));
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsUploaderAttach", $.livestreet.lsComponent, {
    options : {
      urls : {
        upload : null,
        load : null,
        remove : null,
        update_property : null,
        count : null,
        generate_target_tmp : null
      },
      selectors : {
        modal : ".js-uploader-attach-modal",
        button : ".js-uploader-attach-button",
        counter : ".js-uploader-attach-file-counter",
        uploader : ".js-uploader-modal"
      },
      i18n : {
        empty : "@uploader.attach.empty",
        count : "@uploader.attach.count"
      }
    },
    _create : function() {
      this._super();
      this.elements.button.on("click", this.showUploader.bind(this));
      this.elements.modal.lsModal({
        aftershow : this.onUploaderShow.bind(this),
        afterhide : this.onUploaderHide.bind(this)
      });
      this.elements.uploader.lsUploader({
        autoload : false,
        urls : this.option("urls"),
        params : this.option("params")
      });
    },
    showUploader : function() {
      this.elements.modal.lsModal("show");
    },
    onUploaderShow : function() {
      this.elements.uploader.lsUploader("getElement", "list").lsUploaderFileList("load");
      this._setParam("target_tmp", this.elements.uploader.lsUploader("option", "params.target_tmp"));
    },
    onUploaderHide : function() {
      this.updateCounter();
      this._trigger("afterhide", null, this);
    },
    updateCounter : function() {
      this.elements.counter.text("...");
      this._load("count", function(asyncsRunning) {
        this.setCounter(asyncsRunning.count);
      }.bind(this));
    },
    setCounter : function(value) {
      if (value <= 0) {
        this.elements.counter.text(this._i18n("empty"));
      } else {
        this.elements.counter.text(this._i18n("count", value));
      }
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsPagination", $.livestreet.lsComponent, {
    options : {
      keys : {
        next : "ctrl+right",
        prev : "ctrl+left"
      },
      hash : {
        next : "",
        prev : ""
      },
      i18n : {
        last : "@pagination.notices.last",
        first : "@pagination.notices.first"
      }
    },
    _create : function() {
      this.document.bind("keydown" + this.eventNamespace, this.options.keys.next, this.next.bind(this, false));
      this.document.bind("keydown" + this.eventNamespace, this.options.keys.prev, this.prev.bind(this, false));
    },
    _go : function(type) {
      return function(url) {
        var s = this.element.data("pagination-" + type);
        if (s) {
          window.location = s + (this.options.hash[type] && url ? "#" + this.options.hash[type] : "");
        } else {
          ls.msg.error(null, this._i18n(type == "next" ? "last" : "first"));
        }
      };
    },
    next : function(type) {
      return this._go("next").apply(this, arguments);
    },
    prev : function(type) {
      return this._go("prev").apply(this, arguments);
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsPaginationAjax", $.livestreet.lsComponent, {
    options : {
      selectors : {
        page : ".js-pagination-item"
      },
      classes : {
        active : "active"
      },
      html : {
        page : function(callback) {
          return '<div class="ls-pagination-item js-pagination-item" data-page="' + callback + '"><span class="ls-pagination-item-link ls-pagination-item-inner">' + callback + "</span></div>";
        },
        separator : function() {
          return '<div class="ls-pagination-item"><span class="ls-pagination-item-inner">...</span></div>';
        }
      },
      padding : 1,
      total_pages : 10,
      hide_one_page : false
    },
    _create : function() {
      this._super();
      /** @type {number} */
      this.MIN_PAGE = 1;
      /** @type {number} */
      this._currentPage = 0;
      /** @type {number} */
      this._totalPages = 0;
      this.setTotalPages(this.option("total_pages"));
      this.setCurrentPage(this.MIN_PAGE);
      this.element.on("click", this.option("selectors.page"), this._onClick.bind(this));
    },
    _onClick : function(event) {
      this.go(+$(event.currentTarget).data("page"));
    },
    _build : function() {
      var r = this.element.is(":visible");
      var start = this.getCurrentPage();
      var totalPages = this.getTotalPages();
      var step = this.option("padding");
      /** @type {string} */
      var value = "";
      var NUM_WIDTH_PTS = this.MIN_PAGE;
      var page = totalPages;
      if (totalPages === 1 && this.option("hide_one_page")) {
        this.element.empty().hide();
        return;
      }
      if (totalPages > step * 2 + 1) {
        /** @type {number} */
        NUM_WIDTH_PTS = start - step < 4 ? 1 : start - step;
        page = start + step > totalPages - 3 ? totalPages : start + step;
      }
      if (NUM_WIDTH_PTS > 2) {
        /** @type {string} */
        value = value + (this.option("html.page")(1) + this.option("html.separator")());
      }
      var width = NUM_WIDTH_PTS;
      for (; width <= page; width++) {
        value = value + this.option("html.page")(width);
      }
      if (page < totalPages - 1) {
        value = value + (this.option("html.separator")() + this.option("html.page")(totalPages));
      }
      this.element.html(value);
      if (r) {
        this.element.show();
      }
    },
    getCurrentPage : function() {
      return this._currentPage;
    },
    setCurrentPage : function(index) {
      if (index < 1 || index > this.getTotalPages()) {
        return;
      }
      /** @type {number} */
      this._currentPage = index;
      this._build();
      this.element.find(this.option("selectors.page")).removeClass(this.option("classes.active")).filter("[data-page=" + index + "]").addClass(this.option("classes.active"));
      this._trigger("pageset", null, index);
    },
    getTotalPages : function() {
      return this._totalPages;
    },
    setTotalPages : function(limit) {
      if (limit < this.MIN_PAGE) {
        throw new RangeError("Parameter totalPages must be greater than " + this.MIN_PAGE);
      }
      /** @type {number} */
      this._totalPages = limit;
    },
    go : function(value) {
      this.setCurrentPage(value);
      this._trigger("pagechanged", null, value);
    },
    next : function() {
      if (this.getCurrentPage() === this.getTotalPages()) {
        return;
      }
      this.go(this.getCurrentPage() + 1);
    },
    prev : function() {
      if (this.getCurrentPage() === this.MIN_PAGE) {
        return;
      }
      this.go(this.getCurrentPage() - 1);
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsMore", $.livestreet.lsComponent, {
    options : {
      urls : {
        load : null
      },
      selectors : {
        text : ".js-more-text"
      },
      classes : {
        loading : "ls-more--loading",
        locked : "ls-more--locked"
      },
      target : null,
      append : true,
      params : {},
      proxy : ["next_page"],
      i18n : {
        text : "@more.text",
        text_count : "@more.text_count",
        empty : "@more.empty"
      }
    },
    _create : function() {
      this._super();
      this.target = $(this.options.target);
      this._on({
        click : "onClick"
      });
      this.element.bind("keydown" + this.eventNamespace, "return", this.onClick.bind(this));
    },
    onClick : function(event) {
      if (!this.isLocked()) {
        this.load();
      }
      event.preventDefault();
    },
    lock : function() {
      /** @type {boolean} */
      this._isLocked = true;
      this._addClass("loading locked");
    },
    unlock : function() {
      /** @type {boolean} */
      this._isLocked = false;
      this._removeClass("loading locked");
    },
    isLocked : function() {
      return this._isLocked;
    },
    getCount : function() {
      return parseInt(this.element.data("lsmore-count"), 10);
    },
    setCount : function(value) {
      this.element.data("lsmore-count", value);
      this.elements.text.text(this._i18n("text_count", value));
    },
    load : function() {
      this._trigger("beforeload", null, this);
      this.lock();
      this._load("load", function(e) {
        if (e.count_loaded > 0) {
          this.target[this.options.append ? "append" : "prepend"]($.trim(e.html));
          /** @type {number} */
          var last_keyCode = this.getCount() - e.count_loaded;
          if ("undefined" !== typeof e.count_left) {
            last_keyCode = e.count_left;
          }
          if (last_keyCode <= 0) {
            /** @type {boolean} */
            e.hide = true;
          } else {
            this.setCount(last_keyCode || 0);
          }
          $.each(this.options.proxy, function(canCreateDiscussions, i) {
            if (e[i]) {
              this._setParam(i, e[i]);
            }
          }.bind(this));
        } else {
          ls.msg.notice(null, this._i18n("empty"));
          /** @type {boolean} */
          e.hide = true;
        }
        if (e.hide) {
          this.element.hide();
        } else {
          this.element.show();
        }
        this.unlock();
        this._trigger("afterload", null, {
          context : this,
          response : e
        });
      });
    }
  });
})(jQuery);
(function(factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else {
    if (typeof exports === "object") {
      factory(require("jquery"));
    } else {
      factory(jQuery);
    }
  }
})(function($) {
  /**
   * @param {number} n
   * @return {?}
   */
  function isNumber(n) {
    return typeof n === "number" && !isNaN(n);
  }
  /**
   * @param {number} obj
   * @return {?}
   */
  function isUndefined(obj) {
    return typeof obj === "undefined";
  }
  /**
   * @param {?} array
   * @param {number} n
   * @return {?}
   */
  function toArray(array, n) {
    /** @type {!Array} */
    var s = [];
    if (isNumber(n)) {
      s.push(n);
    }
    return s.slice.apply(array, s);
  }
  /**
   * @param {!Function} t
   * @param {?} fn
   * @return {?}
   */
  function proxy(t, fn) {
    var args = toArray(arguments, 2);
    return function() {
      return t.apply(fn, args.concat(toArray(arguments)));
    };
  }
  /**
   * @param {string} url
   * @return {?}
   */
  function isCrossOriginURL(url) {
    var parts = url.match(/^(https?:)\/\/([^:\/\?#]+):?(\d*)/i);
    return parts && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);
  }
  /**
   * @param {string} url
   * @return {?}
   */
  function addTimestamp(url) {
    /** @type {string} */
    var razSpSession = "timestamp=" + (new Date).getTime();
    return url + (url.indexOf("?") === -1 ? "?" : "&") + razSpSession;
  }
  /**
   * @param {string} crossOrigin
   * @return {?}
   */
  function getCrossOrigin(crossOrigin) {
    return crossOrigin ? ' crossOrigin="' + crossOrigin + '"' : "";
  }
  /**
   * @param {!Object} image
   * @param {?} callback
   * @return {?}
   */
  function getImageSize(image, callback) {
    var newImage;
    if (image.naturalWidth && !IS_SAFARI_OR_UIWEBVIEW) {
      return callback(image.naturalWidth, image.naturalHeight);
    }
    /** @type {!Element} */
    newImage = document.createElement("img");
    /**
     * @return {undefined}
     */
    newImage.onload = function() {
      callback(this.width, this.height);
    };
    newImage.src = image.src;
  }
  /**
   * @param {!Object} data
   * @return {?}
   */
  function getTransform(data) {
    /** @type {!Array} */
    var messages = [];
    var rotate = data.rotate;
    var scaleX = data.scaleX;
    var scaleY = data.scaleY;
    if (isNumber(rotate)) {
      messages.push("rotate(" + rotate + "deg)");
    }
    if (isNumber(scaleX) && isNumber(scaleY)) {
      messages.push("scale(" + scaleX + "," + scaleY + ")");
    }
    return messages.length ? messages.join(" ") : "none";
  }
  /**
   * @param {?} data
   * @param {boolean} isReversed
   * @return {?}
   */
  function getRotatedSizes(data, isReversed) {
    /** @type {number} */
    var deg = abs(data.degree) % 180;
    /** @type {number} */
    var acuteAngleArc = (deg > 90 ? 180 - deg : deg) * Math.PI / 180;
    /** @type {number} */
    var normWoH = sin(acuteAngleArc);
    /** @type {number} */
    var spacing = cos(acuteAngleArc);
    var j = data.width;
    var i = data.height;
    var aspectRatio = data.aspectRatio;
    var scaledWidth;
    var scaledHeight;
    if (!isReversed) {
      /** @type {number} */
      scaledWidth = j * spacing + i * normWoH;
      /** @type {number} */
      scaledHeight = j * normWoH + i * spacing;
    } else {
      /** @type {number} */
      scaledWidth = j / (spacing + normWoH / aspectRatio);
      /** @type {number} */
      scaledHeight = scaledWidth / aspectRatio;
    }
    return {
      width : scaledWidth,
      height : scaledHeight
    };
  }
  /**
   * @param {?} image
   * @param {!Object} data
   * @return {?}
   */
  function getSourceCanvas(image, data) {
    var canvas = $("<canvas>")[0];
    var context = canvas.getContext("2d");
    /** @type {number} */
    var dstX = 0;
    /** @type {number} */
    var dstY = 0;
    var dstWidth = data.naturalWidth;
    var dstHeight = data.naturalHeight;
    var rotate = data.rotate;
    var scaleX = data.scaleX;
    var scaleY = data.scaleY;
    var u = isNumber(scaleX) && isNumber(scaleY) && (scaleX !== 1 || scaleY !== 1);
    var strMimeType = isNumber(rotate) && rotate !== 0;
    var m = strMimeType || u;
    /** @type {number} */
    var canvasWidth = dstWidth * abs(scaleX || 1);
    /** @type {number} */
    var canvasHeight = dstHeight * abs(scaleY || 1);
    var translateX;
    var translateY;
    var rotated;
    if (u) {
      /** @type {number} */
      translateX = canvasWidth / 2;
      /** @type {number} */
      translateY = canvasHeight / 2;
    }
    if (strMimeType) {
      rotated = getRotatedSizes({
        width : canvasWidth,
        height : canvasHeight,
        degree : rotate
      });
      canvasWidth = rotated.width;
      canvasHeight = rotated.height;
      /** @type {number} */
      translateX = canvasWidth / 2;
      /** @type {number} */
      translateY = canvasHeight / 2;
    }
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
    if (m) {
      /** @type {number} */
      dstX = -dstWidth / 2;
      /** @type {number} */
      dstY = -dstHeight / 2;
      context.save();
      context.translate(translateX, translateY);
    }
    if (strMimeType) {
      context.rotate(rotate * Math.PI / 180);
    }
    if (u) {
      context.scale(scaleX, scaleY);
    }
    context.drawImage(image, floor(dstX), floor(dstY), floor(dstWidth), floor(dstHeight));
    if (m) {
      context.restore();
    }
    return canvas;
  }
  /**
   * @param {!Object} t
   * @return {?}
   */
  function getTouchesCenter(t) {
    var l = t.length;
    /** @type {number} */
    var x = 0;
    /** @type {number} */
    var y = 0;
    if (l) {
      $.each(t, function(i, event) {
        x = x + event.pageX;
        y = y + event.pageY;
      });
      /** @type {number} */
      x = x / l;
      /** @type {number} */
      y = y / l;
    }
    return {
      pageX : x,
      pageY : y
    };
  }
  /**
   * @param {!DataView} dataView
   * @param {number} start
   * @param {number} length
   * @return {?}
   */
  function getStringFromCharCode(dataView, start, length) {
    /** @type {string} */
    var str = "";
    var i;
    /** @type {number} */
    i = start;
    length = length + start;
    for (; i < length; i++) {
      /** @type {string} */
      str = str + fromCharCode(dataView.getUint8(i));
    }
    return str;
  }
  /**
   * @param {?} arrayBuffer
   * @return {?}
   */
  function getOrientation(arrayBuffer) {
    var dataView = new DataView(arrayBuffer);
    var length = dataView.byteLength;
    var orientation;
    var exifIDCode;
    var tiffOffset;
    var firstIFDOffset;
    var littleEndian;
    var endianness;
    var app1Start;
    var ifdStart;
    var offset;
    var i;
    if (dataView.getUint8(0) === 255 && dataView.getUint8(1) === 216) {
      /** @type {number} */
      offset = 2;
      for (; offset < length;) {
        if (dataView.getUint8(offset) === 255 && dataView.getUint8(offset + 1) === 225) {
          /** @type {number} */
          app1Start = offset;
          break;
        }
        offset++;
      }
    }
    if (app1Start) {
      /** @type {number} */
      exifIDCode = app1Start + 4;
      /** @type {number} */
      tiffOffset = app1Start + 10;
      if (getStringFromCharCode(dataView, exifIDCode, 4) === "Exif") {
        endianness = dataView.getUint16(tiffOffset);
        /** @type {boolean} */
        littleEndian = endianness === 18761;
        if (littleEndian || endianness === 19789) {
          if (dataView.getUint16(tiffOffset + 2, littleEndian) === 42) {
            firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);
            if (firstIFDOffset >= 8) {
              ifdStart = tiffOffset + firstIFDOffset;
            }
          }
        }
      }
    }
    if (ifdStart) {
      length = dataView.getUint16(ifdStart, littleEndian);
      /** @type {number} */
      i = 0;
      for (; i < length; i++) {
        offset = ifdStart + i * 12 + 2;
        if (dataView.getUint16(offset, littleEndian) === 274) {
          offset = offset + 8;
          orientation = dataView.getUint16(offset, littleEndian);
          if (IS_SAFARI_OR_UIWEBVIEW) {
            dataView.setUint16(offset, 1, littleEndian);
          }
          break;
        }
      }
    }
    return orientation;
  }
  /**
   * @param {!Object} dataURL
   * @return {?}
   */
  function dataURLToArrayBuffer(dataURL) {
    var base64 = dataURL.replace(dataUri, "");
    /** @type {string} */
    var binary = atob(base64);
    /** @type {number} */
    var length = binary.length;
    var arrayBuffer = new ArrayBuffer(length);
    var array = new Uint8Array(arrayBuffer);
    var i;
    /** @type {number} */
    i = 0;
    for (; i < length; i++) {
      /** @type {number} */
      array[i] = binary.charCodeAt(i);
    }
    return arrayBuffer;
  }
  /**
   * @param {?} arrayBuffer
   * @return {?}
   */
  function arrayBufferToDataURL(arrayBuffer) {
    var dataView = new Uint8Array(arrayBuffer);
    var length = dataView.length;
    /** @type {string} */
    var value = "";
    var i;
    /** @type {number} */
    i = 0;
    for (; i < length; i++) {
      /** @type {string} */
      value = value + fromCharCode(dataView[i]);
    }
    return "data:image/jpeg;base64," + btoa(value);
  }
  /**
   * @param {?} name
   * @param {!Function} options
   * @return {undefined}
   */
  function Cropper(name, options) {
    this.$element = $(name);
    this.options = $.extend({}, Cropper.DEFAULTS, $.isPlainObject(options) && options);
    /** @type {boolean} */
    this.isLoaded = false;
    /** @type {boolean} */
    this.isBuilt = false;
    /** @type {boolean} */
    this.isCompleted = false;
    /** @type {boolean} */
    this.isRotated = false;
    /** @type {boolean} */
    this.isCropped = false;
    /** @type {boolean} */
    this.isDisabled = false;
    /** @type {boolean} */
    this.isReplaced = false;
    /** @type {boolean} */
    this.isLimited = false;
    /** @type {boolean} */
    this.wheeling = false;
    /** @type {boolean} */
    this.isImg = false;
    /** @type {string} */
    this.originalUrl = "";
    /** @type {null} */
    this.canvas = null;
    /** @type {null} */
    this.cropBox = null;
    this.init();
  }
  var $window = $(window);
  var $document = $(document);
  /** @type {!Location} */
  var location = window.location;
  /** @type {(Navigator|null)} */
  var navigator = window.navigator;
  var ArrayBuffer = window.ArrayBuffer;
  var Uint8Array = window.Uint8Array;
  var DataView = window.DataView;
  var btoa = window.btoa;
  /** @type {string} */
  var key = "cropper";
  /** @type {string} */
  var CLASS_MODAL = "cropper-modal";
  /** @type {string} */
  var template = "cropper-hide";
  /** @type {string} */
  var CLASS_HIDDEN = "cropper-hidden";
  /** @type {string} */
  var CLASS_INVISIBLE = "cropper-invisible";
  /** @type {string} */
  var CLASS_MOVE = "cropper-move";
  /** @type {string} */
  var CLASS_CROP = "cropper-crop";
  /** @type {string} */
  var CLASS_DISABLED = "cropper-disabled";
  /** @type {string} */
  var CLASS_BG = "cropper-bg";
  /** @type {string} */
  var EVENT_WHEEL = "mousedown touchstart pointerdown MSPointerDown";
  /** @type {string} */
  var EVENT_MOUSE_MOVE = "mousemove touchmove pointermove MSPointerMove";
  /** @type {string} */
  var EVENT_MOUSE_UP = "mouseup touchend touchcancel pointerup pointercancel MSPointerUp MSPointerCancel";
  /** @type {string} */
  var EVENT_MOUSE_DOWN = "wheel mousewheel DOMMouseScroll";
  /** @type {string} */
  var EVENT_DBLCLICK = "dblclick";
  /** @type {string} */
  var EVENT_LOAD = "load." + key;
  /** @type {string} */
  var id = "error." + key;
  /** @type {string} */
  var str = "resize." + key;
  /** @type {string} */
  var event = "build." + key;
  /** @type {string} */
  var type = "built." + key;
  /** @type {string} */
  var EVENT_CROP_MOVE = "cropstart." + key;
  /** @type {string} */
  var EVENT_PICK = "cropmove." + key;
  /** @type {string} */
  var EVENT_CROP_END = "cropend." + key;
  /** @type {string} */
  var EVENT_ZOOM = "crop." + key;
  /** @type {string} */
  var EVENT_CROP_START = "zoom." + key;
  /** @type {!RegExp} */
  var reClick = /e|w|s|n|se|sw|ne|nw|all|crop|move|zoom/;
  /** @type {!RegExp} */
  var reIsFile = /^data:/;
  /** @type {!RegExp} */
  var dataUri = /^data:([^;]+);base64,/;
  /** @type {!RegExp} */
  var vg_load_protocolRE = /^data:image\/jpeg.*;base64,/;
  /** @type {string} */
  var name = "preview";
  /** @type {string} */
  var tp = "action";
  /** @type {string} */
  var ACTION_EAST = "e";
  /** @type {string} */
  var ACTION_WEST = "w";
  /** @type {string} */
  var ACTION_SOUTH = "s";
  /** @type {string} */
  var ACTION_NORTH = "n";
  /** @type {string} */
  var ACTION_SOUTH_EAST = "se";
  /** @type {string} */
  var ACTION_SOUTH_WEST = "sw";
  /** @type {string} */
  var ACTION_NORTH_EAST = "ne";
  /** @type {string} */
  var ACTION_NORTH_WEST = "nw";
  /** @type {string} */
  var value = "all";
  /** @type {string} */
  var ACTION_CROP = "crop";
  /** @type {string} */
  var ACTION_MOVE = "move";
  /** @type {string} */
  var ACTION_ZOOM = "zoom";
  /** @type {string} */
  var ACTION_NONE = "none";
  var SUPPORT_CANVAS = $.isFunction($("<canvas>")[0].getContext);
  /** @type {(boolean|null)} */
  var IS_SAFARI_OR_UIWEBVIEW = navigator && /safari/i.test(navigator.userAgent) && /apple computer/i.test(navigator.vendor);
  /** @type {function(new:Number, *=): number} */
  var num = Number;
  /** @type {function(...?): number} */
  var min = Math.min;
  /** @type {function(...?): number} */
  var max = Math.max;
  /** @type {function(?): number} */
  var abs = Math.abs;
  /** @type {function(?): number} */
  var sin = Math.sin;
  /** @type {function(?): number} */
  var cos = Math.cos;
  /** @type {function(?): number} */
  var sqrt = Math.sqrt;
  /** @type {function(?): number} */
  var round = Math.round;
  /** @type {function(?): number} */
  var floor = Math.floor;
  /** @type {function(...number): string} */
  var fromCharCode = String.fromCharCode;
  Cropper.prototype = {
    constructor : Cropper,
    init : function() {
      var $this = this.$element;
      var url;
      if ($this.is("img")) {
        /** @type {boolean} */
        this.isImg = true;
        this.originalUrl = url = $this.attr("src");
        if (!url) {
          return;
        }
        url = $this.prop("src");
      } else {
        if ($this.is("canvas") && SUPPORT_CANVAS) {
          url = $this[0].toDataURL();
        }
      }
      this.load(url);
    },
    trigger : function(type, name) {
      var result = $.Event(type, name);
      this.$element.trigger(result);
      return result;
    },
    load : function(url) {
      var options = this.options;
      var $this = this.$element;
      var read;
      var xhr;
      if (!url) {
        return;
      }
      $this.one(event, options.build);
      if (this.trigger(event).isDefaultPrevented()) {
        return;
      }
      /** @type {!Object} */
      this.url = url;
      this.image = {};
      if (!options.checkOrientation || !ArrayBuffer) {
        return this.clone();
      }
      read = $.proxy(this.read, this);
      if (reIsFile.test(url)) {
        return vg_load_protocolRE.test(url) ? read(dataURLToArrayBuffer(url)) : this.clone();
      }
      /** @type {!XMLHttpRequest} */
      xhr = new XMLHttpRequest;
      xhr.onerror = xhr.onabort = $.proxy(function() {
        this.clone();
      }, this);
      /**
       * @return {undefined}
       */
      xhr.onload = function() {
        read(this.response);
      };
      xhr.open("get", url);
      /** @type {string} */
      xhr.responseType = "arraybuffer";
      xhr.send();
    },
    read : function(arrayBuffer) {
      var options = this.options;
      var orientation = getOrientation(arrayBuffer);
      var image = this.image;
      var rotate;
      var scaleX;
      var scaleY;
      if (orientation > 1) {
        this.url = arrayBufferToDataURL(arrayBuffer);
        switch(orientation) {
          case 2:
            /** @type {number} */
            scaleX = -1;
            break;
          case 3:
            /** @type {number} */
            rotate = -180;
            break;
          case 4:
            /** @type {number} */
            scaleY = -1;
            break;
          case 5:
            /** @type {number} */
            rotate = 90;
            /** @type {number} */
            scaleY = -1;
            break;
          case 6:
            /** @type {number} */
            rotate = 90;
            break;
          case 7:
            /** @type {number} */
            rotate = 90;
            /** @type {number} */
            scaleX = -1;
            break;
          case 8:
            /** @type {number} */
            rotate = -90;
            break;
        }
      }
      if (options.rotatable) {
        /** @type {(number|undefined)} */
        image.rotate = rotate;
      }
      if (options.scalable) {
        /** @type {(number|undefined)} */
        image.scaleX = scaleX;
        /** @type {(number|undefined)} */
        image.scaleY = scaleY;
      }
      this.clone();
    },
    clone : function() {
      var options = this.options;
      var $this = this.$element;
      var url = this.url;
      /** @type {string} */
      var crossOrigin = "";
      var crossOriginUrl;
      var $clone;
      if (options.checkCrossOrigin && isCrossOriginURL(url)) {
        crossOrigin = $this.prop("crossOrigin");
        if (crossOrigin) {
          crossOriginUrl = url;
        } else {
          /** @type {string} */
          crossOrigin = "anonymous";
          crossOriginUrl = addTimestamp(url);
        }
      }
      this.crossOrigin = crossOrigin;
      this.crossOriginUrl = crossOriginUrl;
      this.$clone = $clone = $("<img" + getCrossOrigin(crossOrigin) + ' src="' + (crossOriginUrl || url) + '">');
      if (this.isImg) {
        if ($this[0].complete) {
          this.start();
        } else {
          $this.one(EVENT_LOAD, $.proxy(this.start, this));
        }
      } else {
        $clone.one(EVENT_LOAD, $.proxy(this.start, this)).one(id, $.proxy(this.stop, this)).addClass(template).insertAfter($this);
      }
    },
    start : function() {
      var $image = this.$element;
      var $clone = this.$clone;
      if (!this.isImg) {
        $clone.off(id, this.stop);
        $image = $clone;
      }
      getImageSize($image[0], $.proxy(function(naturalWidth, naturalHeight) {
        $.extend(this.image, {
          naturalWidth : naturalWidth,
          naturalHeight : naturalHeight,
          aspectRatio : naturalWidth / naturalHeight
        });
        /** @type {boolean} */
        this.isLoaded = true;
        this.build();
      }, this));
    },
    stop : function() {
      this.$clone.remove();
      /** @type {null} */
      this.$clone = null;
    },
    build : function() {
      var options = this.options;
      var $this = this.$element;
      var $clone = this.$clone;
      var $cropper;
      var $cropBox;
      var $face;
      if (!this.isLoaded) {
        return;
      }
      if (this.isBuilt) {
        this.unbuild();
      }
      this.$container = $this.parent();
      this.$cropper = $cropper = $(Cropper.TEMPLATE);
      this.$canvas = $cropper.find(".cropper-canvas").append($clone);
      this.$dragBox = $cropper.find(".cropper-drag-box");
      this.$cropBox = $cropBox = $cropper.find(".cropper-crop-box");
      this.$viewBox = $cropper.find(".cropper-view-box");
      this.$face = $face = $cropBox.find(".cropper-face");
      $this.addClass(CLASS_HIDDEN).after($cropper);
      if (!this.isImg) {
        $clone.removeClass(template);
      }
      this.initPreview();
      this.bind();
      /** @type {number} */
      options.aspectRatio = max(0, options.aspectRatio) || NaN;
      /** @type {number} */
      options.viewMode = max(0, min(3, round(options.viewMode))) || 0;
      if (options.autoCrop) {
        /** @type {boolean} */
        this.isCropped = true;
        if (options.modal) {
          this.$dragBox.addClass(CLASS_MODAL);
        }
      } else {
        $cropBox.addClass(CLASS_HIDDEN);
      }
      if (!options.guides) {
        $cropBox.find(".cropper-dashed").addClass(CLASS_HIDDEN);
      }
      if (!options.center) {
        $cropBox.find(".cropper-center").addClass(CLASS_HIDDEN);
      }
      if (options.cropBoxMovable) {
        $face.addClass(CLASS_MOVE).data(tp, value);
      }
      if (!options.highlight) {
        $face.addClass(CLASS_INVISIBLE);
      }
      if (options.background) {
        $cropper.addClass(CLASS_BG);
      }
      if (!options.cropBoxResizable) {
        $cropBox.find(".cropper-line, .cropper-point").addClass(CLASS_HIDDEN);
      }
      this.setDragMode(options.dragMode);
      this.render();
      /** @type {boolean} */
      this.isBuilt = true;
      this.setData(options.data);
      $this.one(type, options.built);
      setTimeout($.proxy(function() {
        this.trigger(type);
        /** @type {boolean} */
        this.isCompleted = true;
      }, this), 0);
    },
    unbuild : function() {
      if (!this.isBuilt) {
        return;
      }
      /** @type {boolean} */
      this.isBuilt = false;
      /** @type {boolean} */
      this.isCompleted = false;
      /** @type {null} */
      this.initialImage = null;
      /** @type {null} */
      this.initialCanvas = null;
      /** @type {null} */
      this.initialCropBox = null;
      /** @type {null} */
      this.container = null;
      /** @type {null} */
      this.canvas = null;
      /** @type {null} */
      this.cropBox = null;
      this.unbind();
      this.resetPreview();
      /** @type {null} */
      this.$preview = null;
      /** @type {null} */
      this.$viewBox = null;
      /** @type {null} */
      this.$cropBox = null;
      /** @type {null} */
      this.$dragBox = null;
      /** @type {null} */
      this.$canvas = null;
      /** @type {null} */
      this.$container = null;
      this.$cropper.remove();
      /** @type {null} */
      this.$cropper = null;
    },
    render : function() {
      this.initContainer();
      this.initCanvas();
      this.initCropBox();
      this.renderCanvas();
      if (this.isCropped) {
        this.renderCropBox();
      }
    },
    initContainer : function() {
      var options = this.options;
      var $this = this.$element;
      var $container = this.$container;
      var $cropper = this.$cropper;
      $cropper.addClass(CLASS_HIDDEN);
      $this.removeClass(CLASS_HIDDEN);
      $cropper.css(this.container = {
        width : max($container.width(), num(options.minContainerWidth) || 200),
        height : max($container.height(), num(options.minContainerHeight) || 100)
      });
      $this.addClass(CLASS_HIDDEN);
      $cropper.removeClass(CLASS_HIDDEN);
    },
    initCanvas : function() {
      var viewMode = this.options.viewMode;
      var container = this.container;
      var containerWidth = container.width;
      var containerHeight = container.height;
      var image = this.image;
      var imageNaturalWidth = image.naturalWidth;
      var imageNaturalHeight = image.naturalHeight;
      /** @type {boolean} */
      var is90Degree = abs(image.rotate) === 90;
      var naturalWidth = is90Degree ? imageNaturalHeight : imageNaturalWidth;
      var naturalHeight = is90Degree ? imageNaturalWidth : imageNaturalHeight;
      /** @type {number} */
      var aspectRatio = naturalWidth / naturalHeight;
      var canvasWidth = containerWidth;
      var canvasHeight = containerHeight;
      var canvas;
      if (containerHeight * aspectRatio > containerWidth) {
        if (viewMode === 3) {
          /** @type {number} */
          canvasWidth = containerHeight * aspectRatio;
        } else {
          /** @type {number} */
          canvasHeight = containerWidth / aspectRatio;
        }
      } else {
        if (viewMode === 3) {
          /** @type {number} */
          canvasHeight = containerWidth / aspectRatio;
        } else {
          /** @type {number} */
          canvasWidth = containerHeight * aspectRatio;
        }
      }
      canvas = {
        naturalWidth : naturalWidth,
        naturalHeight : naturalHeight,
        aspectRatio : aspectRatio,
        width : canvasWidth,
        height : canvasHeight
      };
      /** @type {number} */
      canvas.oldLeft = canvas.left = (containerWidth - canvasWidth) / 2;
      /** @type {number} */
      canvas.oldTop = canvas.top = (containerHeight - canvasHeight) / 2;
      this.canvas = canvas;
      /** @type {boolean} */
      this.isLimited = viewMode === 1 || viewMode === 2;
      this.limitCanvas(true, true);
      this.initialImage = $.extend({}, image);
      this.initialCanvas = $.extend({}, canvas);
    },
    limitCanvas : function(isSizeLimited, isPositionLimited) {
      var options = this.options;
      var viewMode = options.viewMode;
      var container = this.container;
      var containerWidth = container.width;
      var containerHeight = container.height;
      var canvas = this.canvas;
      var aspectRatio = canvas.aspectRatio;
      var cropBox = this.cropBox;
      var isCropped = this.isCropped && cropBox;
      var minCanvasWidth;
      var minCanvasHeight;
      var newCanvasLeft;
      var newCanvasTop;
      if (isSizeLimited) {
        /** @type {number} */
        minCanvasWidth = num(options.minCanvasWidth) || 0;
        /** @type {number} */
        minCanvasHeight = num(options.minCanvasHeight) || 0;
        if (viewMode) {
          if (viewMode > 1) {
            /** @type {number} */
            minCanvasWidth = max(minCanvasWidth, containerWidth);
            /** @type {number} */
            minCanvasHeight = max(minCanvasHeight, containerHeight);
            if (viewMode === 3) {
              if (minCanvasHeight * aspectRatio > minCanvasWidth) {
                /** @type {number} */
                minCanvasWidth = minCanvasHeight * aspectRatio;
              } else {
                /** @type {number} */
                minCanvasHeight = minCanvasWidth / aspectRatio;
              }
            }
          } else {
            if (minCanvasWidth) {
              /** @type {number} */
              minCanvasWidth = max(minCanvasWidth, isCropped ? cropBox.width : 0);
            } else {
              if (minCanvasHeight) {
                /** @type {number} */
                minCanvasHeight = max(minCanvasHeight, isCropped ? cropBox.height : 0);
              } else {
                if (isCropped) {
                  minCanvasWidth = cropBox.width;
                  minCanvasHeight = cropBox.height;
                  if (minCanvasHeight * aspectRatio > minCanvasWidth) {
                    /** @type {number} */
                    minCanvasWidth = minCanvasHeight * aspectRatio;
                  } else {
                    /** @type {number} */
                    minCanvasHeight = minCanvasWidth / aspectRatio;
                  }
                }
              }
            }
          }
        }
        if (minCanvasWidth && minCanvasHeight) {
          if (minCanvasHeight * aspectRatio > minCanvasWidth) {
            /** @type {number} */
            minCanvasHeight = minCanvasWidth / aspectRatio;
          } else {
            /** @type {number} */
            minCanvasWidth = minCanvasHeight * aspectRatio;
          }
        } else {
          if (minCanvasWidth) {
            /** @type {number} */
            minCanvasHeight = minCanvasWidth / aspectRatio;
          } else {
            if (minCanvasHeight) {
              /** @type {number} */
              minCanvasWidth = minCanvasHeight * aspectRatio;
            }
          }
        }
        canvas.minWidth = minCanvasWidth;
        canvas.minHeight = minCanvasHeight;
        /** @type {number} */
        canvas.maxWidth = Infinity;
        /** @type {number} */
        canvas.maxHeight = Infinity;
      }
      if (isPositionLimited) {
        if (viewMode) {
          /** @type {number} */
          newCanvasLeft = containerWidth - canvas.width;
          /** @type {number} */
          newCanvasTop = containerHeight - canvas.height;
          /** @type {number} */
          canvas.minLeft = min(0, newCanvasLeft);
          /** @type {number} */
          canvas.minTop = min(0, newCanvasTop);
          /** @type {number} */
          canvas.maxLeft = max(0, newCanvasLeft);
          /** @type {number} */
          canvas.maxTop = max(0, newCanvasTop);
          if (isCropped && this.isLimited) {
            /** @type {number} */
            canvas.minLeft = min(cropBox.left, cropBox.left + cropBox.width - canvas.width);
            /** @type {number} */
            canvas.minTop = min(cropBox.top, cropBox.top + cropBox.height - canvas.height);
            canvas.maxLeft = cropBox.left;
            canvas.maxTop = cropBox.top;
            if (viewMode === 2) {
              if (canvas.width >= containerWidth) {
                /** @type {number} */
                canvas.minLeft = min(0, newCanvasLeft);
                /** @type {number} */
                canvas.maxLeft = max(0, newCanvasLeft);
              }
              if (canvas.height >= containerHeight) {
                /** @type {number} */
                canvas.minTop = min(0, newCanvasTop);
                /** @type {number} */
                canvas.maxTop = max(0, newCanvasTop);
              }
            }
          }
        } else {
          /** @type {number} */
          canvas.minLeft = -canvas.width;
          /** @type {number} */
          canvas.minTop = -canvas.height;
          canvas.maxLeft = containerWidth;
          canvas.maxTop = containerHeight;
        }
      }
    },
    renderCanvas : function(data) {
      var canvas = this.canvas;
      var image = this.image;
      var rotate = image.rotate;
      var naturalWidth = image.naturalWidth;
      var naturalHeight = image.naturalHeight;
      var aspectRatio;
      var rotated;
      if (this.isRotated) {
        /** @type {boolean} */
        this.isRotated = false;
        rotated = getRotatedSizes({
          width : image.width,
          height : image.height,
          degree : rotate
        });
        /** @type {number} */
        aspectRatio = rotated.width / rotated.height;
        if (aspectRatio !== canvas.aspectRatio) {
          canvas.left -= (rotated.width - canvas.width) / 2;
          canvas.top -= (rotated.height - canvas.height) / 2;
          canvas.width = rotated.width;
          canvas.height = rotated.height;
          /** @type {number} */
          canvas.aspectRatio = aspectRatio;
          canvas.naturalWidth = naturalWidth;
          canvas.naturalHeight = naturalHeight;
          if (rotate % 180) {
            rotated = getRotatedSizes({
              width : naturalWidth,
              height : naturalHeight,
              degree : rotate
            });
            canvas.naturalWidth = rotated.width;
            canvas.naturalHeight = rotated.height;
          }
          this.limitCanvas(true, false);
        }
      }
      if (canvas.width > canvas.maxWidth || canvas.width < canvas.minWidth) {
        canvas.left = canvas.oldLeft;
      }
      if (canvas.height > canvas.maxHeight || canvas.height < canvas.minHeight) {
        canvas.top = canvas.oldTop;
      }
      /** @type {number} */
      canvas.width = min(max(canvas.width, canvas.minWidth), canvas.maxWidth);
      /** @type {number} */
      canvas.height = min(max(canvas.height, canvas.minHeight), canvas.maxHeight);
      this.limitCanvas(false, true);
      /** @type {number} */
      canvas.oldLeft = canvas.left = min(max(canvas.left, canvas.minLeft), canvas.maxLeft);
      /** @type {number} */
      canvas.oldTop = canvas.top = min(max(canvas.top, canvas.minTop), canvas.maxTop);
      this.$canvas.css({
        width : canvas.width,
        height : canvas.height,
        left : canvas.left,
        top : canvas.top
      });
      this.renderImage();
      if (this.isCropped && this.isLimited) {
        this.limitCropBox(true, true);
      }
      if (data) {
        this.output();
      }
    },
    renderImage : function(isChanged) {
      var canvas = this.canvas;
      var image = this.image;
      var reversed;
      if (image.rotate) {
        reversed = getRotatedSizes({
          width : canvas.width,
          height : canvas.height,
          degree : image.rotate,
          aspectRatio : image.aspectRatio
        }, true);
      }
      $.extend(image, reversed ? {
        width : reversed.width,
        height : reversed.height,
        left : (canvas.width - reversed.width) / 2,
        top : (canvas.height - reversed.height) / 2
      } : {
        width : canvas.width,
        height : canvas.height,
        left : 0,
        top : 0
      });
      this.$clone.css({
        width : image.width,
        height : image.height,
        marginLeft : image.left,
        marginTop : image.top,
        transform : getTransform(image)
      });
      if (isChanged) {
        this.output();
      }
    },
    initCropBox : function() {
      var options = this.options;
      var canvas = this.canvas;
      var aspectRatio = options.aspectRatio;
      /** @type {number} */
      var autoCropArea = num(options.autoCropArea) || 0.8;
      var cropBox = {
        width : canvas.width,
        height : canvas.height
      };
      if (aspectRatio) {
        if (canvas.height * aspectRatio > canvas.width) {
          /** @type {number} */
          cropBox.height = cropBox.width / aspectRatio;
        } else {
          /** @type {number} */
          cropBox.width = cropBox.height * aspectRatio;
        }
      }
      this.cropBox = cropBox;
      this.limitCropBox(true, true);
      /** @type {number} */
      cropBox.width = min(max(cropBox.width, cropBox.minWidth), cropBox.maxWidth);
      /** @type {number} */
      cropBox.height = min(max(cropBox.height, cropBox.minHeight), cropBox.maxHeight);
      /** @type {number} */
      cropBox.width = max(cropBox.minWidth, cropBox.width * autoCropArea);
      /** @type {number} */
      cropBox.height = max(cropBox.minHeight, cropBox.height * autoCropArea);
      cropBox.oldLeft = cropBox.left = canvas.left + (canvas.width - cropBox.width) / 2;
      cropBox.oldTop = cropBox.top = canvas.top + (canvas.height - cropBox.height) / 2;
      this.initialCropBox = $.extend({}, cropBox);
    },
    limitCropBox : function(isSizeLimited, isPositionLimited) {
      var options = this.options;
      var aspectRatio = options.aspectRatio;
      var container = this.container;
      var containerWidth = container.width;
      var containerHeight = container.height;
      var canvas = this.canvas;
      var cropBox = this.cropBox;
      var isLimited = this.isLimited;
      var minCropBoxWidth;
      var minCropBoxHeight;
      var maxCropBoxWidth;
      var maxCropBoxHeight;
      if (isSizeLimited) {
        /** @type {number} */
        minCropBoxWidth = num(options.minCropBoxWidth) || 0;
        /** @type {number} */
        minCropBoxHeight = num(options.minCropBoxHeight) || 0;
        /** @type {number} */
        minCropBoxWidth = min(minCropBoxWidth, containerWidth);
        /** @type {number} */
        minCropBoxHeight = min(minCropBoxHeight, containerHeight);
        /** @type {number} */
        maxCropBoxWidth = min(containerWidth, isLimited ? canvas.width : containerWidth);
        /** @type {number} */
        maxCropBoxHeight = min(containerHeight, isLimited ? canvas.height : containerHeight);
        if (aspectRatio) {
          if (minCropBoxWidth && minCropBoxHeight) {
            if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {
              /** @type {number} */
              minCropBoxHeight = minCropBoxWidth / aspectRatio;
            } else {
              /** @type {number} */
              minCropBoxWidth = minCropBoxHeight * aspectRatio;
            }
          } else {
            if (minCropBoxWidth) {
              /** @type {number} */
              minCropBoxHeight = minCropBoxWidth / aspectRatio;
            } else {
              if (minCropBoxHeight) {
                /** @type {number} */
                minCropBoxWidth = minCropBoxHeight * aspectRatio;
              }
            }
          }
          if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {
            /** @type {number} */
            maxCropBoxHeight = maxCropBoxWidth / aspectRatio;
          } else {
            /** @type {number} */
            maxCropBoxWidth = maxCropBoxHeight * aspectRatio;
          }
        }
        /** @type {number} */
        cropBox.minWidth = min(minCropBoxWidth, maxCropBoxWidth);
        /** @type {number} */
        cropBox.minHeight = min(minCropBoxHeight, maxCropBoxHeight);
        /** @type {number} */
        cropBox.maxWidth = maxCropBoxWidth;
        /** @type {number} */
        cropBox.maxHeight = maxCropBoxHeight;
      }
      if (isPositionLimited) {
        if (isLimited) {
          /** @type {number} */
          cropBox.minLeft = max(0, canvas.left);
          /** @type {number} */
          cropBox.minTop = max(0, canvas.top);
          /** @type {number} */
          cropBox.maxLeft = min(containerWidth, canvas.left + canvas.width) - cropBox.width;
          /** @type {number} */
          cropBox.maxTop = min(containerHeight, canvas.top + canvas.height) - cropBox.height;
        } else {
          /** @type {number} */
          cropBox.minLeft = 0;
          /** @type {number} */
          cropBox.minTop = 0;
          /** @type {number} */
          cropBox.maxLeft = containerWidth - cropBox.width;
          /** @type {number} */
          cropBox.maxTop = containerHeight - cropBox.height;
        }
      }
    },
    renderCropBox : function() {
      var options = this.options;
      var container = this.container;
      var containerWidth = container.width;
      var containerHeight = container.height;
      var cropBox = this.cropBox;
      if (cropBox.width > cropBox.maxWidth || cropBox.width < cropBox.minWidth) {
        cropBox.left = cropBox.oldLeft;
      }
      if (cropBox.height > cropBox.maxHeight || cropBox.height < cropBox.minHeight) {
        cropBox.top = cropBox.oldTop;
      }
      /** @type {number} */
      cropBox.width = min(max(cropBox.width, cropBox.minWidth), cropBox.maxWidth);
      /** @type {number} */
      cropBox.height = min(max(cropBox.height, cropBox.minHeight), cropBox.maxHeight);
      this.limitCropBox(false, true);
      /** @type {number} */
      cropBox.oldLeft = cropBox.left = min(max(cropBox.left, cropBox.minLeft), cropBox.maxLeft);
      /** @type {number} */
      cropBox.oldTop = cropBox.top = min(max(cropBox.top, cropBox.minTop), cropBox.maxTop);
      if (options.movable && options.cropBoxMovable) {
        this.$face.data(tp, cropBox.width === containerWidth && cropBox.height === containerHeight ? ACTION_MOVE : value);
      }
      this.$cropBox.css({
        width : cropBox.width,
        height : cropBox.height,
        left : cropBox.left,
        top : cropBox.top
      });
      if (this.isCropped && this.isLimited) {
        this.limitCanvas(true, true);
      }
      if (!this.isDisabled) {
        this.output();
      }
    },
    output : function() {
      this.preview();
      if (this.isCompleted) {
        this.trigger(EVENT_ZOOM, this.getData());
      } else {
        if (!this.isBuilt) {
          this.$element.one(type, $.proxy(function() {
            this.trigger(EVENT_ZOOM, this.getData());
          }, this));
        }
      }
    },
    initPreview : function() {
      var crossOrigin = getCrossOrigin(this.crossOrigin);
      var url = crossOrigin ? this.crossOriginUrl : this.url;
      var s;
      this.$preview = $(this.options.preview);
      this.$clone2 = s = $("<img" + crossOrigin + ' src="' + url + '">');
      this.$viewBox.html(s);
      this.$preview.each(function() {
        var $this = $(this);
        $this.data(name, {
          width : $this.width(),
          height : $this.height(),
          html : $this.html()
        });
        $this.html("<img" + crossOrigin + ' src="' + url + '" style="display:block;width:100%;height:auto;min-width:0!important;min-height:0!important;max-width:none!important;max-height:none!important;image-orientation:0deg!important;">');
      });
    },
    resetPreview : function() {
      this.$preview.each(function() {
        var $curObj = $(this);
        var preview = $curObj.data(name);
        $curObj.css({
          width : preview.width,
          height : preview.height
        }).html(preview.html).removeData(name);
      });
    },
    preview : function() {
      var image = this.image;
      var canvas = this.canvas;
      var cropBox = this.cropBox;
      var cropBoxWidth = cropBox.width;
      var cropBoxHeight = cropBox.height;
      var w = image.width;
      var h = image.height;
      /** @type {number} */
      var left = cropBox.left - canvas.left - image.left;
      /** @type {number} */
      var top = cropBox.top - canvas.top - image.top;
      if (!this.isCropped || this.isDisabled) {
        return;
      }
      this.$clone2.css({
        width : w,
        height : h,
        marginLeft : -left,
        marginTop : -top,
        transform : getTransform(image)
      });
      this.$preview.each(function() {
        var $curObj = $(this);
        var s = $curObj.data(name);
        var originalWidth = s.width;
        var originalHeight = s.height;
        var newWidth = originalWidth;
        var newHeight = originalHeight;
        /** @type {number} */
        var ratio = 1;
        if (cropBoxWidth) {
          /** @type {number} */
          ratio = originalWidth / cropBoxWidth;
          /** @type {number} */
          newHeight = cropBoxHeight * ratio;
        }
        if (cropBoxHeight && newHeight > originalHeight) {
          /** @type {number} */
          ratio = originalHeight / cropBoxHeight;
          /** @type {number} */
          newWidth = cropBoxWidth * ratio;
          newHeight = originalHeight;
        }
        $curObj.css({
          width : newWidth,
          height : newHeight
        }).find("img").css({
          width : w * ratio,
          height : h * ratio,
          marginLeft : -left * ratio,
          marginTop : -top * ratio,
          transform : getTransform(image)
        });
      });
    },
    bind : function() {
      var options = this.options;
      var $this = this.$element;
      var $cropper = this.$cropper;
      if ($.isFunction(options.cropstart)) {
        $this.on(EVENT_CROP_MOVE, options.cropstart);
      }
      if ($.isFunction(options.cropmove)) {
        $this.on(EVENT_PICK, options.cropmove);
      }
      if ($.isFunction(options.cropend)) {
        $this.on(EVENT_CROP_END, options.cropend);
      }
      if ($.isFunction(options.crop)) {
        $this.on(EVENT_ZOOM, options.crop);
      }
      if ($.isFunction(options.zoom)) {
        $this.on(EVENT_CROP_START, options.zoom);
      }
      $cropper.on(EVENT_WHEEL, $.proxy(this.cropStart, this));
      if (options.zoomable && options.zoomOnWheel) {
        $cropper.on(EVENT_MOUSE_DOWN, $.proxy(this.wheel, this));
      }
      if (options.toggleDragModeOnDblclick) {
        $cropper.on(EVENT_DBLCLICK, $.proxy(this.dblclick, this));
      }
      $document.on(EVENT_MOUSE_MOVE, this._cropMove = proxy(this.cropMove, this)).on(EVENT_MOUSE_UP, this._cropEnd = proxy(this.cropEnd, this));
      if (options.responsive) {
        $window.on(str, this._resize = proxy(this.resize, this));
      }
    },
    unbind : function() {
      var options = this.options;
      var $this = this.$element;
      var $cropper = this.$cropper;
      if ($.isFunction(options.cropstart)) {
        $this.off(EVENT_CROP_MOVE, options.cropstart);
      }
      if ($.isFunction(options.cropmove)) {
        $this.off(EVENT_PICK, options.cropmove);
      }
      if ($.isFunction(options.cropend)) {
        $this.off(EVENT_CROP_END, options.cropend);
      }
      if ($.isFunction(options.crop)) {
        $this.off(EVENT_ZOOM, options.crop);
      }
      if ($.isFunction(options.zoom)) {
        $this.off(EVENT_CROP_START, options.zoom);
      }
      $cropper.off(EVENT_WHEEL, this.cropStart);
      if (options.zoomable && options.zoomOnWheel) {
        $cropper.off(EVENT_MOUSE_DOWN, this.wheel);
      }
      if (options.toggleDragModeOnDblclick) {
        $cropper.off(EVENT_DBLCLICK, this.dblclick);
      }
      $document.off(EVENT_MOUSE_MOVE, this._cropMove).off(EVENT_MOUSE_UP, this._cropEnd);
      if (options.responsive) {
        $window.off(str, this._resize);
      }
    },
    resize : function() {
      var restore = this.options.restore;
      var $container = this.$container;
      var container = this.container;
      var canvasData;
      var cropBoxData;
      var ratio;
      if (this.isDisabled || !container) {
        return;
      }
      /** @type {number} */
      ratio = $container.width() / container.width;
      if (ratio !== 1 || $container.height() !== container.height) {
        if (restore) {
          canvasData = this.getCanvasData();
          cropBoxData = this.getCropBoxData();
        }
        this.render();
        if (restore) {
          this.setCanvasData($.each(canvasData, function(i, n) {
            /** @type {number} */
            canvasData[i] = n * ratio;
          }));
          this.setCropBoxData($.each(cropBoxData, function(i, n) {
            /** @type {number} */
            cropBoxData[i] = n * ratio;
          }));
        }
      }
    },
    dblclick : function() {
      if (this.isDisabled) {
        return;
      }
      if (this.$dragBox.hasClass(CLASS_CROP)) {
        this.setDragMode(ACTION_MOVE);
      } else {
        this.setDragMode(ACTION_CROP);
      }
    },
    wheel : function(event) {
      var e = event.originalEvent || event;
      /** @type {number} */
      var ratio = num(this.options.wheelZoomRatio) || 0.1;
      /** @type {number} */
      var top = 1;
      if (this.isDisabled) {
        return;
      }
      event.preventDefault();
      if (this.wheeling) {
        return;
      }
      /** @type {boolean} */
      this.wheeling = true;
      setTimeout($.proxy(function() {
        /** @type {boolean} */
        this.wheeling = false;
      }, this), 50);
      if (e.deltaY) {
        /** @type {number} */
        top = e.deltaY > 0 ? 1 : -1;
      } else {
        if (e.wheelDelta) {
          /** @type {number} */
          top = -e.wheelDelta / 120;
        } else {
          if (e.detail) {
            /** @type {number} */
            top = e.detail > 0 ? 1 : -1;
          }
        }
      }
      this.zoom(-top * ratio, event);
    },
    cropStart : function(event) {
      var options = this.options;
      var originalEvent = event.originalEvent;
      var touches = originalEvent && originalEvent.touches;
      /** @type {!Object} */
      var e = event;
      var lastTouchesLength;
      var action;
      if (this.isDisabled) {
        return;
      }
      if (touches) {
        lastTouchesLength = touches.length;
        if (lastTouchesLength > 1) {
          if (options.zoomable && options.zoomOnTouch && lastTouchesLength === 2) {
            e = touches[1];
            this.startX2 = e.pageX;
            this.startY2 = e.pageY;
            /** @type {string} */
            action = ACTION_ZOOM;
          } else {
            return;
          }
        }
        e = touches[0];
      }
      action = action || $(e.target).data(tp);
      if (reClick.test(action)) {
        if (this.trigger(EVENT_CROP_MOVE, {
          originalEvent : originalEvent,
          action : action
        }).isDefaultPrevented()) {
          return;
        }
        event.preventDefault();
        this.action = action;
        /** @type {boolean} */
        this.cropping = false;
        this.startX = e.pageX || originalEvent && originalEvent.pageX;
        this.startY = e.pageY || originalEvent && originalEvent.pageY;
        if (action === ACTION_CROP) {
          /** @type {boolean} */
          this.cropping = true;
          this.$dragBox.addClass(CLASS_MODAL);
        }
      }
    },
    cropMove : function(event) {
      var options = this.options;
      var originalEvent = event.originalEvent;
      var touches = originalEvent && originalEvent.touches;
      /** @type {!Object} */
      var e = event;
      var action = this.action;
      var lastTouchesLength;
      if (this.isDisabled) {
        return;
      }
      if (touches) {
        lastTouchesLength = touches.length;
        if (lastTouchesLength > 1) {
          if (options.zoomable && options.zoomOnTouch && lastTouchesLength === 2) {
            e = touches[1];
            this.endX2 = e.pageX;
            this.endY2 = e.pageY;
          } else {
            return;
          }
        }
        e = touches[0];
      }
      if (action) {
        if (this.trigger(EVENT_PICK, {
          originalEvent : originalEvent,
          action : action
        }).isDefaultPrevented()) {
          return;
        }
        event.preventDefault();
        this.endX = e.pageX || originalEvent && originalEvent.pageX;
        this.endY = e.pageY || originalEvent && originalEvent.pageY;
        this.change(e.shiftKey, action === ACTION_ZOOM ? event : null);
      }
    },
    cropEnd : function(event) {
      var originalEvent = event.originalEvent;
      var action = this.action;
      if (this.isDisabled) {
        return;
      }
      if (action) {
        event.preventDefault();
        if (this.cropping) {
          /** @type {boolean} */
          this.cropping = false;
          this.$dragBox.toggleClass(CLASS_MODAL, this.isCropped && this.options.modal);
        }
        /** @type {string} */
        this.action = "";
        this.trigger(EVENT_CROP_END, {
          originalEvent : originalEvent,
          action : action
        });
      }
    },
    change : function(shiftKey, event) {
      var options = this.options;
      var aspectRatio = options.aspectRatio;
      var action = this.action;
      var container = this.container;
      var c = this.canvas;
      var cropBox = this.cropBox;
      var width = cropBox.width;
      var height = cropBox.height;
      var left = cropBox.left;
      var top = cropBox.top;
      var right = left + width;
      var bottom = top + height;
      /** @type {number} */
      var minLeft = 0;
      /** @type {number} */
      var minTop = 0;
      var maxWidth = container.width;
      var maxHeight = container.height;
      /** @type {boolean} */
      var canvas = true;
      var offset;
      var range;
      if (!aspectRatio && shiftKey) {
        /** @type {number} */
        aspectRatio = width && height ? width / height : 1;
      }
      if (this.limited) {
        minLeft = cropBox.minLeft;
        minTop = cropBox.minTop;
        maxWidth = minLeft + min(container.width, c.left + c.width);
        maxHeight = minTop + min(container.height, c.top + c.height);
      }
      range = {
        x : this.endX - this.startX,
        y : this.endY - this.startY
      };
      if (aspectRatio) {
        /** @type {number} */
        range.X = range.y * aspectRatio;
        /** @type {number} */
        range.Y = range.x / aspectRatio;
      }
      switch(action) {
        case value:
          left = left + range.x;
          top = top + range.y;
          break;
        case ACTION_EAST:
          if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {
            /** @type {boolean} */
            canvas = false;
            break;
          }
          width = width + range.x;
          if (aspectRatio) {
            /** @type {number} */
            height = width / aspectRatio;
            /** @type {number} */
            top = top - range.Y / 2;
          }
          if (width < 0) {
            /** @type {string} */
            action = ACTION_WEST;
            /** @type {number} */
            width = 0;
          }
          break;
        case ACTION_NORTH:
          if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {
            /** @type {boolean} */
            canvas = false;
            break;
          }
          /** @type {number} */
          height = height - range.y;
          top = top + range.y;
          if (aspectRatio) {
            /** @type {number} */
            width = height * aspectRatio;
            left = left + range.X / 2;
          }
          if (height < 0) {
            /** @type {string} */
            action = ACTION_SOUTH;
            /** @type {number} */
            height = 0;
          }
          break;
        case ACTION_WEST:
          if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {
            /** @type {boolean} */
            canvas = false;
            break;
          }
          /** @type {number} */
          width = width - range.x;
          left = left + range.x;
          if (aspectRatio) {
            /** @type {number} */
            height = width / aspectRatio;
            top = top + range.Y / 2;
          }
          if (width < 0) {
            /** @type {string} */
            action = ACTION_EAST;
            /** @type {number} */
            width = 0;
          }
          break;
        case ACTION_SOUTH:
          if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {
            /** @type {boolean} */
            canvas = false;
            break;
          }
          height = height + range.y;
          if (aspectRatio) {
            /** @type {number} */
            width = height * aspectRatio;
            /** @type {number} */
            left = left - range.X / 2;
          }
          if (height < 0) {
            /** @type {string} */
            action = ACTION_NORTH;
            /** @type {number} */
            height = 0;
          }
          break;
        case ACTION_NORTH_EAST:
          if (aspectRatio) {
            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {
              /** @type {boolean} */
              canvas = false;
              break;
            }
            /** @type {number} */
            height = height - range.y;
            top = top + range.y;
            /** @type {number} */
            width = height * aspectRatio;
          } else {
            if (range.x >= 0) {
              if (right < maxWidth) {
                width = width + range.x;
              } else {
                if (range.y <= 0 && top <= minTop) {
                  /** @type {boolean} */
                  canvas = false;
                }
              }
            } else {
              width = width + range.x;
            }
            if (range.y <= 0) {
              if (top > minTop) {
                /** @type {number} */
                height = height - range.y;
                top = top + range.y;
              }
            } else {
              /** @type {number} */
              height = height - range.y;
              top = top + range.y;
            }
          }
          if (width < 0 && height < 0) {
            /** @type {string} */
            action = ACTION_SOUTH_WEST;
            /** @type {number} */
            height = 0;
            /** @type {number} */
            width = 0;
          } else {
            if (width < 0) {
              /** @type {string} */
              action = ACTION_NORTH_WEST;
              /** @type {number} */
              width = 0;
            } else {
              if (height < 0) {
                /** @type {string} */
                action = ACTION_SOUTH_EAST;
                /** @type {number} */
                height = 0;
              }
            }
          }
          break;
        case ACTION_NORTH_WEST:
          if (aspectRatio) {
            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {
              /** @type {boolean} */
              canvas = false;
              break;
            }
            /** @type {number} */
            height = height - range.y;
            top = top + range.y;
            /** @type {number} */
            width = height * aspectRatio;
            left = left + range.X;
          } else {
            if (range.x <= 0) {
              if (left > minLeft) {
                /** @type {number} */
                width = width - range.x;
                left = left + range.x;
              } else {
                if (range.y <= 0 && top <= minTop) {
                  /** @type {boolean} */
                  canvas = false;
                }
              }
            } else {
              /** @type {number} */
              width = width - range.x;
              left = left + range.x;
            }
            if (range.y <= 0) {
              if (top > minTop) {
                /** @type {number} */
                height = height - range.y;
                top = top + range.y;
              }
            } else {
              /** @type {number} */
              height = height - range.y;
              top = top + range.y;
            }
          }
          if (width < 0 && height < 0) {
            /** @type {string} */
            action = ACTION_SOUTH_EAST;
            /** @type {number} */
            height = 0;
            /** @type {number} */
            width = 0;
          } else {
            if (width < 0) {
              /** @type {string} */
              action = ACTION_NORTH_EAST;
              /** @type {number} */
              width = 0;
            } else {
              if (height < 0) {
                /** @type {string} */
                action = ACTION_SOUTH_WEST;
                /** @type {number} */
                height = 0;
              }
            }
          }
          break;
        case ACTION_SOUTH_WEST:
          if (aspectRatio) {
            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {
              /** @type {boolean} */
              canvas = false;
              break;
            }
            /** @type {number} */
            width = width - range.x;
            left = left + range.x;
            /** @type {number} */
            height = width / aspectRatio;
          } else {
            if (range.x <= 0) {
              if (left > minLeft) {
                /** @type {number} */
                width = width - range.x;
                left = left + range.x;
              } else {
                if (range.y >= 0 && bottom >= maxHeight) {
                  /** @type {boolean} */
                  canvas = false;
                }
              }
            } else {
              /** @type {number} */
              width = width - range.x;
              left = left + range.x;
            }
            if (range.y >= 0) {
              if (bottom < maxHeight) {
                height = height + range.y;
              }
            } else {
              height = height + range.y;
            }
          }
          if (width < 0 && height < 0) {
            /** @type {string} */
            action = ACTION_NORTH_EAST;
            /** @type {number} */
            height = 0;
            /** @type {number} */
            width = 0;
          } else {
            if (width < 0) {
              /** @type {string} */
              action = ACTION_SOUTH_EAST;
              /** @type {number} */
              width = 0;
            } else {
              if (height < 0) {
                /** @type {string} */
                action = ACTION_NORTH_WEST;
                /** @type {number} */
                height = 0;
              }
            }
          }
          break;
        case ACTION_SOUTH_EAST:
          if (aspectRatio) {
            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {
              /** @type {boolean} */
              canvas = false;
              break;
            }
            width = width + range.x;
            /** @type {number} */
            height = width / aspectRatio;
          } else {
            if (range.x >= 0) {
              if (right < maxWidth) {
                width = width + range.x;
              } else {
                if (range.y >= 0 && bottom >= maxHeight) {
                  /** @type {boolean} */
                  canvas = false;
                }
              }
            } else {
              width = width + range.x;
            }
            if (range.y >= 0) {
              if (bottom < maxHeight) {
                height = height + range.y;
              }
            } else {
              height = height + range.y;
            }
          }
          if (width < 0 && height < 0) {
            /** @type {string} */
            action = ACTION_NORTH_WEST;
            /** @type {number} */
            height = 0;
            /** @type {number} */
            width = 0;
          } else {
            if (width < 0) {
              /** @type {string} */
              action = ACTION_SOUTH_WEST;
              /** @type {number} */
              width = 0;
            } else {
              if (height < 0) {
                /** @type {string} */
                action = ACTION_NORTH_EAST;
                /** @type {number} */
                height = 0;
              }
            }
          }
          break;
        case ACTION_MOVE:
          this.move(range.x, range.y);
          /** @type {boolean} */
          canvas = false;
          break;
        case ACTION_ZOOM:
          this.zoom(function(x0, x1, argR, arg) {
            /** @type {number} */
            var b = sqrt(x0 * x0 + x1 * x1);
            /** @type {number} */
            var a = sqrt(argR * argR + arg * arg);
            return (a - b) / b;
          }(abs(this.startX - this.startX2), abs(this.startY - this.startY2), abs(this.endX - this.endX2), abs(this.endY - this.endY2)), event);
          this.startX2 = this.endX2;
          this.startY2 = this.endY2;
          /** @type {boolean} */
          canvas = false;
          break;
        case ACTION_CROP:
          if (!range.x || !range.y) {
            /** @type {boolean} */
            canvas = false;
            break;
          }
          offset = this.$cropper.offset();
          /** @type {number} */
          left = this.startX - offset.left;
          /** @type {number} */
          top = this.startY - offset.top;
          width = cropBox.minWidth;
          height = cropBox.minHeight;
          if (range.x > 0) {
            /** @type {string} */
            action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;
          } else {
            if (range.x < 0) {
              /** @type {number} */
              left = left - width;
              /** @type {string} */
              action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;
            }
          }
          if (range.y < 0) {
            /** @type {number} */
            top = top - height;
          }
          if (!this.isCropped) {
            this.$cropBox.removeClass(CLASS_HIDDEN);
            /** @type {boolean} */
            this.isCropped = true;
            if (this.limited) {
              this.limitCropBox(true, true);
            }
          }
          break;
      }
      if (canvas) {
        cropBox.width = width;
        cropBox.height = height;
        cropBox.left = left;
        cropBox.top = top;
        this.action = action;
        this.renderCropBox();
      }
      this.startX = this.endX;
      this.startY = this.endY;
    },
    crop : function() {
      if (!this.isBuilt || this.isDisabled) {
        return;
      }
      if (!this.isCropped) {
        /** @type {boolean} */
        this.isCropped = true;
        this.limitCropBox(true, true);
        if (this.options.modal) {
          this.$dragBox.addClass(CLASS_MODAL);
        }
        this.$cropBox.removeClass(CLASS_HIDDEN);
      }
      this.setCropBoxData(this.initialCropBox);
    },
    reset : function() {
      if (!this.isBuilt || this.isDisabled) {
        return;
      }
      this.image = $.extend({}, this.initialImage);
      this.canvas = $.extend({}, this.initialCanvas);
      this.cropBox = $.extend({}, this.initialCropBox);
      this.renderCanvas();
      if (this.isCropped) {
        this.renderCropBox();
      }
    },
    clear : function() {
      if (!this.isCropped || this.isDisabled) {
        return;
      }
      $.extend(this.cropBox, {
        left : 0,
        top : 0,
        width : 0,
        height : 0
      });
      /** @type {boolean} */
      this.isCropped = false;
      this.renderCropBox();
      this.limitCanvas(true, true);
      this.renderCanvas();
      this.$dragBox.removeClass(CLASS_MODAL);
      this.$cropBox.addClass(CLASS_HIDDEN);
    },
    replace : function(pattern, value) {
      if (!this.isDisabled && pattern) {
        if (this.isImg) {
          this.$element.attr("src", pattern);
        }
        if (value) {
          /** @type {!Object} */
          this.url = pattern;
          this.$clone.attr("src", pattern);
          if (this.isBuilt) {
            this.$preview.find("img").add(this.$clone2).attr("src", pattern);
          }
        } else {
          if (this.isImg) {
            /** @type {boolean} */
            this.isReplaced = true;
          }
          /** @type {null} */
          this.options.data = null;
          this.load(pattern);
        }
      }
    },
    enable : function() {
      if (this.isBuilt) {
        /** @type {boolean} */
        this.isDisabled = false;
        this.$cropper.removeClass(CLASS_DISABLED);
      }
    },
    disable : function() {
      if (this.isBuilt) {
        /** @type {boolean} */
        this.isDisabled = true;
        this.$cropper.addClass(CLASS_DISABLED);
      }
    },
    destroy : function() {
      var $this = this.$element;
      if (this.isLoaded) {
        if (this.isImg && this.isReplaced) {
          $this.attr("src", this.originalUrl);
        }
        this.unbuild();
        $this.removeClass(CLASS_HIDDEN);
      } else {
        if (this.isImg) {
          $this.off(EVENT_LOAD, this.start);
        } else {
          if (this.$clone) {
            this.$clone.remove();
          }
        }
      }
      $this.removeData(key);
    },
    move : function(offsetX, offsetY) {
      var canvas = this.canvas;
      this.moveTo(isUndefined(offsetX) ? offsetX : canvas.left + num(offsetX), isUndefined(offsetY) ? offsetY : canvas.top + num(offsetY));
    },
    moveTo : function(x, y) {
      var c = this.canvas;
      /** @type {boolean} */
      var s = false;
      if (isUndefined(y)) {
        /** @type {number} */
        y = x;
      }
      /** @type {number} */
      x = num(x);
      /** @type {number} */
      y = num(y);
      if (this.isBuilt && !this.isDisabled && this.options.movable) {
        if (isNumber(x)) {
          /** @type {number} */
          c.left = x;
          /** @type {boolean} */
          s = true;
        }
        if (isNumber(y)) {
          /** @type {number} */
          c.top = y;
          /** @type {boolean} */
          s = true;
        }
        if (s) {
          this.renderCanvas(true);
        }
      }
    },
    zoom : function(ratio, _event) {
      var canvas = this.canvas;
      /** @type {number} */
      ratio = num(ratio);
      if (ratio < 0) {
        /** @type {number} */
        ratio = 1 / (1 - ratio);
      } else {
        /** @type {number} */
        ratio = 1 + ratio;
      }
      this.zoomTo(canvas.width * ratio / canvas.naturalWidth, _event);
    },
    zoomTo : function(ratio, _event) {
      var options = this.options;
      var canvas = this.canvas;
      var width = canvas.width;
      var height = canvas.height;
      var naturalWidth = canvas.naturalWidth;
      var naturalHeight = canvas.naturalHeight;
      var originalEvent;
      var newWidth;
      var newHeight;
      var stop_offset;
      var evt;
      /** @type {number} */
      ratio = num(ratio);
      if (ratio >= 0 && this.isBuilt && !this.isDisabled && options.zoomable) {
        /** @type {number} */
        newWidth = naturalWidth * ratio;
        /** @type {number} */
        newHeight = naturalHeight * ratio;
        if (_event) {
          originalEvent = _event.originalEvent;
        }
        if (this.trigger(EVENT_CROP_START, {
          originalEvent : originalEvent,
          oldRatio : width / naturalWidth,
          ratio : newWidth / naturalWidth
        }).isDefaultPrevented()) {
          return;
        }
        if (originalEvent) {
          stop_offset = this.$cropper.offset();
          evt = originalEvent.touches ? getTouchesCenter(originalEvent.touches) : {
            pageX : _event.pageX || originalEvent.pageX || 0,
            pageY : _event.pageY || originalEvent.pageY || 0
          };
          canvas.left -= (newWidth - width) * ((evt.pageX - stop_offset.left - canvas.left) / width);
          canvas.top -= (newHeight - height) * ((evt.pageY - stop_offset.top - canvas.top) / height);
        } else {
          canvas.left -= (newWidth - width) / 2;
          canvas.top -= (newHeight - height) / 2;
        }
        /** @type {number} */
        canvas.width = newWidth;
        /** @type {number} */
        canvas.height = newHeight;
        this.renderCanvas(true);
      }
    },
    rotate : function(orientation) {
      this.rotateTo((this.image.rotate || 0) + num(orientation));
    },
    rotateTo : function(degree) {
      /** @type {number} */
      degree = num(degree);
      if (isNumber(degree) && this.isBuilt && !this.isDisabled && this.options.rotatable) {
        /** @type {number} */
        this.image.rotate = degree % 360;
        /** @type {boolean} */
        this.isRotated = true;
        this.renderCanvas(true);
      }
    },
    scale : function(scaleX, scaleY) {
      var image = this.image;
      /** @type {boolean} */
      var s = false;
      if (isUndefined(scaleY)) {
        /** @type {number} */
        scaleY = scaleX;
      }
      /** @type {number} */
      scaleX = num(scaleX);
      /** @type {number} */
      scaleY = num(scaleY);
      if (this.isBuilt && !this.isDisabled && this.options.scalable) {
        if (isNumber(scaleX)) {
          /** @type {number} */
          image.scaleX = scaleX;
          /** @type {boolean} */
          s = true;
        }
        if (isNumber(scaleY)) {
          /** @type {number} */
          image.scaleY = scaleY;
          /** @type {boolean} */
          s = true;
        }
        if (s) {
          this.renderImage(true);
        }
      }
    },
    scaleX : function(scaleX) {
      var scaleY = this.image.scaleY;
      this.scale(scaleX, isNumber(scaleY) ? scaleY : 1);
    },
    scaleY : function(scaleY) {
      var scaleX = this.image.scaleX;
      this.scale(isNumber(scaleX) ? scaleX : 1, scaleY);
    },
    getData : function(v) {
      var options = this.options;
      var image = this.image;
      var canvas = this.canvas;
      var cropBox = this.cropBox;
      var checkCount;
      var result;
      if (this.isBuilt && this.isCropped) {
        result = {
          x : cropBox.left - canvas.left,
          y : cropBox.top - canvas.top,
          width : cropBox.width,
          height : cropBox.height
        };
        /** @type {number} */
        checkCount = image.width / image.naturalWidth;
        $.each(result, function(key, res) {
          /** @type {number} */
          res = res / checkCount;
          /** @type {number} */
          result[key] = v ? round(res) : res;
        });
      } else {
        result = {
          x : 0,
          y : 0,
          width : 0,
          height : 0
        };
      }
      if (options.rotatable) {
        result.rotate = image.rotate || 0;
      }
      if (options.scalable) {
        result.scaleX = image.scaleX || 1;
        result.scaleY = image.scaleY || 1;
      }
      return result;
    },
    setData : function(data) {
      var options = this.options;
      var image = this.image;
      var canvas = this.canvas;
      var cropBoxData = {};
      var isRotated;
      var n;
      var ratio;
      if ($.isFunction(data)) {
        data = data.call(this.element);
      }
      if (this.isBuilt && !this.isDisabled && $.isPlainObject(data)) {
        if (options.rotatable) {
          if (isNumber(data.rotate) && data.rotate !== image.rotate) {
            image.rotate = data.rotate;
            /** @type {boolean} */
            this.isRotated = isRotated = true;
          }
        }
        if (options.scalable) {
          if (isNumber(data.scaleX) && data.scaleX !== image.scaleX) {
            image.scaleX = data.scaleX;
            /** @type {boolean} */
            n = true;
          }
          if (isNumber(data.scaleY) && data.scaleY !== image.scaleY) {
            image.scaleY = data.scaleY;
            /** @type {boolean} */
            n = true;
          }
        }
        if (isRotated) {
          this.renderCanvas();
        } else {
          if (n) {
            this.renderImage();
          }
        }
        /** @type {number} */
        ratio = image.width / image.naturalWidth;
        if (isNumber(data.x)) {
          cropBoxData.left = data.x * ratio + canvas.left;
        }
        if (isNumber(data.y)) {
          cropBoxData.top = data.y * ratio + canvas.top;
        }
        if (isNumber(data.width)) {
          /** @type {number} */
          cropBoxData.width = data.width * ratio;
        }
        if (isNumber(data.height)) {
          /** @type {number} */
          cropBoxData.height = data.height * ratio;
        }
        this.setCropBoxData(cropBoxData);
      }
    },
    getContainerData : function() {
      return this.isBuilt ? this.container : {};
    },
    getImageData : function() {
      return this.isLoaded ? this.image : {};
    },
    getCanvasData : function() {
      var o = this.canvas;
      var data = {};
      if (this.isBuilt) {
        $.each(["left", "top", "width", "height", "naturalWidth", "naturalHeight"], function(i, k) {
          data[k] = o[k];
        });
      }
      return data;
    },
    setCanvasData : function(data) {
      var canvas = this.canvas;
      var aspectRatio = canvas.aspectRatio;
      if ($.isFunction(data)) {
        data = data.call(this.$element);
      }
      if (this.isBuilt && !this.isDisabled && $.isPlainObject(data)) {
        if (isNumber(data.left)) {
          canvas.left = data.left;
        }
        if (isNumber(data.top)) {
          canvas.top = data.top;
        }
        if (isNumber(data.width)) {
          canvas.width = data.width;
          /** @type {number} */
          canvas.height = data.width / aspectRatio;
        } else {
          if (isNumber(data.height)) {
            canvas.height = data.height;
            /** @type {number} */
            canvas.width = data.height * aspectRatio;
          }
        }
        this.renderCanvas(true);
      }
    },
    getCropBoxData : function() {
      var cropBox = this.cropBox;
      var newItemViewBounds;
      if (this.isBuilt && this.isCropped) {
        newItemViewBounds = {
          left : cropBox.left,
          top : cropBox.top,
          width : cropBox.width,
          height : cropBox.height
        };
      }
      return newItemViewBounds || {};
    },
    setCropBoxData : function(data) {
      var cropBox = this.cropBox;
      var aspectRatio = this.options.aspectRatio;
      var o;
      var n;
      if ($.isFunction(data)) {
        data = data.call(this.$element);
      }
      if (this.isBuilt && this.isCropped && !this.isDisabled && $.isPlainObject(data)) {
        if (isNumber(data.left)) {
          cropBox.left = data.left;
        }
        if (isNumber(data.top)) {
          cropBox.top = data.top;
        }
        if (isNumber(data.width)) {
          /** @type {boolean} */
          o = true;
          cropBox.width = data.width;
        }
        if (isNumber(data.height)) {
          /** @type {boolean} */
          n = true;
          cropBox.height = data.height;
        }
        if (aspectRatio) {
          if (o) {
            /** @type {number} */
            cropBox.height = cropBox.width / aspectRatio;
          } else {
            if (n) {
              /** @type {number} */
              cropBox.width = cropBox.height * aspectRatio;
            }
          }
        }
        this.renderCropBox();
      }
    },
    getCroppedCanvas : function(options) {
      var originalWidth;
      var originalHeight;
      var w;
      var canvasHeight;
      var scaledWidth;
      var scaledHeight;
      var scaledRatio;
      var aspectRatio;
      var canvas;
      var ctx;
      var data;
      if (!this.isBuilt || !this.isCropped || !SUPPORT_CANVAS) {
        return;
      }
      if (!$.isPlainObject(options)) {
        options = {};
      }
      data = this.getData();
      originalWidth = data.width;
      originalHeight = data.height;
      /** @type {number} */
      aspectRatio = originalWidth / originalHeight;
      if ($.isPlainObject(options)) {
        scaledWidth = options.width;
        scaledHeight = options.height;
        if (scaledWidth) {
          /** @type {number} */
          scaledHeight = scaledWidth / aspectRatio;
          /** @type {number} */
          scaledRatio = scaledWidth / originalWidth;
        } else {
          if (scaledHeight) {
            /** @type {number} */
            scaledWidth = scaledHeight * aspectRatio;
            /** @type {number} */
            scaledRatio = scaledHeight / originalHeight;
          }
        }
      }
      /** @type {number} */
      w = floor(scaledWidth || originalWidth);
      /** @type {number} */
      canvasHeight = floor(scaledHeight || originalHeight);
      canvas = $("<canvas>")[0];
      /** @type {number} */
      canvas.width = w;
      /** @type {number} */
      canvas.height = canvasHeight;
      ctx = canvas.getContext("2d");
      if (options.fillColor) {
        ctx.fillStyle = options.fillColor;
        ctx.fillRect(0, 0, w, canvasHeight);
      }
      ctx.drawImage.apply(ctx, function() {
        var source = getSourceCanvas(this.$clone[0], this.image);
        var sourceWidth = source.width;
        var sourceHeight = source.height;
        var canvas = this.canvas;
        /** @type {!Array} */
        var params = [source];
        var srcX = data.x + canvas.naturalWidth * (abs(data.scaleX || 1) - 1) / 2;
        var srcY = data.y + canvas.naturalHeight * (abs(data.scaleY || 1) - 1) / 2;
        var srcWidth;
        var srcHeight;
        var dstX;
        var dstY;
        var dstWidth;
        var dstHeight;
        if (srcX <= -originalWidth || srcX > sourceWidth) {
          /** @type {number} */
          srcX = srcWidth = dstX = dstWidth = 0;
        } else {
          if (srcX <= 0) {
            /** @type {number} */
            dstX = -srcX;
            /** @type {number} */
            srcX = 0;
            /** @type {number} */
            srcWidth = dstWidth = min(sourceWidth, originalWidth + srcX);
          } else {
            if (srcX <= sourceWidth) {
              /** @type {number} */
              dstX = 0;
              /** @type {number} */
              srcWidth = dstWidth = min(originalWidth, sourceWidth - srcX);
            }
          }
        }
        if (srcWidth <= 0 || srcY <= -originalHeight || srcY > sourceHeight) {
          /** @type {number} */
          srcY = srcHeight = dstY = dstHeight = 0;
        } else {
          if (srcY <= 0) {
            /** @type {number} */
            dstY = -srcY;
            /** @type {number} */
            srcY = 0;
            /** @type {number} */
            srcHeight = dstHeight = min(sourceHeight, originalHeight + srcY);
          } else {
            if (srcY <= sourceHeight) {
              /** @type {number} */
              dstY = 0;
              /** @type {number} */
              srcHeight = dstHeight = min(originalHeight, sourceHeight - srcY);
            }
          }
        }
        params.push(floor(srcX), floor(srcY), floor(srcWidth), floor(srcHeight));
        if (scaledRatio) {
          /** @type {number} */
          dstX = dstX * scaledRatio;
          /** @type {number} */
          dstY = dstY * scaledRatio;
          /** @type {number} */
          dstWidth = dstWidth * scaledRatio;
          /** @type {number} */
          dstHeight = dstHeight * scaledRatio;
        }
        if (dstWidth > 0 && dstHeight > 0) {
          params.push(floor(dstX), floor(dstY), floor(dstWidth), floor(dstHeight));
        }
        return params;
      }.call(this));
      return canvas;
    },
    setAspectRatio : function(aspectRatio) {
      var options = this.options;
      if (!this.isDisabled && !isUndefined(aspectRatio)) {
        /** @type {number} */
        options.aspectRatio = max(0, aspectRatio) || NaN;
        if (this.isBuilt) {
          this.initCropBox();
          if (this.isCropped) {
            this.renderCropBox();
          }
        }
      }
    },
    setDragMode : function(mode) {
      var options = this.options;
      var croppable;
      var movable;
      if (this.isLoaded && !this.isDisabled) {
        /** @type {boolean} */
        croppable = mode === ACTION_CROP;
        movable = options.movable && mode === ACTION_MOVE;
        mode = croppable || movable ? mode : ACTION_NONE;
        this.$dragBox.data(tp, mode).toggleClass(CLASS_CROP, croppable).toggleClass(CLASS_MOVE, movable);
        if (!options.cropBoxMovable) {
          this.$face.data(tp, mode).toggleClass(CLASS_CROP, croppable).toggleClass(CLASS_MOVE, movable);
        }
      }
    }
  };
  Cropper.DEFAULTS = {
    viewMode : 0,
    dragMode : "crop",
    aspectRatio : NaN,
    data : null,
    preview : "",
    responsive : true,
    restore : true,
    checkCrossOrigin : true,
    checkOrientation : true,
    modal : true,
    guides : true,
    center : true,
    highlight : true,
    background : true,
    autoCrop : true,
    autoCropArea : 0.8,
    movable : true,
    rotatable : true,
    scalable : true,
    zoomable : true,
    zoomOnTouch : true,
    zoomOnWheel : true,
    wheelZoomRatio : 0.1,
    cropBoxMovable : true,
    cropBoxResizable : true,
    toggleDragModeOnDblclick : true,
    minCanvasWidth : 0,
    minCanvasHeight : 0,
    minCropBoxWidth : 0,
    minCropBoxHeight : 0,
    minContainerWidth : 200,
    minContainerHeight : 100,
    build : null,
    built : null,
    cropstart : null,
    cropmove : null,
    cropend : null,
    crop : null,
    zoom : null
  };
  /**
   * @param {?} settings
   * @return {undefined}
   */
  Cropper.setDefaults = function(settings) {
    $.extend(Cropper.DEFAULTS, settings);
  };
  /** @type {string} */
  Cropper.TEMPLATE = '<div class="cropper-container"><div class="cropper-wrap-box"><div class="cropper-canvas"></div></div><div class="cropper-drag-box"></div><div class="cropper-crop-box"><span class="cropper-view-box"></span><span class="cropper-dashed dashed-h"></span><span class="cropper-dashed dashed-v"></span><span class="cropper-center"></span><span class="cropper-face"></span><span class="cropper-line line-e" data-action="e"></span><span class="cropper-line line-n" data-action="n"></span><span class="cropper-line line-w" data-action="w"></span><span class="cropper-line line-s" data-action="s"></span><span class="cropper-point point-e" data-action="e"></span><span class="cropper-point point-n" data-action="n"></span><span class="cropper-point point-w" data-action="w"></span><span class="cropper-point point-s" data-action="s"></span><span class="cropper-point point-ne" data-action="ne"></span><span class="cropper-point point-nw" data-action="nw"></span><span class="cropper-point point-sw" data-action="sw"></span><span class="cropper-point point-se" data-action="se"></span></div></div>';
  Cropper.other = $.fn.cropper;
  /**
   * @param {string} options
   * @return {?}
   */
  $.fn.cropper = function(options) {
    var array = toArray(arguments, 1);
    var value;
    this.each(function() {
      var $this = $(this);
      var data = $this.data(key);
      var encoding;
      var fn;
      if (!data) {
        if (/destroy/.test(options)) {
          return;
        }
        encoding = $.extend({}, $this.data(), $.isPlainObject(options) && options);
        $this.data(key, data = new Cropper(this, encoding));
      }
      if (typeof options === "string" && $.isFunction(fn = data[options])) {
        value = fn.apply(data, array);
      }
    });
    return isUndefined(value) ? this : value;
  };
  /** @type {function(?, !Function): undefined} */
  $.fn.cropper.Constructor = Cropper;
  /** @type {function(?): undefined} */
  $.fn.cropper.setDefaults = Cropper.setDefaults;
  /**
   * @return {?}
   */
  $.fn.cropper.noConflict = function() {
    $.fn.cropper = Cropper.other;
    return this;
  };
});
(function($) {
  $.widget("livestreet.lsCropModal", $.livestreet.lsComponent, {
    options : {
      urls : {
        submit : null
      },
      selectors : {
        crop : ".js-crop",
        submit : ".js-crop-submit"
      },
      cropOptions : {},
      submitted : null
    },
    _create : function() {
      this._super();
      this.elements.crop.lsCrop(this.option("cropOptions"));
      this._on(this.elements.submit, {
        click : "onSubmit"
      });
    },
    onSubmit : function() {
      var opts = {
        size : this.elements.crop.lsCrop("getSelection"),
        canvas_width : this.elements.crop.lsCrop("getImageData").naturalWidth
      };
      this._load("submit", opts, "onSubmitSuccess");
    },
    onSubmitSuccess : function(data) {
      this._trigger("submitted", null, {
        element : this.element,
        response : data
      });
      this.element.lsModal("hide");
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsCrop", $.livestreet.lsComponent, {
    options : {
      viewMode : 2,
      autoCropArea : 0.5,
      guides : false,
      center : false,
      background : false,
      rotatable : false,
      zoomable : false,
      scalable : false
    },
    _create : function() {
      this._super();
      this.element.cropper(this.options);
    },
    getImage : function() {
      return this.element;
    },
    getImageData : function() {
      return this.element.cropper("getImageData");
    },
    getCanvasData : function() {
      return this.element.cropper("getCanvasData");
    },
    getSelection : function() {
      var data = this.element.cropper("getData");
      return {
        x : data.x,
        y : data.y,
        x2 : data.x + data.width,
        y2 : data.y + data.height
      };
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsActionbarItemSelect", {
    options : {
      selectors : {
        target_item : ".js-actionbar-select-target-item"
      },
      classes : {
        target_selected : "selected"
      }
    },
    _create : function() {
      var t = this;
      this.element.lsDropdown();
      this.elements = {
        target_items : $(this.option("selectors.target_item")),
        select_menu_items : this.element.lsDropdown("getMenu").find("a[data-select-item]")
      };
      this.elements.select_menu_items.on("click" + this.eventNamespace, function(event) {
        var detailViewItem = t.elements.target_items.filter($(this).data("select-filter") || "*");
        t.elements.target_items.removeClass(t.option("classes.target_selected")).find("input[type=checkbox]").prop("checked", false);
        detailViewItem.addClass(t.option("classes.target_selected")).find("input[type=checkbox]").prop("checked", true);
        event.preventDefault();
      });
      $(this.option("selectors.target_item") + " input[type=checkbox]").on("click" + this.eventNamespace, function(s) {
        $(this).closest(t.option("selectors.target_item")).toggleClass(t.option("classes.target_selected"));
      });
    }
  });
})(jQuery);
(function($) {
  $.extend({
    notifier : {
      options : {
        core : "notifier",
        box_class : "n-box",
        notice_class : "n-notice",
        error_class : "n-error",
        close_class : "n-close",
        duration : 4E3
      },
      notices : {},
      broadcast : function(options, e, data) {
        this.core();
        var id = "notice-" + this.timestamp();
        this.notices[id] = {
          id : id
        };
        notice = {
          id : id,
          ttl : options,
          msg : e
        };
        $("#" + this.options.core).append(this.box(notice).addClass(data));
      },
      notice : function(type, data) {
        this.broadcast(type, data, this.options.notice_class);
      },
      error : function(type, name) {
        this.broadcast(type, name, this.options.error_class);
      },
      core : function() {
        var plugin = this.options.core;
        return $("#" + plugin).length == 0 ? $("body").append('<div id="' + plugin + '"></div>') : $("#" + plugin);
      },
      box : function(notice) {
        var box = $('<div id="' + notice.id + '" class="' + this.options.box_class + '"></div>');
        if (notice.ttl != null) {
          box.append($("<h3></h3>").append(notice.ttl));
        }
        if (notice.msg) {
          box.append($("<p></p>").append(notice.msg));
        }
        box.hide().show();
        this.life(box, notice.id);
        this.events(box, notice.id);
        return box;
      },
      events : function(selector, context) {
        $(selector).bind("click", function() {
          var t = $(this).attr("id");
          $.notifier.destroy(t, true);
        });
        $(selector).bind("mouseover", function() {
          if ($.notifier.notices[$(this).attr("id")].interval) {
            var t = $(this).attr("id");
            $.notifier.destroy(t);
          }
        });
        $(selector).bind("mouseout", function() {
          $.notifier.life(this, $(this).attr("id"));
        });
      },
      life : function(box, seed) {
        if (!this.notices[seed].duration) {
          this.notices[seed].duration = this.options.duration;
        }
        this.notices[seed].interval = {};
        /** @type {number} */
        this.notices[seed].interval = setInterval(function() {
          (function(s) {
            $.notifier.destroy(s, true);
          })(seed);
        }, this.notices[seed].duration);
      },
      destroy : function(name, immediate) {
        clearInterval($.notifier.notices[name].interval);
        delete $.notifier.notices[name].interval;
        if (immediate == true) {
          $("#" + name).slideUp(250, function() {
            $(this).remove();
          });
        }
      },
      timestamp : function() {
        return (new Date).getTime();
      }
    }
  });
})(jQuery);
ls = ls || {};
ls.msg = ls.notification = function(self) {
  this.options = {
    container_id : "ls-notifier",
    classes : {
      notification : "ls-notification",
      notice : "ls-notification--success",
      info : "ls-notification--info",
      error : "ls-notification--error"
    },
    duration : 3E3
  };
  /**
   * @param {string} data
   * @return {undefined}
   */
  this.init = function(data) {
    self.extend(this.options, data || {});
    self.extend(self.notifier.options, {
      core : this.options.container_id,
      box_class : this.options.classes.notification,
      notice_class : this.options.classes.success,
      error_class : this.options.classes.error,
      duration : this.options.duration
    });
  };
  /**
   * @param {string} type
   * @param {!Object} name
   * @param {!Object} key
   * @return {undefined}
   */
  this.show = function(type, name, key) {
    if (!type && !name) {
      ls.dev.log("\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0438\u043b\u0438 \u0442\u0435\u043a\u0441\u0442 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f");
      return;
    }
    key = typeof key === "undefined" ? "notice" : key;
    self.notifier.broadcast(type, name, this.options.classes[key]);
  };
  /** @type {function(string, !Object): undefined} */
  this.notice = this.success = function(type, name) {
    this.show(type, name, "notice");
  };
  /**
   * @param {string} type
   * @param {!Object} name
   * @return {undefined}
   */
  this.error = function(type, name) {
    this.show(type, name, "error");
  };
  /**
   * @param {undefined} tab
   * @param {undefined} error
   * @return {undefined}
   */
  this.info = function(tab, error) {
    this.show(tab, error, "info");
  };
  return this;
}.call(ls.notification || {}, jQuery);
$.widget("livestreet.lsConfirm", $.livestreet.lsComponent, {
  options : {
    message : null,
    onconfirm : null,
    oncancel : null
  },
  _create : function() {
    this._super();
    this._on({
      click : "_onClick"
    });
  },
  _onClick : function(event) {
    if (window.confirm(this.option("message"))) {
      if ($.isFunction(this.option("onconfirm"))) {
        this.option("onconfirm").call(this, event);
        event.preventDefault();
      }
    } else {
      if ($.isFunction(this.option("oncancel"))) {
        this.option("oncancel").call(this, event);
      }
      event.preventDefault();
    }
  }
});
(function($) {
  $.widget("livestreet.lsFavourite", $.livestreet.lsComponent, {
    options : {
      urls : {
        toggle : null
      },
      selectors : {
        toggle : ".js-favourite-toggle",
        count : ".js-favourite-count"
      },
      classes : {
        added : "ls-favourite--added",
        has_counter : "ls-favourite--has-counter"
      },
      params : {},
      i18n : {
        remove : "@favourite.remove",
        add : "@favourite.add"
      }
    },
    _create : function() {
      this._super();
      this._on({
        click : "toggle"
      });
    },
    toggle : function(type) {
      /** @type {boolean} */
      this.options.params.type = !this._hasClass("added");
      this._load("toggle", this.onToggleSuccess);
      type.stopPropagation();
    },
    onToggleSuccess : function(data) {
      var $formHeading = $('.ls-favourite[data-type="' + this.element.attr("data-type") + '"][data-param-i-target-id="' + this.element.attr("data-param-i-target-id") + '"]');
      this._removeClass("added");
      $formHeading.removeClass("ls-favourite--added");
      if (data.bState) {
        this._addClass("added");
        $formHeading.addClass("ls-favourite--added");
        this.element.attr("title", this._i18n("remove"));
      } else {
        this.element.attr("title", this._i18n("add"));
      }
      if (this.elements.count) {
        if (data.iCount > 0) {
          this._addClass("has_counter");
          this.elements.count.show().text(data.iCount);
          $formHeading.addClass("has_counter");
          $(".counter-number", $formHeading).text(data.iCount);
        } else {
          this._removeClass("has_counter");
          $formHeading.removeClass("has_counter");
          this.elements.count.show().text("");
        }
      }
      this._trigger("aftertogglesuccess", null, {
        context : this,
        response : data
      });
    }
  });
})(jQuery);
$.widget("livestreet.lsTooltip", {
  options : {
    target : null,
    position : {
      my : "center bottom-15",
      at : "center top",
      collision : "flipfit flip"
    },
    show : {
      effect : "fadeIn",
      duration : 200
    },
    hide : {
      effect : "fadeOut",
      duration : 200
    },
    trigger : "hover",
    classes : null,
    template : '<div class="ls-tooltip"><div class="ls-tooltip-title js-tooltip-title"></div><div class="ls-tooltip-content js-tooltip-content"></div></div>',
    reposition : null,
    selectors : {
      title : ".js-tooltip-title",
      content : ".js-tooltip-content"
    },
    useAttrTitle : true,
    ajax : {
      url : null,
      result : "sText",
      params : null
    }
  },
  _create : function() {
    this.options.target = this.element.data("tooltip-target") || this.options.target;
    this._target = this.options.target ? $(this.options.target) : $(this.options.template);
    this._targetTitle = this._target.find(this.options.selectors.title);
    this._targetContent = this._target.find(this.options.selectors.content);
    /** @type {boolean} */
    this.loading = false;
    this.state = this._state.HIDDEN;
    this.options.ajax.url = this.options.ajax.url || this.element.data("tooltip-url");
    if (this.options.classes) {
      this._target.addClass(this.options.classes);
    }
    if (this._targetTitle.length) {
      this.setTitle(this.element.data("tooltip-title"));
    }
    var value = this.element.attr("title");
    if (value && this.options.useAttrTitle) {
      this.setContent(value);
      this.element.removeAttr("title").data("tooltip-content", value);
    } else {
      this.setContent(this.element.data("tooltip-content"));
    }
    this.options.position.of = this.options.position.of || this.element;
    this.options.position.using = this.options.position.using || function(t, state) {
      ls.utils.removeClassByPrefix(this._target, "position-");
      this._target.addClass("position-y-" + state.vertical + " position-x-" + state.horizontal).css(t);
    }.bind(this);
    this._on(this.options.trigger == "click" ? {
      click : function(type) {
        this.toggle();
        type.preventDefault();
      }
    } : {
      mouseenter : "show",
      mouseleave : "hide"
    });
    this.window.on("resize scroll", function() {
      this._reposition(false);
    }.bind(this));
    if (this.options.trigger == "click") {
      this.document.on("click" + this.eventNamespace, function(event) {
        if (!this._target.is(event.target) && this._target.has(event.target).length === 0 && !this.element.is(event.target) && this.element.has(event.target).length === 0) {
          this.hide();
        }
      }.bind(this));
    }
  },
  toggle : function() {
    this[this._target.is(":visible") ? "hide" : "show"]();
  },
  show : function() {
    if (this.state == this._state.OPEN || this.state == this._state.OPENING || this.state == this._state.HIDING) {
      return false;
    }
    this._target.appendTo("body");
    if (this.options.ajax.url && !this.loading) {
      this._targetContent.empty().addClass(ls.options.classes.states.loading);
    }
    this.element.addClass(ls.options.classes.states.open);
    this.state = this._state.OPENING;
    this._reposition();
    this._show(this._target, this.options.show, function() {
      if (this.state == this._state.OPENING) {
        this.state = this._state.OPEN;
      }
    }.bind(this));
    if (this.options.ajax.url && !this.loading) {
      this.__load();
    }
    this._trigger("show", null, this);
  },
  hide : function() {
    if (this.state == this._state.HIDDEN || this.state == this._state.HIDING) {
      return false;
    }
    if (this.state == this._state.OPENING) {
      this._target.stop();
      if (this.options.show.delay) {
        this._target.hide();
        this._onHide();
        return true;
      }
    }
    this.state = this._state.HIDING;
    this._hide(this._target, this.options.hide, function() {
      this._onHide();
    }.bind(this));
  },
  _onHide : function() {
    this._target.detach();
    this.state = this._state.HIDDEN;
    this.element.removeClass(ls.options.classes.states.open);
    this._trigger("hide", null, this);
  },
  setTitle : function(value) {
    if (!value) {
      this._targetTitle.hide();
      return false;
    }
    this._targetTitle.html(value);
  },
  setContent : function(string) {
    this._target.find(this.options.selectors.content).html(string);
  },
  _reposition : function(step) {
    step = typeof step === "undefined" ? true : step;
    if (this.state == this._state.HIDDEN && !step) {
      return;
    }
    var condition = this._target.is(":visible");
    this._target.css(!condition ? {
      "display" : "block",
      "visibility" : "hidden"
    } : {}).position(this.options.position).css(!condition ? {
      "display" : "none",
      "visibility" : "visible"
    } : {});
    this._trigger("reposition", null, this);
  },
  __load : function() {
    var t = $.extend({}, this.options.ajax.params, ls.utils.getDataOptions(this.element, "param")) || {};
    this._targetContent.empty().addClass(ls.options.classes.states.loading);
    ls.ajax.load(this.options.ajax.url, t, function(msg) {
      this._targetContent.removeClass(ls.options.classes.states.loading).html(msg.bStateError ? "Error" : msg["sText"]);
      this._reposition();
      /** @type {boolean} */
      this.loading = false;
    }.bind(this), {
      error : function(canCreateDiscussions) {
        this._targetContent.removeClass(ls.options.classes.states.loading).html("Error");
        this._reposition();
        /** @type {boolean} */
        this.loading = false;
      }.bind(this)
    });
  },
  _state : {
    OPEN : "OPEN",
    OPENING : "OPENING",
    HIDDEN : "HIDDEN",
    HIDING : "HIDING"
  }
});
(function($) {
  $.widget("livestreet.lsVote", $.livestreet.lsComponent, {
    options : {
      urls : {
        vote : null,
        info : null
      },
      selectors : {
        item : ".js-vote-item",
        rating : ".js-vote-rating",
        rating_up : ".js-vote-rating-up",
        rating_down : ".js-vote-rating-down"
      },
      classes : {
        voted : "ls-vote--voted",
        not_voted : "ls-vote--not-voted",
        voted_up : "ls-vote--voted-up",
        voted_down : "ls-vote--voted-down",
        voted_zero : "ls-vote--voted-abstain",
        count_positive : "ls-vote--count-positive",
        count_negative : "ls-vote--count-negative",
        count_zero : "ls-vote--count-zero",
        rating_hidden : "ls-vote--rating-hidden"
      },
      params : {},
      tooltip_options : {}
    },
    _create : function() {
      this._super();
      this._on(this.elements.item, {
        click : function(type) {
          this.vote($(type.currentTarget).data("vote-value"));
          type.preventDefault();
        }
      });
    },
    vote : function(type) {
      var o = $('.ls-vote[data-type="' + this.element.attr("data-type") + '"][data-param-i-target-id="' + this.element.attr("data-param-i-target-id") + '"]');
      this.option("params.value", type);
      this._load("vote", function(valueObj) {
        if (isNaN(valueObj.iRating)) {
          return;
        }
        /** @type {number} */
        valueObj.iRating = parseFloat(valueObj.iRating);
        this._removeClass("count_negative count_positive count_zero rating_hidden not_voted ls-vote--voted ls-vote--voted-up ls-vote--voted-down");
        o.removeClass("ls-vote--count-negative ls-vote--count-positive ls-vote--count-zero ls-vote--rating-hidden ls-vote--not-voted ls-vote--voted  ls-vote--voted-up ls-vote--voted-down");
        if (!valueObj.iRemoved) {
          this._addClass("voted");
          this._addClass(type > 0 ? "voted_up" : type < 0 ? "voted_down" : "voted_zero");
          this._addClass(valueObj.iRating > 0 ? "count_positive" : valueObj.iRating < 0 ? "count_negative" : "count_zero");
          o.addClass("ls-vote--voted");
          o.addClass(type > 0 ? "ls-vote--voted-up" : type < 0 ? "ls-vote--voted-down" : "ls-vote--voted-zero");
          o.addClass(valueObj.iRating > 0 ? "ls-vote--count-positive" : valueObj.iRating < 0 ? "ls-vote--count-negative" : "ls-vote--count-zero");
        }
        this.elements.item.removeAttr("title");
        this.elements.rating_up.text(valueObj.iRatingUp);
        this.elements.rating_down.text(valueObj.iRatingDown);
        o.removeAttr("title");
        $(".js-vote-rating-up", o).text(valueObj.iRatingUp);
        $(".js-vote-rating-down", o).text(valueObj.iRatingDown);
      });
    }
  });
})(jQuery);
ls = ls || {};
ls.auth = function($) {
  /**
   * @return {undefined}
   */
  this.init = function() {
    $(".js-auth-login-form").on("submit", function(event) {
      if (jQuery._data(this[0], "events")["submit"]) {
        return;
      }
      ls.ajax.submit(aRouter.auth + "ajax-login", $(this), function(s) {
        if (s.sUrlRedirect) {
          window.location = s.sUrlRedirect;
        }
      });
      event.preventDefault();
    });
    $(".js-auth-registration-form").on("submit", function(event) {
      ls.ajax.submit(aRouter.auth + "ajax-register", $(this), function(s) {
        if (s.sUrlRedirect) {
          window.location = s.sUrlRedirect;
        }
      });
      event.preventDefault();
    });
    $(".js-auth-reset-form").on("submit", function(event) {
      ls.ajax.submit(aRouter.auth + "ajax-password-reset", $(this), function(s) {
        if (s.sUrlRedirect) {
          window.location = s.sUrlRedirect;
        }
      });
      event.preventDefault();
    });
    ls.ajax.form(aRouter.auth + "ajax-reactivation", ".js-form-reactivation", function(asin, i, canCreateDiscussions, html) {
      html.find("input").val("");
      ls.hook.run("ls_user_reactivation_after", [html, asin]);
    });
    $(".js-modal-toggle-registration").on("click", function(event) {
      $(".js-auth-tab-reg").lsTab("activate");
      $("#modal-login").lsModal("show");
      event.preventDefault();
    });
    $(".js-modal-toggle-login").on("click", function(event) {
      $(".js-auth-tab-login").lsTab("activate");
      $("#modal-login").lsModal("show");
      event.preventDefault();
    });
  };
  return this;
}.call(ls.auth || {}, jQuery);
(function($) {
  $.widget("livestreet.lsMedia", $.livestreet.lsComponent, {
    options : {
      editor : $(),
      urls : {
        insert : aRouter.ajax + "media/submit-insert/",
        photoset : aRouter.ajax + "media/submit-create-photoset",
        url_upload : aRouter.ajax + "media/upload-link/",
        url_insert : aRouter.ajax + "media/upload-insert/"
      },
      selectors : {
        nav : ".js-media-nav",
        uploader : ".js-media-uploader",
        block : ".js-media-info-block",
        blocks : ".js-media-uploader .js-media-info-block",
        insert_submit : ".js-media-insert-submit",
        photoset_submit : ".js-media-photoset-submit",
        url : {
          form : ".js-media-url-form",
          url : ".js-media-url-form-url",
          block_container : ".js-media-url-settings-blocks",
          blocks : ".js-media-url-settings-blocks .js-media-info-block",
          submit_upload : ".js-media-url-submit-upload",
          submit_insert : ".js-media-url-submit-insert",
          image_preview : ".js-media-url-image-preview"
        }
      },
      uploader_options : {},
      params : {}
    },
    _create : function() {
      this._super();
      if (!this.option("editor").length) {
        this.option("editor", $("#" + this.element.data("media-editor")));
      }
      this.elements.uploader.lsUploader($.extend({}, this.option("uploader_options"), {
        autoload : false,
        params : {
          security_ls_key : LIVESTREET_SECURITY_KEY
        },
        filebeforeactivate : this._onFileBeforeActivate.bind(this)
      }));
      this._list = this.elements.uploader.lsUploader("getElement", "list");
      this._originalTargetType = this.elements.uploader.lsUploader("option", "params.target_type");
      this.elements.nav.lsTabs({
        tabactivate : this._onTabActivate.bind(this)
      });
      this.element.lsModal({
        aftershow : this.reload.bind(this)
      });
      this._on(this.elements.insert_submit, {
        click : "_onInsertSubmit"
      });
      this._on(this.elements.photoset_submit, {
        click : "_onPhotosetSubmit"
      });
      this._on(this.elements.url.type, {
        click : "onUrlTypeChange"
      });
      this._on(this.elements.url.url, {
        keyup : "onUrlChange",
        change : "onUrlChange"
      });
      this._on(this.elements.url.submit_upload, {
        click : this.urlInsert.bind(this, true)
      });
      this._on(this.elements.url.submit_insert, {
        click : this.urlInsert.bind(this, false)
      });
    },
    _onInsertSubmit : function(canCreateDiscussions) {
      this.insertSelectedFiles("insert", this.getSettings());
    },
    _onPhotosetSubmit : function(canCreateDiscussions) {
      this.insertSelectedFiles("photoset", this.getSettings());
    },
    _onFileBeforeActivate : function(isSlidingUp, arrowIcon) {
      this.activateInfoBlock(arrowIcon.element);
    },
    _onTabActivate : function(letter, e) {
      var type = e.element.data("media-name");
      this.moveUploader(e);
      if (type === "photoset") {
        this._list.lsUploaderFileList("option", "multiselect_ctrl", false);
        this.elements.uploader.lsUploader("filterFilesByType", ["1"]);
      }
      if (type === "url") {
        this.disableUrlButtons(!this.elements.url.url.val());
      }
    },
    moveUploader : function(e) {
      this.resetUploader();
      if (e.element.hasClass("js-tab-show-gallery")) {
        this.elements.uploader.lsUploader("resetFilter").lsUploader("unselectAll").lsUploader("setTargetTypeFilter", "uploaded").appendTo(this.getPaneContent(e));
      }
    },
    resetUploader : function() {
      this._list.lsUploaderFileList("option", "params.target_type", this._originalTargetType);
      this._list.lsUploaderFileList("option", "multiselect_ctrl", true);
    },
    getPaneContent : function(tree) {
      return tree.getPane().find(".js-media-pane-content");
    },
    show : function() {
      this.element.lsModal("show");
    },
    hide : function() {
      this.element.lsModal("hide");
    },
    getSettings : function() {
      return this.elements.blocks.filter(":visible").find("form").serializeJSON();
    },
    insertSelectedFiles : function(event, torrentGroup) {
      this.insertFiles(event, torrentGroup, this.elements.uploader.lsUploader("getSelectedFiles"));
    },
    insertFiles : function(type, options, files) {
      if (!files.length) {
        return;
      }
      var found = $.map(files, function(t) {
        return $(t).lsUploaderFile("getProperty", "id");
      });
      this._load(type, $.extend(true, {}, {
        ids : found
      }, options || {}), function(canCreateDiscussions) {
        this.option("editor").lsEditor("insert", canCreateDiscussions.sTextResult);
        this.element.lsModal("hide");
      });
    },
    activateInfoBlock : function(t) {
      this.elements.blocks.hide();
      this.elements.blocks.filter("[data-type=" + this.getActiveTabName() + "]").filter("[data-filetype=" + t.lsUploaderFile("getProperty", "type") + "]").show();
      if (this.getActiveTabName() == "insert" && t.lsUploaderFile("getProperty", "type") == "1") {
        var filteredView = this.elements.blocks.filter(".js-media-info-block-image-options");
        var ulObj = filteredView.find("select[name=size]");
        ulObj.find("option:not([value=original])").remove();
        ulObj.append($.map(t.data("mediaImageSizes"), function(options, i) {
          var s = options.h || parseInt(options.w * t.lsUploaderFile("getProperty", "height") / t.lsUploaderFile("getProperty", "width"));
          return '<option value="' + options.w + "x" + (options.h ? options.h : "") + (options.crop ? "crop" : "") + '">' + options.w + " \u00d7 " + s + "</option>";
        }).join(""));
      }
    },
    reload : function() {
      this.elements.uploader.lsUploader("reload");
    },
    getActiveTab : function() {
      return this.elements.nav.lsTabs("getActiveTab");
    },
    getActiveTabName : function() {
      return this.getActiveTab().data("media-name");
    },
    onUrlTypeChange : function(canCreateDiscussions) {
      this.elements.url.blocks.hide();
      this.elements.url.blocks.filter("[data-filetype=" + this.elements.url.type.val() + "]").show();
      this.elements.url.url.val("");
      this.elements.url.image_preview.hide().empty();
    },
    onUrlChange : function(event) {
      var policyAuth = this;
      var testFilenames = this.elements.url.url.val();
      this.disableUrlButtons(!testFilenames);
      $("<img />", {
        src : testFilenames,
        style : "max-width: 50%",
        error : function() {
          policyAuth.elements.url.image_preview.hide().empty();
        },
        load : function() {
          policyAuth.elements.url.image_preview.show().html($(this));
        }
      });
    },
    disableUrlButtons : function(e) {
      this.elements.url.submit_insert.prop("disabled", e);
      this.elements.url.submit_upload.prop("disabled", e);
    },
    urlInsert : function(url) {
      url = url || false;
      var i = $.extend({}, {
        upload : url
      }, this.elements.url.form.serializeJSON(), this.elements.url.blocks.filter(":visible").find("form").serializeJSON(), this.elements.uploader.lsUploader("option", "params"));
      this.disableUrlButtons(true);
      this._load("url_upload", i, function(canCreateDiscussions) {
        this.option("editor").lsEditor("insert", canCreateDiscussions.sText);
        this.element.lsModal("hide");
        this.reload();
      }, {
        validate : false,
        submitButton : this.elements.url[url ? "submit_upload" : "submit_insert"],
        onComplete : function() {
          this.disableUrlButtons(false);
        }.bind(this)
      });
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsPhoto", $.livestreet.lsComponent, {
    options : {
      urls : {
        upload : null,
        remove : null,
        crop_photo : null,
        crop_avatar : null,
        save_photo : null,
        save_avatar : null,
        cancel_photo : null
      },
      use_avatar : false,
      crop_photo : {},
      crop_avatar : {
        aspectRatio : 1
      },
      selectors : {
        image : ".js-photo-image",
        action_upload : ".js-photo-actions-upload",
        action_upload_label : ".js-photo-actions-upload-label",
        action_upload_input : ".js-photo-actions-upload-input",
        action_crop_avatar : ".js-photo-actions-crop-avatar",
        action_remove : ".js-photo-actions-remove"
      },
      classes : {
        nophoto : "ls-photo--nophoto"
      },
      params : {}
    },
    _create : function() {
      this._super();
      var media = this;
      this.option("params.target_id", this.element.data("target-id"));
      this.elements.action_upload_input.on("change" + this.eventNamespace, function() {
        media.upload($(this));
      });
      this._on(this.elements.action_remove, {
        click : "remove"
      });
      if (this.option("use_avatar")) {
        this._on(this.elements.action_crop_avatar, {
          click : "cropAvatar"
        });
      }
    },
    remove : function() {
      this._load("remove", function(profile) {
        if (!confirm("\u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0430\u0432\u0430\u0442\u0430\u0440?")) {
          return false;
        }
        this._addClass("nophoto");
        this.elements.image.attr("src", profile.photo);
        this.elements.action_upload_label.text(profile.upload_text);
        if (this.option("use_avatar")) {
          this._trigger("changeavatar", null, [this, profile.avatars]);
        }
      });
    },
    upload : function(file) {
      var a = $('<form method="post" enctype="multipart/form-data"></form>').hide().appendTo("body");
      file.clone(true).insertAfter(file);
      file.appendTo(a);
      $('<input type="hidden" name="target_id" value="' + this.option("params.target_id") + '" >').appendTo(a);
      this._submit("upload", a, function(t) {
        this.cropPhoto(t);
        a.remove();
      }, {
        lock : false
      });
    },
    cropPhoto : function(callback) {
      ls.modal.load(this.option("urls.crop_photo"), $.extend({}, this.option("params"), callback), {
        aftershow : function(canCreateDiscussions, arrowIcon) {
          this._initPhotoModal(arrowIcon.element, callback);
        }.bind(this),
        afterhide : function() {
          this._load("cancel_photo");
        }.bind(this)
      });
    },
    _initPhotoModal : function(viewInstance, params) {
      viewInstance.lsCropModal($.extend({
        urls : {
          submit : this.option("urls.save_photo")
        },
        params : $.extend({}, this.option("params"), params),
        cropOptions : this.option("crop_photo")
      }));
      viewInstance.on("lscropmodalsubmitted" + this.eventNamespace, function(canCreateDiscussions, data) {
        this._removeClass("nophoto");
        this.elements.image.attr("src", data.response.photo + "?" + Math.random());
        this.elements.action_upload_label.text(data.response.upload_text);
        if (this.option("use_avatar")) {
          setTimeout(this.cropAvatar.bind(this), 300);
        }
      }.bind(this));
    },
    cropAvatar : function() {
      var options = {
        path : this.elements.image.attr("src"),
        original_width : this.elements.image[0].naturalWidth,
        original_height : this.elements.image[0].naturalHeight,
        width : this.elements.image[0].naturalWidth,
        height : this.elements.image[0].naturalHeight
      };
      ls.modal.load(this.option("urls.crop_avatar"), $.extend({}, this.option("params"), options), {
        aftershow : function(canCreateDiscussions, arrowIcon) {
          this._initAvatarModal(arrowIcon.element, options);
        }.bind(this)
      });
    },
    _initAvatarModal : function(viewInstance, params) {
      viewInstance.lsCropModal($.extend({
        urls : {
          submit : this.option("urls.save_avatar")
        },
        params : $.extend({}, this.option("params"), params),
        cropOptions : this.option("crop_avatar")
      }));
      viewInstance.on("lscropmodalsubmitted" + this.eventNamespace, function(canCreateDiscussions, result) {
        this._trigger("changeavatar", null, [this, result.response.avatars]);
      }.bind(this));
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsNote", $.livestreet.lsComponent, {
    options : {
      urls : {
        save : null,
        remove : null
      },
      selectors : {
        body : ".js-note-body",
        text : ".js-note-text",
        add : ".js-note-add",
        actions : ".js-note-actions",
        actions_edit : ".js-note-actions-edit",
        actions_remove : ".js-note-actions-remove",
        form : ".js-note-form",
        form_text : ".js-note-form-text",
        form_cancel : ".js-note-form-cancel"
      },
      params : {}
    },
    _create : function() {
      this._super();
      this._on(this.elements.add, {
        click : "onShowFormClick"
      });
      this._on(this.elements.actions_edit, {
        click : "onShowFormClick"
      });
      this._on(this.elements.form_cancel, {
        click : "hideForm"
      });
      this.elements.actions_remove.on("click" + this.eventNamespace, function(event) {
        this.remove();
        event.preventDefault();
      }.bind(this));
      this.elements.form.on("submit" + this.eventNamespace, function(event) {
        this.save();
        event.preventDefault();
      }.bind(this));
    },
    onShowFormClick : function(event) {
      event.preventDefault();
      this.showForm();
    },
    showForm : function(name) {
      this.elements.body.hide();
      this.elements.form.show();
      this.elements.form_text.val($.trim(this.elements.text.html())).select();
    },
    hideForm : function() {
      this.elements.body.show();
      this.elements.form.hide();
    },
    save : function() {
      this._setParam("text", this.elements.form_text.val());
      this._submit("save", this.elements.form, function(getty) {
        this.elements.text.html(getty.sText).show();
        this.elements.add.hide();
        this.elements.actions.show();
        this.hideForm();
      });
    },
    remove : function() {
      this._load("remove", function() {
        this.elements.text.empty().hide();
        this.elements.add.show();
        this.elements.actions.hide();
      });
    }
  });
})(jQuery);
$.widget("livestreet.lsEditor", {
  options : {
    type : null,
    media : null,
    media_options : {},
    set : "default",
    submitted : null
  },
  _create : function() {
    /** @type {string} */
    this.strategy = this.element.data("editor-type") == "visual" ? "lsEditorVisual" : "lsEditorMarkup";
    this.option("set", this.element.data("editor-set") || this.option("set"));
    this.option("media", $("#" + this.element.data("editor-media") || this.option("media")));
    this.options.media_options.editor = this.element;
    this.option("media").lsMedia(this.option("media_options"));
    this.element[this.strategy](this.options);
  },
  onShow : function() {
    this.element[this.strategy]("onShow");
  },
  insert : function(name) {
    this.element[this.strategy]("insert", name);
  },
  getText : function() {
    return this.element[this.strategy]("getText");
  },
  setText : function(name) {
    this.element[this.strategy]("setText", name);
  },
  focus : function() {
    this.element[this.strategy]("focus");
  },
  showMedia : function() {
    this.element[this.strategy]("showMedia");
  }
});
$.widget("livestreet.lsEditorMarkup", {
  options : {
    media : null,
    sets : {
      default : {
        onShiftEnter : {
          keepDefault : false,
          replaceWith : "<br />\n"
        },
        onCtrlEnter : {
          keepDefault : false,
          openWith : "\n<p>",
          closeWith : "</p>"
        },
        onTab : {
          keepDefault : false,
          replaceWith : "    "
        },
        markupSet : [{
          name : "H4",
          className : "editor-h4",
          openWith : "<h4>",
          closeWith : "</h4>"
        }, {
          name : "H5",
          className : "editor-h5",
          openWith : "<h5>",
          closeWith : "</h5>"
        }, {
          name : "H6",
          className : "editor-h6",
          openWith : "<h6>",
          closeWith : "</h6>"
        }, {
          separator : "---------------"
        }, {
          name : ls.lang.get("editor.markup.toolbar.b"),
          className : "editor-bold",
          key : "B",
          openWith : "(!(<strong>|!|<b>)!)",
          closeWith : "(!(</strong>|!|</b>)!)"
        }, {
          name : ls.lang.get("editor.markup.toolbar.i"),
          className : "editor-italic",
          key : "I",
          openWith : "(!(<em>|!|<i>)!)",
          closeWith : "(!(</em>|!|</i>)!)"
        }, {
          name : ls.lang.get("editor.markup.toolbar.s"),
          className : "editor-stroke",
          key : "S",
          openWith : "<s>",
          closeWith : "</s>"
        }, {
          name : ls.lang.get("editor.markup.toolbar.u"),
          className : "editor-underline",
          key : "U",
          openWith : "<u>",
          closeWith : "</u>"
        }, {
          name : ls.lang.get("editor.markup.toolbar.quote"),
          className : "editor-quote",
          key : "Q",
          replaceWith : function(value) {
            if (value.selectionOuter) {
              return "<blockquote>" + value.selectionOuter + "</blockquote>";
            } else {
              if (value.selection) {
                return "<blockquote>" + value.selection + "</blockquote>";
              } else {
                return "<blockquote></blockquote>";
              }
            }
          }
        }, {
          name : ls.lang.get("editor.markup.toolbar.code"),
          className : "editor-code",
          openWith : "<(!(code|!|codeline)!)>",
          closeWith : "</(!(code|!|codeline)!)>"
        }, {
          separator : "---------------"
        }, {
          name : ls.lang.get("editor.markup.toolbar.list_ul"),
          className : "editor-ul",
          openWith : "    <li>",
          closeWith : "</li>",
          multiline : true,
          openBlockWith : "<ul>\n",
          closeBlockWith : "\n</ul>"
        }, {
          name : ls.lang.get("editor.markup.toolbar.list_ol"),
          className : "editor-ol",
          openWith : "    <li>",
          closeWith : "</li>",
          multiline : true,
          openBlockWith : "<ol>\n",
          closeBlockWith : "\n</ol>"
        }, {
          name : ls.lang.get("editor.markup.toolbar.list_li"),
          className : "editor-li",
          openWith : "<li>",
          closeWith : "</li>"
        }, {
          separator : "---------------"
        }, {
          name : ls.lang.get("editor.markup.toolbar.image"),
          className : "editor-picture",
          key : "P",
          beforeInsert : function(type) {
            $(type.textarea).lsEditor("showMedia");
          }
        }, {
          name : ls.lang.get("editor.markup.toolbar.video"),
          className : "editor-video",
          replaceWith : "<video>[![" + ls.lang.get("editor.markup.toolbar.video_promt") + ":!:http://]!]</video>"
        }, {
          name : ls.lang.get("editor.markup.toolbar.url"),
          className : "editor-link",
          key : "L",
          openWith : '<a href="[![' + ls.lang.get("editor.markup.toolbar.url_promt") + ':!:http://]!]"(!( title="[![Title]!]")!)>',
          closeWith : "</a>",
          placeHolder : "Your text to link..."
        }, {
          name : ls.lang.get("editor.markup.toolbar.user"),
          className : "editor-user",
          replaceWith : '<ls user="[![' + ls.lang.get("editor.markup.toolbar.user_promt") + ']!]" />'
        }, {
          separator : "---------------"
        }, {
          name : ls.lang.get("editor.markup.toolbar.clear_tags"),
          className : "editor-clean",
          replaceWith : function(value) {
            return value.selection.replace(/<(.*?)>/g, "");
          }
        }, {
          name : ls.lang.get("editor.markup.toolbar.cut"),
          className : "editor-cut",
          replaceWith : function(value) {
            if (value.selection) {
              return '<cut name="' + value.selection + '">';
            } else {
              return "<cut>";
            }
          }
        }]
      },
      light : {
        onShiftEnter : {
          keepDefault : false,
          replaceWith : "<br />\n"
        },
        onTab : {
          keepDefault : false,
          replaceWith : "    "
        },
        markupSet : [{
          name : ls.lang.get("editor.markup.toolbar.b"),
          className : "editor-bold",
          key : "B",
          openWith : "(!(<strong>|!|<b>)!)",
          closeWith : "(!(</strong>|!|</b>)!)"
        }, {
          name : ls.lang.get("editor.markup.toolbar.i"),
          className : "editor-italic",
          key : "I",
          openWith : "(!(<em>|!|<i>)!)",
          closeWith : "(!(</em>|!|</i>)!)"
        }, {
          name : ls.lang.get("editor.markup.toolbar.s"),
          className : "editor-stroke",
          key : "S",
          openWith : "<s>",
          closeWith : "</s>"
        }, {
          name : ls.lang.get("editor.markup.toolbar.u"),
          className : "editor-underline",
          key : "U",
          openWith : "<u>",
          closeWith : "</u>"
        }, {
          separator : "---------------"
        }, {
          name : ls.lang.get("editor.markup.toolbar.quote"),
          className : "editor-quote",
          key : "Q",
          replaceWith : function(value) {
            if (value.selectionOuter) {
              return "<blockquote>" + value.selectionOuter + "</blockquote>";
            } else {
              if (value.selection) {
                return "<blockquote>" + value.selection + "</blockquote>";
              } else {
                return "<blockquote></blockquote>";
              }
            }
          }
        }, {
          name : ls.lang.get("editor.markup.toolbar.code"),
          className : "editor-code",
          openWith : "<(!(code|!|codeline)!)>",
          closeWith : "</(!(code|!|codeline)!)>"
        }, {
          name : ls.lang.get("editor.markup.toolbar.image"),
          className : "editor-picture",
          key : "P",
          beforeInsert : function(type) {
            $(type.textarea).lsEditor("showMedia");
          }
        }, {
          name : ls.lang.get("editor.markup.toolbar.url"),
          className : "editor-link",
          key : "L",
          openWith : '<a href="[![' + ls.lang.get("editor.markup.toolbar.url_promt") + ':!:http://]!]"(!( title="[![Title]!]")!)>',
          closeWith : "</a>",
          placeHolder : "Your text to link..."
        }, {
          name : ls.lang.get("editor.markup.toolbar.user"),
          className : "editor-user",
          replaceWith : '<ls user="[![' + ls.lang.get("editor.markup.toolbar.user_promt") + ']!]" />'
        }, {
          separator : "---------------"
        }, {
          name : ls.lang.get("editor.markup.toolbar.clear_tags"),
          className : "editor-clean",
          replaceWith : function(value) {
            return value.selection.replace(/<(.*?)>/g, "");
          }
        }]
      },
      empty : {
        onShiftEnter : {
          keepDefault : false,
          replaceWith : "<br />\n"
        },
        onTab : {
          keepDefault : false,
          replaceWith : "    "
        },
        markupSet : []
      }
    }
  },
  _create : function() {
    var mqdb = this;
    this.element.markItUp(this.option("sets." + this.option("set")));
    var $sharepreview = $(".js-editor-help[data-form-id=" + this.element.attr("id") + "]");
    var $dots = $sharepreview.find(".js-editor-help-toggle");
    var projectsListView = $sharepreview.find(".js-editor-help-body");
    $dots.on("click" + this.eventNamespace, function(event) {
      projectsListView.toggle();
      event.preventDefault();
    });
    $(".js-tags-help-link").click(function() {
      var out = $(this);
      mqdb.insert(out.data("insert") || out.text());
      return false;
    });
    this.element.on("keyup", null, "ctrl+return", function() {
      this._trigger("submitted");
    }.bind(this));
  },
  onShow : function() {
    return;
  },
  insert : function(text) {
    $.markItUp({
      target : this.element,
      replaceWith : text
    });
  },
  getText : function() {
    return this.element.val();
  },
  setText : function(text) {
    return this.element.val(text);
  },
  focus : function() {
    this.element.focus();
  },
  showMedia : function(name) {
    this.option("media").lsMedia("show");
  }
});
(function($) {
  $.widget("livestreet.lsEditorVisual", {
    options : {
      set : "default",
      sets : {
        common : {
          language : LANGUAGE,
          plugins : "media table fullscreen autolink link pagebreak code autoresize livestreet paste spoiler",
          paste_as_text : true,
          skin : "livestreet",
          menubar : false,
          statusbar : false,
          pagebreak_separator : "<cut>",
          forced_root_block : false,
          extended_valid_elements : "ls[user]",
          custom_elements : "~ls",
          short_ended_elements : "ls img br hr param",
          relative_urls : false,
          remove_script_host : false,
          autoresize_max_height : 500,
          style_formats : [{
            title : "Headings",
            items : [{
              title : "Heading 4",
              format : "h4"
            }, {
              title : "Heading 5",
              format : "h5"
            }, {
              title : "Heading 6",
              format : "h6"
            }]
          }, {
            title : "Inline",
            items : [{
              title : "Bold",
              icon : "bold",
              format : "bold"
            }, {
              title : "Italic",
              icon : "italic",
              format : "italic"
            }, {
              title : "Underline",
              icon : "underline",
              format : "underline"
            }, {
              title : "Strikethrough",
              icon : "strikethrough",
              format : "strikethrough"
            }, {
              title : "Superscript",
              icon : "superscript",
              format : "superscript"
            }, {
              title : "Subscript",
              icon : "subscript",
              format : "subscript"
            }]
          }, {
            title : "Blocks",
            items : [{
              title : "Paragraph",
              format : "p"
            }, {
              title : "Blockquote",
              format : "blockquote"
            }, {
              title : "Code",
              format : "code"
            }, {
              title : "Pre",
              format : "pre"
            }]
          }, {
            title : "Alignment",
            items : [{
              title : "Left",
              icon : "alignleft",
              format : "alignleft"
            }, {
              title : "Center",
              icon : "aligncenter",
              format : "aligncenter"
            }, {
              title : "Right",
              icon : "alignright",
              format : "alignright"
            }, {
              title : "Justify",
              icon : "alignjustify",
              format : "alignjustify"
            }]
          }]
        },
        default : {
          toolbar : "styleselect ls-pre ls-code | bold italic strikethrough underline blockquote table | bullist numlist | link media ls-media ls-user | lsuser removeformat pagebreak code fullscreen | spoiler"
        },
        light : {
          toolbar : "styleselect ls-pre ls-code | bold italic strikethrough underline blockquote | bullist numlist | removeformat code | spoiler"
        }
      }
    },
    _create : function() {
      this.__init();
    },
    __init : function() {
      this.element.tinymce($.extend({
        setup : function(parentTarget) {
          parentTarget.on("keydown", function(event) {
            if (event.ctrlKey && event.keyCode == 13) {
              this._trigger("submitted");
              event.preventDefault();
            }
          }.bind(this));
        }.bind(this)
      }, this.option("sets.common"), this.option("sets." + this.option("set"))));
    },
    onShow : function() {
      this.element.tinymce().destroy();
      this.__init();
    },
    insert : function(data) {
      this.element.tinymce().insertContent(data);
    },
    getText : function() {
      this.element.tinymce().getContent();
    },
    setText : function(value) {
      this.element.tinymce().setContent(value);
    },
    focus : function() {
      this.element.tinymce().focus();
    },
    showMedia : function(name) {
      this.option("media").lsMedia("show");
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsCommentsToolbar", $.livestreet.lsComponent, {
    options : {
      comments : ".js-comments",
      selectors : {
        update : ".js-toolbar-comments-update",
        counter : ".js-toolbar-comments-count",
        icon : ".js-toolbar-comments-update .fa"
      },
      classes : {
        active : "active",
        "fa-spin" : "fa-spin"
      }
    },
    _create : function() {
      this._super();
      this.options.comments = typeof target === "string" ? $(this.options.comments) : this.options.comments;
      this.updateCounter();
      this._on(this.elements.update, {
        click : "update"
      });
      this._on(this.elements.counter, {
        click : "scroll"
      });
    },
    updateCounter : function(json) {
      json = typeof json === "undefined" ? this.options.comments.lsComments("getCommentsNew").length : json;
      if (json) {
        this.showCounter();
        this.elements.counter.text(json);
      } else {
        this.hideCounter();
      }
    },
    update : function() {
      this._addClass(this.elements.update, "active");
      this._addClass(this.elements.icon, "fa-spin");
      this.options.comments.lsComments("load", false, false, function() {
        this.updateCounter();
        this._removeClass(this.elements.update, "active");
        this._removeClass(this.elements.icon, "fa-spin");
      }.bind(this));
    },
    showCounter : function() {
      if (this.elements.counter.is(":visible")) {
        return;
      }
      this.elements.counter.show();
    },
    hideCounter : function() {
      this.elements.counter.hide();
    },
    scroll : function() {
      var $toolbarItems = this.options.comments.lsComments("getCommentsNew");
      var section_fragment_1 = $toolbarItems.eq(0);
      if (!$toolbarItems.length) {
        return;
      }
      if (!section_fragment_1.is(":visible")) {
        this.options.comments.lsComments("unfoldAll");
      }
      this.updateCounter($toolbarItems.length - 1);
      section_fragment_1.lsComment("notNew");
      this.options.comments.lsComments("scrollToComment", section_fragment_1);
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsCommentForm", $.livestreet.lsComponent, {
    options : {
      comments : $(),
      urls : {
        text : null,
        add : null,
        update : null
      },
      selectors : {
        text : ".js-comment-form-text",
        submit : ".js-comment-form-submit",
        show_preview : ".js-comment-form-preview",
        update_submit : ".js-comment-form-update-submit",
        cancel : ".js-comment-form-update-cancel",
        comment_id : ".js-comment-form-id",
        spoiler : ".js-comment-form-spoiler"
      },
      classes : {
        locked : "ls-comment-form--locked"
      },
      html : {
        preview : '<div class="ls-comment-preview ls-text"></div>'
      },
      params : {}
    },
    _create : function() {
      this._super();
      /** @type {number} */
      this._targetId = 0;
      /** @type {boolean} */
      this._locked = false;
      this.setModeAdd();
      this._on({
        submit : "submit"
      });
      this._on(this.elements.cancel, {
        click : "hide"
      });
      this._on(this.elements.show_preview, {
        click : "previewShow"
      });
    },
    submit : function(type) {
      type.preventDefault();
      var e = this.element.serializeJSON();
      this.lock();
      this[this.getMode() === this.MODE.ADD ? "add" : "update"](e);
    },
    add : function(type) {
      this._load("add", type, "onAdd", {
        onComplete : this.unlock.bind(this)
      });
    },
    update : function(id) {
      this.emptyText();
      this._load("update", id, "onUpdate", {
        onComplete : this.unlock.bind(this)
      });
    },
    onAdd : function(childHeader) {
      this.emptyText();
      this.option("comments").lsComments("load", childHeader.sCommentId, false);
      $(".js-comment-reply-root").show();
      $(".js-comments .ls-comment-preview").remove();
    },
    onUpdate : function(data) {
      var NumberFce = this.option("comments").lsComments("getCommentById", this.getTargetId());
      var s = this.option("comments").lsComments("initComments", $($.trim(data.html)));
      this.option("comments").lsComments("removeCommentById", this.getTargetId()).lsComments("addComments", s);
      NumberFce.replaceWith(s);
      this.hide();
      this.emptyText();
      this.option("comments").lsComments("scrollToComment", s);
    },
    loadCommentText : function() {
      this._load("text", {
        comment_id : this.getTargetId()
      }, function(restrictions) {
        this.setText(restrictions.text);
        this.unlock();
        this.elements.text.focus();
      });
    },
    emptyText : function() {
      this.setText("");
    },
    getText : function() {
      return this.elements.text.val();
    },
    setText : function(value) {
      this.elements.text.val(value);
    },
    toggle : function(type, name, data) {
      if (this.getTargetId() === type && this.element.is(":visible")) {
        if (name && this.getMode() === this.MODE.ADD || !name && this.getMode() === this.MODE.EDIT) {
          this[name ? "setModeEdit" : "setModeAdd"]();
        } else {
          if (!this.isLocked()) {
            this.hide();
          }
        }
      } else {
        this.show(type, name, data);
      }
    },
    show : function(type, name, data) {
      this.setTargetId(type);
      this[name ? "setModeEdit" : "setModeAdd"]();
      var t = type ? this.option("comments").lsComments("getCommentById", type) : this.option("comments").lsComments("getElement", "reply_root");
      this.element.insertAfter(t).show();
      if (data) {
        this.elements.text.focus();
      }
    },
    hide : function() {
      if (this.getMode() === this.MODE.EDIT) {
        this.emptyText();
      }
      this.element.hide();
      this.previewHide();
    },
    lock : function() {
      /** @type {boolean} */
      this._locked = true;
      this._addClass("locked");
      ls.utils.formLock(this.element);
    },
    unlock : function() {
      /** @type {boolean} */
      this._locked = false;
      this._removeClass("locked");
      ls.utils.formUnlock(this.element);
    },
    isLocked : function() {
      return this._locked;
    },
    previewShow : function() {
      if (!this.elements.text.val()) {
        return;
      }
      this.previewHide();
      this._preview = $(this.option("html.preview"));
      this.element.before(this._preview);
      ls.utils.textPreview(this.elements.text, this._preview, false);
    },
    previewHide : function() {
      if (!this._preview) {
        return;
      }
      this._preview.remove();
      /** @type {null} */
      this._preview = null;
    },
    setModeAdd : function() {
      if (this.getMode() === this.MODE.EDIT) {
        this.emptyText();
      }
      this.setMode(this.MODE.ADD);
      this.elements.update_submit.hide();
      this.elements.submit.show();
    },
    setModeEdit : function() {
      this.setMode(this.MODE.EDIT);
      this.elements.text.height(20);
      $(this.elements.text).closest("form").find($(".js-comment-form-preview")).show();
      this.elements.update_submit.show();
      this.elements.submit.hide();
      this.lock();
      this.loadCommentText();
      setTimeout(function() {
        $(".js-comment-form .js-comment-form-text").height($(".js-comment-form .js-comment-form-text")[0].scrollHeight);
      }, 500);
    },
    getMode : function() {
      return this._mode;
    },
    setMode : function(mode) {
      /** @type {string} */
      this._mode = mode;
    },
    getTargetId : function() {
      return this._targetId;
    },
    setTargetId : function(id) {
      this.elements.comment_id.val(id);
      /** @type {string} */
      this._targetId = id;
    },
    MODE : {
      EDIT : "EDIT",
      ADD : "ADD"
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsComment", $.livestreet.lsComponent, {
    options : {
      comments : $(),
      form : $(),
      folding : true,
      urls : {
        vote : aRouter.ajax + "vote/comment/",
        favourite : aRouter.ajax + "favourite/comment/",
        toggle : aRouter.ajax + "comment/delete/"
      },
      selectors : {
        wrapper : ".js-comment-wrapper",
        vote : ".js-vote-comment",
        favourite : ".js-favourite-comment",
        reply : ".js-comment-reply",
        fold : ".js-comment-fold",
        remove : ".js-comment-remove",
        edit : ".js-comment-update",
        update_timer : ".js-comment-update-timer",
        scroll_to_child : ".js-comment-scroll-to-child",
        scroll_to_parent : ".js-comment-scroll-to-parent"
      },
      classes : {
        folded : "ls-comment--folded",
        current : "ls-comment--current",
        new : "ls-comment--new",
        deleted : "ls-comment--deleted",
        self : "ls-comment--self"
      },
      params : {},
      i18n : {
        fold : "@comments.folding.fold",
        unfold : "@comments.folding.unfold"
      }
    },
    _create : function() {
      this._super();
      this._id = this.element.data("id");
      this._parentId = this.element.data("parent-id");
      /** @type {null} */
      this._parent = null;
      /** @type {null} */
      this._scrollChild = null;
      this._countdown = this.elements.update_timer.data("seconds");
      this.elements.vote.lsVote({
        urls : {
          vote : this.option("urls.vote")
        }
      });
      this.elements.favourite.lsFavourite({
        urls : {
          toggle : this.option("urls.favourite")
        }
      });
      if (this.options.folding) {
        if (this.hasChildren()) {
          this.elements.fold.show();
        }
        this.elements.fold.on("click" + this.eventNamespace, this.foldToggle.bind(this));
      }
      this.elements.scroll_to_parent.on("click" + this.eventNamespace, this.scrollToParent.bind(this));
      this.elements.reply.on("click" + this.eventNamespace, this.reply.bind(this));
      this.elements.remove.on("click" + this.eventNamespace, this.toggle.bind(this));
      this.elements.edit.on("click" + this.eventNamespace, this.edit.bind(this));
      if (this._countdown) {
        this.updateTimer();
        this.elements.update_timer.everyTime(1000, this.updateTimer.bind(this));
      }
    },
    updateTimer : function() {
      if (this._countdown--) {
        this.elements.update_timer.text(ls.utils.timeRemaining(this._countdown));
      } else {
        this.elements.update_timer.stopTime();
        this.elements.edit.remove();
      }
    },
    scrollToParent : function() {
      this.getParent().lsComment("setScrollChild", this.element);
      this.option("comments").lsComments("scrollToComment", this.getParent());
    },
    scrollToChild : function() {
      this.option("comments").lsComments("scrollToComment", this.getScrollChild());
      this.setScrollChild(null);
    },
    edit : function(event) {
      event.preventDefault();
      this.option("comments").lsComments("getForm").lsCommentForm("toggle", this.getId(), true, true);
      $(".js-comment-reply-root").show();
    },
    reply : function(event) {
      event.preventDefault();
      this.option("comments").lsComments("getForm").lsCommentForm("toggle", this.getId(), false, true);
      $(".js-comment-form .text-area").focus();
      $(".js-comment-reply-root").show();
      $(".js-comment-form .text-area").attr("placeholder", "\u0412\u0430\u0448 \u043e\u0442\u0432\u0435\u0442...");
    },
    toggle : function(type) {
      type.preventDefault();
      this._load("toggle", {
        comment_id : this.getId()
      }, function(t) {
        this._removeClass("self new deleted current");
        if (t.state) {
          this._addClass("deleted");
        }
        this.elements.remove.text(t.toggle_text);
      });
    },
    markAsCurrent : function() {
      this._addClass("current");
    },
    notCurrent : function() {
      this._removeClass("current");
      this.setScrollChild(null);
    },
    isCurrent : function() {
      return this._hasClass("current");
    },
    markAsNew : function() {
      this._addClass("new");
    },
    notNew : function() {
      this._removeClass("new");
    },
    isNew : function() {
      return this._hasClass("new");
    },
    foldToggle : function(event) {
      event.preventDefault();
      this[this._hasClass("folded") ? "unfold" : "fold"]();
    },
    fold : function() {
      this._addClass("folded");
      this.element.nextAll(this.options.selectors.wrapper).hide();
      this.onFold();
    },
    unfold : function() {
      this._removeClass("folded");
      this.element.nextAll(this.options.selectors.wrapper).show();
      this.onUnfold();
    },
    onFold : function() {
      this.elements.fold.text(this._i18n("unfold"));
    },
    onUnfold : function() {
      this.elements.fold.text(this._i18n("fold"));
    },
    hasChildren : function() {
      return this.element.next(this.options.selectors.wrapper).length;
    },
    getId : function() {
      return this._id;
    },
    getParent : function() {
      return this._parent || (this._parent = this.option("comments").lsComments("getCommentById", this._parentId));
    },
    getScrollChild : function() {
      return this._scrollChild;
    },
    setScrollChild : function(addedRenderer) {
      /** @type {string} */
      this._scrollChild = addedRenderer;
      this.elements.scroll_to_child.off();
      if (addedRenderer) {
        this.elements.scroll_to_child.show().one("click" + this.eventNamespace, this.scrollToChild.bind(this));
      } else {
        this.elements.scroll_to_child.hide();
      }
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsComments", $.livestreet.lsComponent, {
    options : {
      urls : {
        add : null,
        load : null,
        hide : aRouter.ajax + "comment/delete/",
        text : aRouter.ajax + "comment/load/",
        update : aRouter.ajax + "comment/update/"
      },
      selectors : {
        comment : ".js-comment",
        comment_wrapper : ".js-comment-wrapper",
        form : ".js-comment-form",
        form_top : ".js-comment-form-top",
        preview : ".js-comment-preview",
        fold_all_toggle : ".js-comments-fold-all-toggle",
        title : ".js-comments-title",
        reply_root : ".js-comment-reply-root",
        comment_list : ".js-comment-list",
        subscribe : ".js-comments-subscribe",
        empty : ".js-comments-empty"
      },
      wysiwyg : null,
      folding : true,
      show_form : false,
      use_paging : false,
      params : {},
      i18n : {
        fold_all : "@comments.folding.fold_all",
        unfold_all : "@comments.folding.unfold_all",
        subscribe : "@comments.subscribe",
        unsubscribe : "@comments.unsubscribe",
        comments : "@comments.comments_declension"
      }
    },
    _create : function() {
      var formMetadata = this;
      this._super();
      this.initComments(this.getComments());
      this.getForm().lsCommentForm({
        urls : {
          text : this.option("urls.text"),
          add : this.option("urls.add"),
          update : this.option("urls.update")
        },
        comments : this.element
      });
      this.getFormTop().lsCommentForm({
        urls : {
          text : this.option("urls.text"),
          add : this.option("urls.add"),
          update : this.option("urls.update")
        },
        comments : this.element
      });
      this._currentComment = $();
      this._targetId = this.element.data("target-id");
      this._targetType = this.element.data("target-type");
      this.setLastCommentId(this.element.data("comment-last-id"));
      this.elements.reply_root.on("click" + this.eventNamespace, function(event) {
        event.preventDefault();
        formMetadata.getForm().lsCommentForm("show", 0);
        $(".js-comment-form .text-area").focus();
        $(".js-comment-form .text-area").attr("placeholder", "\u0412\u0430\u0448 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439...");
      });
      if (this.options.folding) {
        this.elements.fold_all_toggle.on("click" + this.eventNamespace, this.foldAllToggle.bind(this));
      }
      this.elements.subscribe.on("click" + this.eventNamespace, this.subscribeToggle.bind(this));
    },
    subscribeToggle : function() {
      var itemActiveCss = this.elements.subscribe.hasClass("active");
      ls.subscribe.toggle(this._targetType + "_new_comment", this._targetId, "", !itemActiveCss);
      if (itemActiveCss) {
        this.elements.subscribe.removeClass("active");
        $("span", this.elements.subscribe).text(this._i18n("subscribe"));
      } else {
        this.elements.subscribe.addClass("active");
        $("span", this.elements.subscribe).text(this._i18n("unsubscribe"));
      }
    },
    foldAllToggle : function() {
      this[this.elements.fold_all_toggle.hasClass("active") ? "unfoldAll" : "foldAll"]();
    },
    foldAll : function() {
      this.getComments().lsComment("fold");
      this.elements.fold_all_toggle.addClass("active").text(this._i18n("unfold_all"));
    },
    unfoldAll : function() {
      this.getComments().lsComment("unfold");
      this.elements.fold_all_toggle.removeClass("active").text(this._i18n("fold_all"));
    },
    load : function(b, s, callback) {
      s = typeof s === "undefined" ? true : s;
      var form = {
        target_id : this._targetId,
        target_type : this._targetType,
        last_comment_id : this.getLastCommentId(),
        self_comment_id : b || undefined,
        use_paging : this.option("use_paging")
      };
      this._load("load", form, function(report) {
        var results = report.comments;
        var l = results.length;
        if (s) {
          this.getCommentsNew().lsComment("notNew");
        }
        if (~this.getComments().length && l) {
          this.elements.empty.hide();
        }
        $.each(results, function(canCreateDiscussions, child) {
          var entry = this.initComments($($.trim(child.html)));
          this.elements.comment = this.elements.comment.add(entry);
          this.insert(entry, child.id, child.parent_id);
        }.bind(this));
        if (l && report.last_comment_id) {
          this.setLastCommentId(report.last_comment_id);
          this.elements.title.text(this._i18n("comments", this.getComments().length));
        }
        if (this.options.folding && (!b && l || b && l - 1 > 0)) {
          this.unfoldAll();
        }
        if (b) {
          this.getForm().lsCommentForm("hide");
          this.scrollToComment(this.getCommentById(b));
        } else {
          newCommentsFadeInit();
        }
        if ($.isFunction(callback)) {
          callback.call(this);
        }
      });
      this._trigger("loaded");
    },
    insert : function(value, type, isVirtual) {
      var i = $('<div class="comments__block--item js-comment-wrapper" data-id="' + type + '" data-rating="0"></div>').append(value);
      this.elements.comment_list.show();
      if (isVirtual) {
        var content = $(this.options.selectors.comment_wrapper + "[data-id=" + isVirtual + "]");
        if (content.parentsUntil(this.elements.comment_list).length == ls.registry.get("comment_max_tree")) {
          i = $('<div class="comments__block--item js-comment-wrapper avatar--small" data-id="' + type + '"></div>').append(value);
          content = content.parent(this.options.selectors.comment_wrapper);
        }
        content.append(i);
      } else {
        if ($(".js-sort-comments.comment--active").attr("data-type") == 3) {
          this.elements.comment_list.prepend(i);
        } else {
          this.elements.comment_list.append(i);
        }
      }
    },
    resetCommentCurrent : function() {
      if (this._currentComment.length) {
        this._currentComment.lsComment("notCurrent");
      }
      this._currentComment = $();
    },
    getCommentCurrent : function() {
      return this._currentComment;
    },
    setCommentCurrent : function(name) {
      if (this.getCommentCurrent().is(name)) {
        return;
      }
      if (this.getCommentCurrent().length) {
        this.getCommentCurrent().lsComment("notCurrent");
      }
      name.lsComment("markAsCurrent");
      /** @type {string} */
      this._currentComment = name;
    },
    scrollToComment : function(closest) {
      this.setCommentCurrent(closest);
      $.scrollTo(closest, 1000, {
        offset : -$(".header__main").height() - 25
      });
    },
    getForm : function() {
      return this.elements.form;
    },
    getFormTop : function() {
      return this.elements.form_top;
    },
    getComments : function() {
      return this.elements.comment;
    },
    addComments : function(type) {
      this.elements.comment = this.elements.comment.add(type);
    },
    getCommentById : function(id) {
      if (!id) {
        return;
      }
      /** @type {number} */
      var r = 0;
      var readersLength = this.getComments().length;
      for (; r < readersLength; r++) {
        if ($(this.getComments()[r]).lsComment("getId") == id) {
          return $(this.getComments()[r]);
        }
      }
      return $();
    },
    removeCommentById : function(canCreateDiscussions) {
      var s = this;
      this.elements.comment = this.getComments().filter(function() {
        var $this = $(this);
        if ($this.lsComment("getId") == canCreateDiscussions) {
          if ($this.lsComment("isCurrent")) {
            s.resetCommentCurrent();
          }
          $this.lsComment("destroy");
          return false;
        }
        return true;
      });
    },
    getCommentsNew : function() {
      return this.getComments().filter(function() {
        return $(this).lsComment("isNew");
      });
    },
    initComments : function(res) {
      return res.lsComment({
        comments : this.element,
        folding : this.options.folding
      });
    },
    getLastCommentId : function() {
      return this._commentLastId;
    },
    setLastCommentId : function(canCreateDiscussions) {
      this._commentLastId = canCreateDiscussions;
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsUserFields", $.livestreet.lsComponent, {
    options : {
      selectors : {
        template : "#user-field-template",
        list : ".js-user-field-list",
        field : ".js-user-field-item",
        field_remove : ".js-user-field-item-remove",
        empty : ".js-user-fields-empty",
        submit : ".js-user-fields-submit"
      },
      max : 3,
      i18n : {
        error_max_userfields : "@user.settings.profile.notices.error_max_userfields",
        remove_confirm : "@common.remove_confirm"
      }
    },
    _create : function() {
      this._super();
      this.elements = {
        template : $(this.option("selectors.template")),
        empty : this.element.find(this.option("selectors.empty")),
        list : this.element.find(this.option("selectors.list")),
        submit : this.element.find(this.option("selectors.submit"))
      };
      this.elements.submit.on("click" + this.eventNamespace, this.add.bind(this));
      this.element.on("click" + this.eventNamespace, this.option("selectors.field_remove"), this.remove.bind(this));
      this.element.on("change" + this.eventNamespace, "select", this.change.bind(this));
    },
    add : function(type) {
      var s;
      var $item = this.getTemplate();
      $item.find("option").each(function(canCreateDiscussions, txtNameId) {
        var i = $(txtNameId).val();
        if (this.getCountByTypeId(i) < this.option("max")) {
          s = i;
          return false;
        }
      }.bind(this));
      if (s) {
        $item.find("select").val(s);
        this.elements.list.append($item);
      } else {
        /** @type {null} */
        $item = null;
        ls.msg.error(null, this._i18n("error_max_userfields", {
          count : this.option("max")
        }));
      }
      this.elements.empty.hide();
    },
    remove : function(item) {
      if (!confirm(this._i18n("remove_confirm"))) {
        return;
      }
      $(item.target).off().closest(this.option("selectors.field")).remove();
      if (this.getCount() === 0) {
        this.elements.empty.show();
      }
    },
    change : function(options) {
      if (this.getCountByTypeId($(options.target).val()) > this.option("max")) {
        ls.msg.error(null, this._i18n("error_max_userfields", {
          count : this.option("max")
        }));
      }
    },
    getTemplate : function() {
      return this.elements.template.clone().show();
    },
    getCount : function() {
      return this.elements.list.find(this.option("selectors.field")).length;
    },
    getCountByTypeId : function(aRoundNumber) {
      return this.elements.list.find("select").filter(function() {
        return $(this).val() == aRoundNumber;
      }).length;
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsUserFollow", $.livestreet.lsComponent, {
    options : {
      urls : {
        follow : null,
        unfollow : null
      },
      selectors : {
        item : "> a"
      },
      classes : {
        active : "active"
      },
      params : {},
      i18n : {
        follow : "@user.actions.follow",
        unfollow : "@user.actions.unfollow"
      }
    },
    _create : function() {
      this._super();
      this._on({
        click : "onClick"
      });
      if (!this.elements.item.length) {
        this.elements.item = this.element;
      }
    },
    onClick : function(event) {
      this[this._hasClass("active") ? "unfollow" : "follow"]();
      event.preventDefault();
    },
    follow : function() {
      this._load("follow", {
        users : [this.element.data("id")]
      }, "onFollow");
    },
    onFollow : function(sender) {
      this.elements.item.text(this._i18n("unfollow"));
      this._addClass("active");
    },
    unfollow : function() {
      this._load("unfollow", {
        user_id : this.element.data("id")
      }, "onUnfollow");
    },
    onUnfollow : function(record) {
      this.elements.item.text(this._i18n("follow"));
      this._removeClass("active");
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsUserFriend", $.livestreet.lsComponent, {
    options : {
      urls : {
        add : null,
        remove : null,
        accept : null,
        modal : null
      },
      selectors : {
        form : ".js-user-friend-form",
        text : ".js-user-friend-text"
      },
      params : {}
    },
    _create : function() {
      this._super();
      this.target = this.element.data("target");
      this._on({
        click : "onClick"
      });
    },
    onClick : function(event) {
      var status = this.getStatus();
      if (status == "notfriends") {
        this.showForm();
      } else {
        if (status == "pending") {
          this.accept();
        } else {
          if (status == "added") {
            this.remove();
          } else {
            if (status == "linked") {
              this.addLinked();
            }
          }
        }
      }
      event.stopPropagation();
      event.preventDefault();
    },
    getStatus : function() {
      return this.element.attr("data-status");
    },
    setStatus : function(type) {
      var jtextnode = this.element.find(this.option("selectors.text"));
      var name = this.option("selectors.text").slice(1);
      if (~["sent", "rejected"].indexOf(type)) {
        jtextnode.replaceWith('<span class="' + name + '">' + ls.lang.get("user.friends.status." + type) + "</span>");
      } else {
        jtextnode.replaceWith('<a href="#" class="' + name + '">' + ls.lang.get("user.friends.status." + type) + "</a>");
      }
      this.element.attr("data-status", type);
    },
    showForm : function() {
      var that = this;
      ls.modal.load(this.option("urls.modal"), {
        target : this.target
      }, {
        aftershow : function(rawPads, i) {
          var e = i.element.find(that.option("selectors.form"));
          var fakeInputElement = e.find(that.option("selectors.text"));
          fakeInputElement.focus();
          e.on("submit", function(event) {
            var val = fakeInputElement.val();
            ls.utils.formLock(e);
            that._load("add", {
              idUser : that.target,
              userText : val
            }, function(canCreateDiscussions) {
              i.hide();
              that.setStatus("sent");
            }, {
              onResponse : function() {
                ls.utils.formUnlock(e);
              }
            });
            event.preventDefault();
          }.bind(this));
        }
      });
    },
    addLinked : function() {
      this.accept("add");
    },
    accept : function(data) {
      this._load(data || "accept", {
        idUser : this.target
      }, function(canCreateDiscussions) {
        this.setStatus("added");
      });
    },
    remove : function() {
      this._load("remove", {
        idUser : this.target
      }, function(canCreateDiscussions) {
        this.setStatus("linked");
      });
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsUserFieldChoose", $.livestreet.lsComponent, {
    options : {
      urls : {
        modal : null,
        autocomplete : aRouter.ajax + "autocompleter/user/"
      },
      selectors : {
        users : ".js-user-field-choose-users",
        button : ".js-user-field-choose-button"
      }
    },
    _create : function() {
      this._super();
      this.elements.button.on("click", function(event) {
        ls.userModalList.show(this.option("urls.modal"), true, this.onModalListAdd.bind(this));
        event.preventDefault();
      }.bind(this));
      this.elements.users.lsFieldAutocomplete({
        urls : {
          load : this.option("urls.autocomplete")
        },
        params : {
          extended : true
        }
      });
    },
    getUsers : function() {
      return this.elements.users.val();
    },
    empty : function() {
      this.elements.users.empty().trigger("chosen:updated");
    },
    onModalListAdd : function(t) {
      var compareTerms = this.elements.users.val();
      $.each(t, function(canCreateDiscussions, o) {
        if ($.inArray(o.id + "", compareTerms) !== -1) {
          return;
        }
        $("<option />").attr("value", o.id).prop("selected", true).html(o.login).appendTo(this.elements.users);
      }.bind(this));
      this.elements.users.trigger("chosen:updated");
    }
  });
})(jQuery);
ls = ls || {};
ls.userModalList = function($) {
  /**
   * @param {?} options
   * @param {!Object} element
   * @return {undefined}
   */
  var ImmyBox = function(options, element) {
    element.element.on("click", ".js-user-list-select-add", function(i) {
      var rows = $(".js-user-list-select").find(".js-user-list-small-checkbox:checked");
      var overflow = $.map(rows, function(e) {
        return {
          id : $(e).data("user-id"),
          login : $(e).data("user-login")
        };
      });
      if ($.isFunction(element.options.add)) {
        element.options.add(overflow);
      }
      element.hide();
    });
  };
  /**
   * @param {string} type
   * @param {boolean} name
   * @param {string} key
   * @param {?} data
   * @param {?} x
   * @return {undefined}
   */
  this.show = function(type, name, key, data, x) {
    ls.modal.load(type, {
      selectable : name
    }, {
      aftershow : ImmyBox.bind(this),
      add : key
    });
  };
  return this;
}.call(ls.user || {}, jQuery);
ls = ls || {};
ls.user = function(s) {
  /**
   * @return {undefined}
   */
  this.init = function() {
    return;
  };
  return this;
}.call(ls.user || {}, jQuery);
(function($) {
  $.widget("livestreet.lsUserListAdd", $.livestreet.lsComponent, {
    options : {
      urls : {
        add : null,
        remove : null,
        list : aRouter.ajax + "modal-friend-list"
      },
      selectors : {
        list : ".js-user-list-add-users",
        item : ".js-user-list-small-item",
        item_remove : ".js-user-list-add-user-remove",
        empty : ".js-user-list-small-empty",
        form : ".js-user-list-add-form",
        choose : ".js-user-list-add-choose"
      },
      hide : {
        effect : "slide",
        duration : 200,
        direction : "left"
      },
      params : {},
      i18n : {
        success_add : "@common.success.add"
      }
    },
    _create : function() {
      var self = this;
      this._super();
      this.elements.list.on("click" + this.eventNamespace, this.options.selectors.item_remove, function(event) {
        self.remove($(this).data("user-id"));
        event.preventDefault();
      });
      this.elements.form.on("submit" + this.eventNamespace, function(event) {
        var t = self.elements.choose.lsUserFieldChoose("getUsers");
        if (t.length) {
          ls.utils.formLock(self.elements.form);
          self.add(t);
        }
        event.preventDefault();
      });
      this.elements.choose.lsUserFieldChoose({
        urls : {
          modal : this.option("urls.list")
        }
      });
    },
    add : function(type) {
      if (!type) {
        return;
      }
      this._load("add", {
        "users" : type
      }, "_onAdd");
    },
    _onAdd : function(e) {
      var eCfgEl = this._getUsersAll();
      var ddiv = $.map(e.users, function(data) {
        if (data.bStateError) {
          ls.msg.error(null, data.sMsg);
        } else {
          ls.msg.notice(null, this._i18n("success_add"));
          this._trigger("afteruseradd", null, {
            context : this,
            item : data,
            response : e
          });
          this._onUserAdd(data);
          return eCfgEl.filter("[data-user-id=" + data.user_id + "]").length ? null : data.html;
        }
      }.bind(this)).join("");
      if (ddiv) {
        this.elements.empty.hide();
        this.elements.list.show().prepend(ddiv);
      }
      ls.utils.formUnlock(this.elements.form);
      this.elements.choose.lsUserFieldChoose("empty");
      this._trigger("afteradd", null, {
        context : this,
        response : e
      });
    },
    _onUserAdd : function(aNetChannelMessage) {
      return;
    },
    remove : function(key) {
      if (!this.options.urls.remove) {
        return;
      }
      var self = this;
      this._load("remove", {
        user_id : key
      }, function(nextResponse) {
        this._hide(this._getUserById(key), this.options.hide, function() {
          $(this).remove();
          if (!self.elements.list.find(self.options.selectors.item).length) {
            self.elements.list.hide();
            self.elements.empty.show();
          }
        });
        this._trigger("afterremove", null, {
          context : this,
          response : nextResponse
        });
      });
    },
    _getUserById : function(id) {
      return this.elements.list.find(this.options.selectors.item + "[data-user-id=" + id + "]");
    },
    _getUsersAll : function() {
      return this.elements.list.find(this.options.selectors.item);
    }
  });
})(jQuery);
ls = ls || {};
ls.subscribe = function(canCreateDiscussions) {
  /**
   * @param {string} type
   * @param {!Object} name
   * @param {!Object} key
   * @param {?} options
   * @return {?}
   */
  this.toggle = function(type, name, key, options) {
    var l = aRouter["subscribe"] + "ajax-subscribe-toggle/";
    var data = {
      target_type : type,
      target_id : name,
      mail : key,
      value : options
    };
    ls.hook.marker("toggleBefore");
    ls.ajax.load(l, data, function(NEEDED_FILE_PATH) {
      ls.hook.run("ls_subscribe_toggle_after", [type, name, key, options, NEEDED_FILE_PATH]);
    });
    return false;
  };
  return this;
}.call(ls.subscribe || {}, jQuery);
(function($) {
  $.widget("livestreet.lsContent", $.livestreet.lsComponent, {
    options : {
      urls : {
        add : null,
        edit : null
      },
      params : {}
    },
    _create : function() {
      this._super();
      this.action = this.element.data("content-action");
      this._on({
        submit : "onSubmit"
      });
    },
    onSubmit : function(event) {
      this.submit();
      event.preventDefault();
    },
    submit : function(type) {
      $.extend(this.option("params"), type || {});
      this._trigger("beforesubmit", null, this);
      this._submit(this.action, this.element, function(uploadConfig) {
        this._trigger("aftersubmit", null, this);
        if (uploadConfig.sUrlRedirect) {
          window.location.href = uploadConfig.sUrlRedirect;
        }
      });
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsReport", $.livestreet.lsComponent, {
    options : {
      params : {},
      urls : {
        modal : null,
        add : null
      },
      selectors : {
        form : "form"
      }
    },
    _create : function() {
      this._super();
      this.option("params", $.extend({}, this.option("params"), ls.utils.getDataOptions(this.element, "param")));
      this._on({
        click : this.showModal
      });
    },
    showModal : function(type) {
      var self = this;
      var div;
      ls.modal.load(this.option("urls.modal"), this.option("params"), {
        aftershow : function(enumType, s) {
          div = s.element.find(self.option("selectors.form"));
          div.on("submit", function(event) {
            self._submit("add", div, function(canCreateDiscussions) {
              s.hide();
            });
            event.preventDefault();
          });
        },
        afterhide : function() {
          div.off();
          /** @type {null} */
          div = null;
        },
        center : false
      });
      type.preventDefault();
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsTagsFavourite", $.livestreet.lsComponent, {
    options : {
      urls : {
        save : null
      },
      extSelectors : {
        editBlock : "#favourite-form-tags",
        form : "#js-favourite-form",
        formSubmitButton : ".js-tags-form-submit",
        formTags : ".js-tags-form-input-list"
      },
      selectors : {
        tags : ".js-tags-personal-tags",
        tag : ".js-tags-personal-tag",
        edit : ".js-tags-personal-edit"
      },
      params : {
        target_type : null
      },
      html : {
        tag : function(type) {
          return '<a href="' + type.url + '" rel="tag" class="ls-tags-item ls-tags-item--personal js-tags-personal-tag">' + type.tag + "</a>";
        }
      }
    },
    _create : function() {
      this._super();
      this.extElements = this._getElementsFromSelectors(this.options.extSelectors);
      this._on(this.elements.edit, {
        click : "_onEditClick"
      });
      this._on(this.extElements.form, {
        submit : "_onFormSubmit"
      });
    },
    _onEditClick : function(e) {
      this.editShow();
      e.preventDefault();
    },
    _onFormSubmit : function(event) {
      if (this.extElements.form.data("target_id") != this.option("params.target_id")) {
        return;
      }
      this._submit("save", this.extElements.form, "_onFormSubmitSuccess", {
        submitButton : this.extElements.formSubmitButton
      });
      event.preventDefault();
    },
    _onFormSubmitSuccess : function(checkedTagData) {
      this.editHide();
      this.setPersonalTags(checkedTagData.tags);
    },
    getPersonalTagsElements : function() {
      return this.elements.tags.find(this.option("selectors.tag"));
    },
    getPersonalTags : function() {
      return this.getPersonalTagsElements().map(function(canCreateDiscussions, s) {
        return this.getTagInfo($(s));
      }.bind(this));
    },
    getTagInfo : function(tag) {
      return {
        tag : $.trim(tag.text()),
        url : tag.attr("href")
      };
    },
    setPersonalTags : function(e) {
      this.removePersonalTags();
      this.elements.tags.html($.map(e, this.option("html.tag")).join(", "));
    },
    removePersonalTags : function() {
      this.elements.tags.empty();
    },
    setEditable : function(is_editable) {
      if (is_editable) {
        this.elements.edit.show();
      } else {
        this.removePersonalTags();
        this.elements.edit.hide();
      }
    },
    editShow : function() {
      this.extElements.form.data("target_id", this.option("params.target_id"));
      this.extElements.formTags.val(this._tagsToString());
      this.extElements.editBlock.lsModal("show");
    },
    editHide : function() {
      this.extElements.editBlock.lsModal("hide");
    },
    _tagsToString : function() {
      return $.map(this.getPersonalTags(), function(languageOption) {
        return languageOption.tag;
      }).join(", ");
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsSearchAjax", $.livestreet.lsComponent, {
    options : {
      urls : {
        search : null
      },
      selectors : {
        list : ".js-search-ajax-list",
        more : ".js-search-ajax-more",
        title : null
      },
      i18n : {
        title : null
      },
      filters : [],
      params : {}
    },
    _create : function() {
      this._super();
      var e = this;
      $.each(this.option("filters"), function(canCreateDiscussions, a) {
        e._initFilter(a);
      });
      this.elements.more.lsMore({
        urls : {
          load : e.option("urls.search")
        },
        beforeload : function(store, options) {
          $.extend(options.option("params"), e.option("params"));
        }
      });
    },
    addFilter : function(value) {
      this.option("filters").push(value);
      this._initFilter(value);
    },
    _initFilter : function(params) {
      var options = this;
      var $rootel = $(params.selector);
      switch(params.type) {
        case "text":
          $rootel.on("keyup", function() {
            ls.timer.run(options, options.update, null, null, 300);
          });
          break;
        case "radio":
        case "checkbox":
        case "select":
          $rootel.on("change", function() {
            options.update();
          });
          break;
        case "list":
        case "sort":
          $rootel.on("click", function(event) {
            var b = $(this);
            var el = b.closest("ul").find("li").not(b);
            var oldCondition = b.data("value");
            var o = params.activeClass || ls.options.classes.states.active;
            el.removeClass(o);
            b.addClass(o);
            if (params.type == "sort") {
              var orderStr = b.attr("data-order");
              el.attr("data-order", "asc");
              b.attr("data-order", b.attr("data-order") == "asc" ? "desc" : "asc");
            }
            options.update();
            event.preventDefault();
          });
          break;
        default:
          break;
      }
    },
    updateFilter : function(params) {
      var $item = this;
      var thread_rows = $(params.selector);
      var USERNAME_CLS = params.activeClass || ls.options.classes.states.active;
      switch(params.type) {
        case "text":
          thread_rows.each(function() {
            $item.setParam(params.name, $(this).val());
            $item.setParam("isPrefix", 0);
          });
          break;
        case "radio":
        case "checkbox":
        case "select":
          thread_rows.each(function() {
            var value;
            var i = $(this);
            if (params.type == "radio" && !i.is(":checked")) {
              return;
            }
            if (params.type == "checkbox") {
              /** @type {number} */
              value = i.is(":checked") ? 1 : 0;
            } else {
              value = i.val();
            }
            $item.setParam(params.name, value);
          });
          break;
        case "list":
        case "sort":
          thread_rows.each(function() {
            var $t = $(this).closest("ul").find("li." + USERNAME_CLS);
            var value = $t.data("value");
            if (params.type == "sort") {
              $item.setParam("order", $t.attr("data-order"));
            }
            $item.setParam(params.name, value);
          });
          break;
        default:
          break;
      }
    },
    setParam : function(name, value) {
      this.option("params." + name, value);
    },
    getParam : function(name) {
      return this.option("params." + name);
    },
    update : function() {
      /** @type {number} */
      var i = 0;
      for (; i < this.option("filters").length; i++) {
        this.updateFilter(this.option("filters")[i]);
      }
      this._trigger("beforeupdate", null, this);
      this._load("search", "onUpdate");
    },
    onUpdate : function(data) {
      this.elements.more[data.hide ? "hide" : "show"]();
      if (data.searchCount) {
        this.elements.list.show().html($.trim(data.html));
      } else {
        this.elements.list.hide();
      }
      if (this.option("i18n.title") && this.elements.title.length) {
        this.elements.title.show().text(this._i18n("title", data.searchCount));
      }
      $(".js-favourite-author").lsFavourite({
        urls : {
          toggle : aRouter["ajax"] + "favourite/author/"
        }
      });
      $(".js-favourite-performer").lsFavourite({
        urls : {
          toggle : aRouter["ajax"] + "favourite/performer/"
        }
      });
      this._trigger("afterupdate", null, {
        context : this,
        response : data
      });
    },
    updateUrl : function() {
      window.history.pushState({}, "Search", window.location.origin + window.location.pathname + "?" + $.param(this.option("params")));
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsSearchHideable", $.livestreet.lsComponent, {
    options : {
      selectors : {
        toggle : ".js-search-hideable-toggle",
        input : "input[type=text]"
      },
      classes : {
        open : "open"
      }
    },
    _create : function() {
      this._super();
      this._on(this.elements.toggle, {
        click : "_onToggleClick"
      });
      this.document.on("click" + this.eventNamespace, function(event) {
        if (this.isOpen() && !this.element.is(event.target) && !this.element.has(event.target).length) {
          this.hide();
        }
      }.bind(this));
    },
    _onToggleClick : function(event) {
      event.preventDefault();
      this.toggle();
    },
    toggle : function() {
      this[this.isOpen() ? "hide" : "show"]();
    },
    show : function() {
      this._addClass("open");
      this.elements.input.focus();
    },
    hide : function() {
      this._removeClass("open");
      this.elements.input.val("");
    },
    isOpen : function() {
      return this._hasClass("open");
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsUserbar", $.livestreet.lsComponent, {
    options : {
      urls : {},
      selectors : {
        userNav : ".js-userbar-user-nav"
      },
      classes : {}
    },
    _create : function() {
      this._super();
      this.elements.userNav.lsDropdown({
        selectors : {
          toggle : ".js-userbar-user-nav-toggle",
          menu : ".js-userbar-user-nav-menu"
        },
        position : {
          my : "right top",
          at : "right bottom",
          collision : "flipfit flip"
        }
      });
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsWallEntry", $.livestreet.lsComponent, {
    options : {
      wall : null,
      urls : {
        remove : null
      },
      selectors : {
        remove : ".js-comment-remove",
        reply : ".js-comment-reply"
      },
      params : {}
    },
    _create : function() {
      this._super();
      this.id = this.element.data("id");
      this.type = this.element.data("type");
      this.form = this.getType() === "post" ? this.option("wall").lsWall("getFormById", this.id) : null;
      this._on(this.elements.remove, {
        click : function(type) {
          this.remove();
          type.preventDefault();
        }
      });
      this._on(this.elements.reply, {
        click : function(type) {
          this.formToggle();
          type.preventDefault();
        }
      });
    },
    formToggle : function() {
      this.form.lsWallForm("toggle");
    },
    getType : function() {
      return this.type;
    },
    remove : function() {
      this._load("remove", {
        user_id : this.option("wall").lsWall("getUserId"),
        id : this.id
      }, "onRemove");
    },
    onRemove : function(childHeader) {
      this.element.fadeOut("slow", function() {
        this.element.remove();
        this.option("wall").lsWall("checkEmpty");
      }.bind(this));
      this.option("wall").lsWall("getCommentWrapperById", this.id).fadeOut("slow", function() {
        $(this).remove();
      });
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsWallForm", {
    options : {
      wall : null,
      urls : {
        add : null
      },
      selectors : {
        text : ".js-wall-form-text",
        button_submit : ".js-wall-form-submit"
      }
    },
    _create : function() {
      var t = this;
      this.elements = {
        text : this.element.find(this.option("selectors.text")),
        submit : this.element.find(this.option("selectors.submit"))
      };
      this.id = this.element.data("id");
      this.reply = this.option("wall").lsWall("getEntryById", this.id).lsWallEntry("getElement", "reply");
      this._on({
        submit : this.submit
      });
      this.elements.text.on("keydown" + this.eventNamespace, null, "ctrl+return", this.submit.bind(this));
      this._on(this.elements.text, {
        click : this.open
      });
      this.document.on("mouseup" + this.eventNamespace, function(event) {
        if (event.which == 1 && this.isOpened() && !this.element.is(event.target) && (!this.reply || this.reply && !this.reply.is(event.target)) && this.element.has(event.target).length === 0 && !this.elements.text.val()) {
          if (this.option("wall").lsWall("getCommentsByPostId", this.id).length || this.id === 0) {
            this.close();
          } else {
            this.hide();
          }
        }
      }.bind(this));
    },
    submit : function(type) {
      var e = this.elements.text.val();
      ls.utils.formLock(this.element);
      this.option("wall").lsWall("add", this.id, e);
      type.preventDefault();
    },
    open : function() {
      this.element.addClass(ls.options.classes.states.open);
    },
    close : function() {
      this.element.removeClass(ls.options.classes.states.open);
      this.elements.text.val("");
    },
    show : function() {
      this.element.show();
      this.open();
      this.elements.text.focus();
    },
    hide : function() {
      this.element.hide();
    },
    isOpened : function() {
      return this.element.hasClass(ls.options.classes.states.open);
    },
    expandToggle : function() {
      this[this.isOpened() ? "close" : "open"]();
    },
    toggle : function() {
      this[this.element.is(":visible") ? "hide" : "show"]();
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsWall", $.livestreet.lsComponent, {
    options : {
      urls : {
        add : null,
        remove : null,
        load : null,
        load_comments : null
      },
      selectors : {
        entry : ".js-wall-entry",
        comment : ".js-wall-comment",
        post : ".js-wall-post",
        form : ".js-wall-form",
        more : ".js-wall-more",
        more_comments : ".js-wall-more-comments",
        comment_wrapper : ".js-wall-comment-wrapper",
        container : ".js-wall-entry-container",
        empty : ".js-wall-alert-empty"
      },
      params : {}
    },
    _create : function() {
      this._super();
      var that = this;
      this.userId = this.getUserId();
      this.elements.more.lsMore({
        urls : {
          load : this.option("urls.load")
        },
        proxy : ["last_id"],
        params : {
          user_id : this.getUserId()
        }
      });
      this.elements.more_comments.livequery(function() {
        $(this).lsMore({
          urls : {
            load : that.option("urls.load_comments")
          },
          append : false,
          proxy : ["last_id"],
          params : {
            user_id : that.getUserId()
          }
        });
      });
      this.elements.entry.livequery(function() {
        $(this).lsWallEntry({
          wall : that.element,
          urls : {
            remove : that.option("urls.remove")
          }
        });
      });
      this.elements.form.livequery(function() {
        $(this).lsWallForm({
          wall : that.element
        });
      });
    },
    add : function(type, name) {
      var t = this.getFormById(type);
      this._load("add", {
        user_id : this.getUserId(),
        pid : type,
        text : name
      }, function(s) {
        if (type === 0) {
          this.elements.empty.hide();
        }
        this.load(type);
        t.lsWallForm("close");
      }, {
        onResponse : function() {
          ls.utils.formUnlock(t);
        }
      });
    },
    load : function(type) {
      var viewContainer = this.element.find(this.options.selectors.container + "[data-id=" + type + "]");
      var s = viewContainer.find(">" + this.option("selectors.entry") + ":" + (type === 0 ? "first" : "last")).data("id") || -1;
      var data = {
        user_id : this.getUserId(),
        first_id : s,
        target_id : type
      };
      this._load(type === 0 ? "load" : "load_comments", data, function(categorydiv) {
        if (categorydiv.count_loaded) {
          viewContainer[type === 0 ? "prepend" : "append"](categorydiv.html);
        }
      });
    },
    getPosts : function() {
      return this.element.find(this.option("selectors.post"));
    },
    getCommentsByPostId : function(person) {
      return this.getCommentWrapperById(person).find(this.option("selectors.comment"));
    },
    getEntryById : function(entryId) {
      return this.element.find(this.option("selectors.entry") + "[data-id=" + entryId + "]").eq(0);
    },
    getCommentWrapperById : function(type) {
      return this.element.find(this.option("selectors.comment_wrapper") + "[data-id=" + type + "]").eq(0);
    },
    getFormById : function(id) {
      return this.element.find(this.option("selectors.form") + "[data-id=" + id + "]").eq(0);
    },
    getUserId : function() {
      return this.userId ? this.userId : this.userId = this.element.data("user-id");
    },
    getOpenedForms : function() {
      return this.element.find(this.option("selectors.form") + "." + ls.options.classes.states.open);
    },
    checkEmpty : function() {
      this.elements.empty[this.getPosts().length ? "hide" : "show"]();
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsBlogAdd", $.livestreet.lsComponent, {
    options : {
      selectors : {
        type : ".js-blog-add-type",
        type_note : ".js-blog-add-field-type .js-field-note"
      },
      i18n : {
        type_open : "@blog.add.fields.type.note_open",
        type_closed : "@blog.add.fields.type.note_closed"
      }
    },
    _create : function() {
      var t = this;
      this._super();
      this.elements.type.on("change" + this.eventNamespace, function() {
        t.setTypeNote($(this).val());
      });
    },
    setTypeNote : function(i) {
      this.elements.type_note.text(this._i18n("type_" + i));
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsBlogInvites", $.livestreet.lsUserListAdd, {
    options : {
      urls : {
        add : aRouter["blog"] + "ajaxaddbloginvite/",
        remove : aRouter["blog"] + "ajaxremovebloginvite/",
        reinvite : aRouter["blog"] + "ajaxrebloginvite/"
      },
      selectors : {
        item_reinvite : ".js-blog-invite-user-repeat"
      }
    },
    _create : function() {
      var data = this;
      this._super();
      this.elements.list.on("click" + this.eventNamespace, this.options.selectors.item_reinvite, function(event) {
        data.reinvite($(this).data("user-id"));
        event.preventDefault();
      });
    },
    reinvite : function(twitterUserId) {
      this._load("reinvite", {
        user_id : twitterUserId
      }, function(nextResponse) {
        this._trigger("afterreinvite", null, {
          context : this,
          response : nextResponse
        });
      });
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsBlogJoin", $.livestreet.lsComponent, {
    options : {
      urls : {
        toggle : null
      },
      selectors : {
        count : ".js-blog-users-count",
        text : null
      },
      classes : {
        active : "ls-button--primary",
        loading : null
      },
      params : {},
      i18n : {
        join : "@blog.join.join",
        leave : "@blog.join.leave"
      }
    },
    _create : function() {
      this._super();
      if (!this.elements.text.length) {
        this.elements.text = this.element;
      }
      this.option("params.blog_id", this.element.data("blog-id"));
      this._on({
        click : "onClick"
      });
    },
    onClick : function(event) {
      this.toggle();
      event.preventDefault();
      event.stopPropagation();
    },
    toggle : function(type) {
      this.element.addClass(this.option("classes.loading"));
      this._load("toggle", function(handlers) {
        this.onToggle(handlers);
        this.element.removeClass(this.option("classes.loading"));
      }.bind(this));
    },
    onToggle : function(value) {
      this.element.toggleClass("ls-favourite--added");
      $(this.option("selectors.count") + "[data-blog-id=" + this.option("params.blog_id") + "]").text(value.iCountUser);
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsTopicAdd", $.livestreet.lsComponent, {
    options : {
      max_blog_count : 3,
      urls : {
        add : aRouter["content"] + "ajax/add/",
        edit : aRouter["content"] + "ajax/edit/",
        preview : aRouter["content"] + "ajax/preview/"
      },
      selectors : {
        preview : "#topic-text-preview",
        preview_content : "#topic-text-preview .js-topic-preview-content",
        image_preview : ".js-topic-add-field-image-preview",
        blogs : ".js-topic-add-blogs",
        buttons : {
          preview : ".js-topic-preview-text-button",
          preview_hide : ".js-topic-preview-text-hide-button",
          draft : ".js-topic-draft-button"
        }
      }
    },
    _create : function() {
      this._super();
      var i = this;
      this.elements = {
        preview : $(this.option("selectors.preview")),
        preview_content : $(this.option("selectors.preview_content")),
        image_preview : this.element.find(this.option("selectors.image_preview")),
        blogs : this.element.find(this.option("selectors.blogs")),
        buttons : {
          preview : this.element.find(this.option("selectors.buttons.preview")),
          preview_hide : $(this.option("selectors.buttons.preview_hide")),
          draft : this.element.find(this.option("selectors.buttons.draft")),
          submit : this.element.find(this.option("selectors.buttons.submit"))
        }
      };
      this.element.lsContent({
        urls : {
          add : this.option("urls.add"),
          edit : this.option("urls.edit")
        },
        beforesubmit : this._prepareParams.bind(this)
      });
      this.elements.blogs.lsFieldAutocomplete({
        max_selected_options : this.option("max_blog_count"),
        width : "100%"
      });
      var process = this.elements.blogs.data("chosenOrder");
      if (process && process.length) {
        this.elements.blogs.setSelectionOrder(process);
      }
      this.elements.image_preview.lsFieldImageAjax({
        urls : {
          add : this.option("urls.add"),
          edit : this.option("urls.edit")
        }
      });
      this.elements.buttons.draft.on("click" + this.eventNamespace, this.saveAsDraft.bind(this));
      this.elements.buttons.preview.on("click" + this.eventNamespace, this.previewShow.bind(this));
      this.elements.buttons.preview_hide.on("click" + this.eventNamespace, this.previewHide.bind(this));
    },
    saveAsDraft : function() {
      this.element.lsContent("submit", {
        is_draft : 1
      });
    },
    previewShow : function() {
      this._submit("preview", this.element, function(data) {
        if (data.bStateError) {
          ls.msg.error(null, data.sMsg);
        } else {
          this.elements.preview.show();
          this.elements.preview_content.html(data.sText);
        }
      }.bind(this), {
        submitButton : this.elements.buttons.preview
      });
    },
    previewHide : function() {
      this.elements.preview.hide();
      this.elements.preview_content.empty();
    },
    _prepareParams : function() {
      if (this.elements.blogs.length) {
        var phase = this.elements.blogs.getSelectionOrder();
        if (!phase || !phase.length) {
          phase = this.elements.blogs.val();
        }
        if (phase && phase.length) {
          this.element.lsContent("option", "params.topic[blogs_id_raw]", phase);
        }
      }
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsTopicFavourite", $.livestreet.lsFavourite, {
    options : {
      urls : {
        toggle : aRouter["ajax"] + "favourite/topic/"
      },
      tags : null
    },
    onToggleSuccess : function(key) {
      this._super(key);
      this.option("tags").lsTagsFavourite("setEditable", key.bState);
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsTopic", $.livestreet.lsComponent, {
    options : {
      urls : {
        voteInfo : aRouter.ajax + "vote/get/info/topic"
      },
      selectors : {
        tags : ".js-tags-favourite",
        subscribe_chapters : ".js-chapters-subscribe"
      },
      i18n : {
        subscribe : "@comments.subscribe",
        unsubscribe : "@comments.unsubscribe"
      }
    },
    _create : function() {
      this._super();
      this.elements.tags.lsTagsFavourite({
        urls : {
          save : aRouter["ajax"] + "favourite/save-tags/"
        },
        params : {
          target_type : "topic"
        }
      });
      this._targetId = this.element.data("target-id");
      this.elements.subscribe_chapters.on("click" + this.eventNamespace, this.subscribeChaptersToggle.bind(this));
    },
    subscribeChaptersToggle : function() {
      var itemActiveCss = this.elements.subscribe_chapters.hasClass("active");
      console.log(this._targetType);
      ls.subscribe.toggle("topic_new_chapter", this._targetId, "", !itemActiveCss);
      if (itemActiveCss) {
        this.elements.subscribe_chapters.removeClass("active");
        $("span", this.elements.subscribe_chapters).text(this._i18n("subscribe"));
      } else {
        this.elements.subscribe_chapters.addClass("active");
        $("span", this.elements.subscribe_chapters).text(this._i18n("unsubscribe"));
      }
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsPollManage", $.livestreet.lsComponent, {
    options : {
      urls : {
        modal_add : aRouter.ajax + "poll/modal-create",
        modal_edit : aRouter.ajax + "poll/modal-update",
        add : aRouter.ajax + "poll/create/",
        update : aRouter.ajax + "poll/update/",
        remove : aRouter.ajax + "poll/remove/"
      },
      selectors : {
        list : ".js-poll-manage-list",
        item : ".js-poll-manage-item",
        item_remove : ".js-poll-manage-item-remove",
        item_edit : ".js-poll-manage-item-edit",
        add : ".js-poll-manage-add",
        form : {
          form : "#js-poll-form",
          add : ".js-poll-form-answer-add",
          list : ".js-poll-form-answer-list",
          item : ".js-poll-form-answer-item",
          item_id : ".js-poll-form-answer-item-id",
          item_text : ".js-poll-form-answer-item-text",
          item_remove : ".js-poll-form-answer-item-remove",
          submit : ".js-poll-form-submit"
        }
      },
      max : 20,
      i18n : {
        error_answers_max : "@poll.notices.error_answers_max"
      }
    },
    _create : function() {
      this._super();
      var $iFrame = this;
      this.elements = {
        list : this.element.find(this.options.selectors.list),
        add : this.element.find(this.options.selectors.add),
        remove : this.element.find(this.options.selectors.item_remove),
        edit : this.element.find(this.options.selectors.item_edit)
      };
      this.id = this.element.data("target-id");
      this.type = this.element.data("type");
      this._on(this.elements.add, {
        "click" : this.formShowAdd
      });
      this.element.on("click" + this.eventNamespace, this.options.selectors.item_edit, function() {
        $iFrame.formShowEdit($(this).data("poll-id"), $(this).data("poll-target-tmp"));
      });
      this.element.on("click" + this.eventNamespace, this.options.selectors.item_remove, function() {
        $iFrame.remove($(this));
      });
    },
    formShow : function(s, index) {
      var me = this;
      ls.modal.load(s, index, {
        aftershow : function(textWriter, o) {
          var button = o.element.find(me.option("selectors.form.form"));
          var key = button.find(me.option("selectors.form.list"));
          button.on("submit", function(event) {
            me[button.data("action")](button, key, o);
            event.preventDefault();
          });
          button.find(me.option("selectors.form.add")).on("click", me.answerAdd.bind(me, key));
          button.on("keydown", me.option("selectors.form.item_text"), "ctrl+return", me.answerAdd.bind(me, key));
          button.on("click", me.option("selectors.form.item_remove"), function() {
            me.answerRemove(key, $(this));
          });
        },
        center : false
      });
    },
    formShowAdd : function() {
      this.formShow(this.option("urls.modal_add"), {
        target_type : this.type,
        target_id : this.id
      });
    },
    formShowEdit : function(sectionParam, macro) {
      this.formShow(this.option("urls.modal_edit"), {
        id : sectionParam,
        target_tmp : macro
      });
    },
    answerAdd : function(request) {
      var $element = request.find(this.option("selectors.form.item"));
      if ($element.length == this.option("max")) {
        ls.msg.error(null, this._i18n("error_answers_max", {
          count : this.option("max")
        }));
        return;
      } else {
        if ($element.length == 2) {
          $element.find(this.option("selectors.form.item_remove")).show();
        }
      }
      var e = $(this.option("selectors.form.item") + "[data-is-template=true]").clone().removeAttr("data-is-template").show();
      request.append(e);
      e.find(this.option("selectors.form.item_text")).focus();
    },
    answerRemove : function(request, handle) {
      var $element = request.find(this.option("selectors.form.item"));
      if ($element.length == 3) {
        $element.find(this.option("selectors.form.item_remove")).hide();
      }
      handle.closest(this.option("selectors.form.item")).fadeOut(200, function() {
        $(this).remove();
      });
    },
    answerIndex : function(request) {
      request.find(this.option("selectors.form.item")).each(function(canCreateDiscussions, $element) {
        $element = $($element);
        var categorydiv = $element.find(this.option("selectors.form.item_id"));
        var s = $element.find(this.option("selectors.form.item_text"));
        categorydiv.attr("name", "answers[" + canCreateDiscussions + "][id]");
        s.attr("name", "answers[" + canCreateDiscussions + "][title]");
      }.bind(this));
    },
    add : function(type, name, data) {
      this.answerIndex(name);
      this._submit("add", type, function(slotData) {
        this.elements.list.append(slotData.item);
        data.hide();
      }.bind(this), {
        submitButton : data.element.find("button[type=submit]")
      });
    },
    update : function(source, e, i) {
      this.answerIndex(e);
      this._submit("update", source, function(result) {
        this.elements.list.find(this.option("selectors.item") + "[data-poll-id=" + result.id + "]").replaceWith(result.item);
        i.hide();
      }.bind(this), {
        submitButton : i.element.find("button[type=submit]")
      });
    },
    remove : function(from) {
      ls.ajax.load(this.option("urls.remove"), {
        id : from.data("poll-id"),
        tmp : from.data("poll-target-tmp")
      }, function(i) {
        from.closest(this.option("selectors.item")).fadeOut("slow", function() {
          $(this).remove();
        });
      }.bind(this));
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsPoll", $.livestreet.lsComponent, {
    options : {
      urls : {
        vote : aRouter.ajax + "poll/vote/"
      },
      selectors : {
        form : ".js-poll-vote-form",
        vote : ".js-poll-vote",
        abstain : ".js-poll-abstain",
        result : ".js-poll-result",
        resultContainer : ".js-poll-result-container",
        item : ".js-poll-result-item",
        sort : ".js-poll-result-sort"
      }
    },
    _create : function() {
      this._super();
      if (!this.elements.form.length) {
        this.initResult();
      }
      this._on(this.elements.vote, {
        "click" : this.vote.bind(this, false)
      });
      this._on(this.elements.abstain, {
        "click" : this.vote.bind(this, true)
      });
      this.element.on("click" + this.eventNamespace, this.option("selectors.sort"), this.sort.bind(this));
    },
    initResult : function() {
      this.elements.sort = this.element.find(this.options.selectors.sort);
      this.elements.items = this.element.find(this.options.selectors.item);
      this.elements.result = this.element.find(this.options.selectors.result);
    },
    vote : function(type) {
      this._submit("vote", this.elements.form, function(tmp) {
        this.elements.resultContainer.html($.trim(tmp.sText));
        this.initResult();
        this._off(this.elements.vote, "click");
        this._off(this.elements.abstain, "click");
      }.bind(this), {
        submitButton : this.elements.vote,
        params : {
          abstain : type ? 1 : 0
        }
      });
    },
    sort : function() {
      /** @type {string} */
      var y = this.elements.sort.hasClass(ls.options.classes.states.active) ? "position" : "count";
      this.elements.items.sort(function(e, galleryitem) {
        return $(galleryitem).data(y) - $(e).data(y);
      });
      this.elements.sort.toggleClass(ls.options.classes.states.active);
      this.elements.result.html(this.elements.items);
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsActivitySettings", $.livestreet.lsComponent, {
    options : {
      urls : {
        toggle_type : null
      },
      selectors : {
        type_checkbox : ".js-activity-settings-type-checkbox"
      }
    },
    _create : function() {
      this._super();
      this._on(this.elements.type_checkbox, {
        change : "toggleEventType"
      });
    },
    toggleEventType : function(jEvent) {
      this.option("params.type", $(jEvent.target).data("type"));
      this._load("toggle_type", function(canCreateDiscussions) {
      });
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsActivity", $.livestreet.lsComponent, {
    options : {
      urls : {
        more : null
      },
      selectors : {
        list : ".js-activity-event-list",
        event : ".js-activity-event",
        more : ".js-activity-more"
      }
    },
    _create : function() {
      this._super();
      this.elements.more.lsMore({
        urls : {
          load : this.option("urls.more")
        },
        proxy : ["last_id"],
        target : this.elements.list,
        beforeload : function(isSlidingUp, canCreateDiscussions) {
          canCreateDiscussions._setParam("date_last", this.getDateLast());
        }.bind(this)
      });
    },
    getDateLast : function() {
      return this.elements.list.find(this.option("selectors.event")).last().find("time").data("date");
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsFeedBlogs", $.livestreet.lsComponent, {
    options : {
      urls : {
        subscribe : null,
        unsubscribe : null
      },
      selectors : {
        checkbox : ".js-feed-blogs-subscribe"
      },
      params : {}
    },
    _create : function() {
      this._super();
      this._on(this.getElement("checkbox"), {
        change : this.toggleSubscribe
      });
    },
    toggleSubscribe : function(jEvent) {
      var t = $(jEvent.target);
      this._load(t.is(":checked") ? "subscribe" : "unsubscribe", {
        type : "blogs",
        id : t.data("id")
      });
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsTalkUsers", $.livestreet.lsUserListAdd, {
    options : {
      urls : {
        add : aRouter["talk"] + "ajaxaddtalkuser/",
        inactivate : aRouter["talk"] + "ajaxdeletetalkuser/"
      },
      selectors : {
        item_inactivate : ".js-message-users-user-inactivate",
        item_activate : ".js-message-users-user-activate"
      }
    },
    _create : function() {
      var plugin = this;
      this._super();
      this.elements.list.on("click" + this.eventNamespace, this.options.selectors.item_inactivate, function(event) {
        plugin.inactivate($(this));
        event.preventDefault();
      });
      this.elements.list.on("click" + this.eventNamespace, this.options.selectors.item_activate, function(event) {
        plugin.add([$(this).data("user-id")]);
        event.preventDefault();
      });
    },
    _onUserAdd : function(branchData) {
      this.userActivate(branchData.user_id);
    },
    inactivate : function(event) {
      var user_id = event.data("user-id");
      this._load("inactivate", {
        user_id : user_id
      }, function(nextResponse) {
        this.userInactivate(user_id);
        this._trigger("afterinactivate", null, {
          context : this,
          response : nextResponse
        });
      });
    },
    userActivate : function(userId) {
      this._getUserById(userId).removeClass("inactive");
    },
    userInactivate : function(key) {
      this._getUserById(key).addClass("inactive");
    }
  });
})(jQuery);
(function($) {
  $.widget("livestreet.lsTalkList", $.livestreet.lsComponent, {
    options : {
      selectors : {
        form : "#talk-form",
        formAction : "#talk-form-action",
        button : ".js-talk-form-button",
        buttonMarkAsRead : ".js-talk-form-button[data-action=mark_as_read]",
        buttonRemove : ".js-talk-form-button[data-action=remove]"
      },
      i18n : {
        remove_confirm : "@common.remove_confirm"
      }
    },
    _create : function() {
      this._super();
      var actions = this;
      $(".js-talk-actionbar-select").lsActionbarItemSelect({
        selectors : {
          target_item : ".js-talk-list-item"
        }
      });
      this.elements.buttonMarkAsRead.on("click", function(canCreateDiscussions) {
        actions.setAction($(this).data("action"));
      });
      this.elements.buttonRemove.lsConfirm({
        message : this._i18n("remove_confirm"),
        onconfirm : function() {
          this.setAction("remove");
        }.bind(this)
      });
    },
    setAction : function(name) {
      if (!this.elements.form.find("input[type=checkbox]:checked").length) {
        return;
      }
      this.elements.formAction.val(name);
      this.elements.form.submit();
    }
  });
})(jQuery);
(function() {
  /**
   * @return {undefined}
   */
  function DummyNotification() {
    /** @type {!Element} */
    var target = document.createElement("div");
    /**
     * @param {string} type
     * @param {!Function} listener
     * @return {undefined}
     */
    this.addEventListener = function(type, listener) {
      target.addEventListener(type, listener.bind(this));
    };
    /**
     * @param {string} type
     * @param {!Function} handler
     * @return {undefined}
     */
    this.removeEventListener = function(type, handler) {
      target.removeEventListener(type, handler.bind(this));
    };
    /**
     * @param {!Object} type
     * @return {undefined}
     */
    this.dispatchEvent = function(type) {
      if (typeof type !== "string") {
        return;
      }
      try {
        target.dispatchEvent(new Event(type));
      } catch (n) {
        /** @type {(Event|null)} */
        var event = document.createEvent("Event");
        event.initEvent(type, false, true);
        target.dispatchEvent(event);
      }
    };
  }
  /**
   * @param {?} options
   * @param {?} title
   * @return {undefined}
   */
  function IENotification(options, title) {
    DummyNotification.call(this);
    var notificationIndex = IENotificationIndex;
    Object.defineProperties(this, {
      close : {
        value : function(canCreateDiscussions) {
          if (notificationIndex === IENotificationIndex) {
            window.external.msSiteModeClearIconOverlay();
            IECloseNotificationEvents.forEach(function(type) {
              window.removeEventListener(type, this.close);
            }.bind(this));
            this.dispatchEvent("click");
            this.dispatchEvent("close");
            /** @type {null} */
            notificationIndex = null;
          }
        }.bind(this)
      }
    });
    this.close();
    if (this.icon) {
      window.external.msSiteModeSetIconOverlay(getIco(this.icon), this.description || this.title);
    }
    window.external.msSiteModeActivate();
    this.dispatchEvent("show");
    IECloseNotificationEvents.forEach(function(e) {
      window.addEventListener(e, this.close);
    }.bind(this));
    /** @type {number} */
    notificationIndex = ++IENotificationIndex;
  }
  /**
   * @return {undefined}
   */
  function WebKitNotification() {
  }
  /**
   * @param {string} title
   * @param {!Object} options
   * @return {?}
   */
  function Notification(title, options) {
    var dir;
    var notification;
    if (!arguments.length) {
      throw TypeError('Failed to construct "Notification": 1 argument required, but only 0 present.');
    }
    if (title === "") {
      /** @type {string} */
      title = "\b";
    }
    if (arguments.length > 1 && "object" !== typeof options) {
      throw TypeError('Failed to construct "Notification": parameter 2 ("options") is not an object.');
    }
    dir = Object(options).dir;
    if (dir !== undefined && DIRESCTIONS.indexOf(dir) === -1) {
      throw TypeError('Failed to construct "Notification": The provided value "' + dir + '" is not a valid enum value of type NotificationDirection.');
    }
    /** @type {!Object} */
    options = Object(options);
    notification = new _Notification(title, options);
    if (!notification.body) {
      Object.defineProperty(notification, "body", {
        value : String(options.body || "")
      });
    }
    if (!notification.data) {
      Object.defineProperty(notification, "data", {
        value : options.data || null
      });
    }
    if (!notification.dir) {
      Object.defineProperty(notification, "dir", {
        value : dir || DIRESCTIONS[0]
      });
    }
    if (!notification.icon) {
      Object.defineProperty(notification, "icon", {
        value : String(options.icon || "")
      });
    }
    if (!notification.lang) {
      Object.defineProperty(notification, "lang", {
        value : String(options.lang || "")
      });
    }
    if (!notification.requireInteraction) {
      Object.defineProperty(notification, "requireInteraction", {
        value : Boolean(options.requireInteraction)
      });
    }
    if (!notification.silent) {
      Object.defineProperty(notification, "silent", {
        value : Boolean(options.silent)
      });
    }
    if (!notification.tag) {
      Object.defineProperty(notification, "tag", {
        value : String(options.tag || "")
      });
    }
    if (!notification.title) {
      Object.defineProperty(notification, "title", {
        value : String(title)
      });
    }
    if (!notification.timestamp) {
      Object.defineProperty(notification, "timestamp", {
        value : (new Date).getTime()
      });
    }
    return notification;
  }
  /** @type {string} */
  var PERMISSION_DEFAULT = "default";
  /** @type {string} */
  var PERMISSION_GRANTED = "granted";
  /** @type {string} */
  var PERMISSION_DENIED = "denied";
  /** @type {string} */
  var PERMISSION_NOTSUPPORTED = "notsupported";
  /** @type {!Array} */
  var PERMISSIONS = [PERMISSION_GRANTED, PERMISSION_DEFAULT, PERMISSION_DENIED, PERMISSION_NOTSUPPORTED];
  /** @type {!Array} */
  var DIRESCTIONS = ["auto", "ltr", "rtl"];
  /** @type {number} */
  var IENotificationIndex = -1;
  /** @type {!Array} */
  var IECloseNotificationEvents = ["click", "scroll", "focus"];
  /**
   * @param {string} icon
   * @return {?}
   */
  var getIco = function(icon) {
    var lastIndex = icon.lastIndexOf(".");
    return (lastIndex !== -1 ? icon.substr(0, lastIndex) : icon) + ".ico";
  };
  var _Notification = window.Notification || window.webkitNotifications && WebKitNotification || "external" in window && "msIsSiteMode" in window.external && window.external.msIsSiteMode() !== undefined && IENotification || DummyNotification;
  Object.defineProperty(DummyNotification, "permission", {
    enumerable : true,
    get : function() {
      return PERMISSION_NOTSUPPORTED;
    }
  });
  Object.defineProperty(DummyNotification, "requestPermission", {
    enumerable : true,
    writable : true,
    value : function(type) {
      type(this.permission);
    }
  });
  Object.defineProperty(IENotification, "permission", {
    enumerable : true,
    get : function() {
      var isTabPinned = window.external.msIsSiteMode();
      return isTabPinned ? PERMISSION_GRANTED : PERMISSION_DENIED;
    }
  });
  Object.defineProperty(IENotification, "requestPermission", {
    enumerable : true,
    writable : true,
    value : function(type) {
      return new Promise(function(callback, canCreateDiscussions) {
        if (this.permission === PERMISSION_DENIED) {
          alert(this.PERMISSION_REQUEST_MESSAGE);
        }
        callback(this.permission);
      }.bind(this));
    }
  });
  Object.defineProperty(IENotification, "PERMISSION_REQUEST_MESSAGE", {
    writable : true,
    value : "IE supports notifications in pinned mode only. Pin this page on your taskbar to receive notifications."
  });
  Object.defineProperty(WebKitNotification, "permission", {
    enumerable : true,
    get : function() {
      return PERMISSIONS[window.webkitNotifications.checkPermission()];
    }
  });
  Object.defineProperty(WebKitNotification, "requestPermission", {
    enumerable : true,
    writable : true,
    value : function(type) {
      return new Promise(function(saveNotifs, canCreateDiscussions) {
        window.webkitNotifications.requestPermission(function(notifications) {
          saveNotifs(notifications);
        });
      });
    }
  });
  if (!_Notification.permission) {
    Object.defineProperty(_Notification, "permission", {
      enumerable : true,
      get : function() {
        return _Notification.permissionLevel && _Notification.permissionLevel();
      }
    });
  }
  Object.defineProperty(Notification, "permission", {
    enumerable : true,
    get : function() {
      return _Notification.permission;
    }
  });
  Object.defineProperty(Notification, "requestPermission", {
    enumerable : true,
    value : function() {
      return new Promise(function(func, i) {
        var ret = _Notification.requestPermission(function(ldata) {
          func(ldata);
        });
        if (!(ret instanceof Promise)) {
          return;
        }
        func(ret);
      });
    }
  });
  /** @type {function(string, !Object): ?} */
  window.Notification = Notification;
})();
ls = ls || {};
ls.realtime = ls.realtime || {};
ls.realtime.connection = function(ws, config) {
  /**
   * @return {?}
   */
  this._isFayeInitialized = function() {
    return ws !== undefined;
  };
  /**
   * @return {?}
   */
  this._hasClient = function() {
    return this.client !== undefined;
  };
  /**
   * @param {string} name
   * @return {?}
   */
  this._isSubscribed = function(name) {
    return this.client._channels._channels[name] !== undefined;
  };
  /**
   * @param {string} name
   * @param {!Function} request
   * @return {?}
   */
  this.subscribe = function(name, request) {
    if (typeof Faye !== "undefined") {
      ws = ws || Faye;
    }
    if (!this._isFayeInitialized()) {
      ls.dev.debug("Faye did not initialized");
      return false;
    }
    if (!this._hasClient()) {
      this.client = new ws.Client(config.server_address, {
        timeout : config.client_timeout
      });
    }
    if (!this._hasClient()) {
      ls.dev.debug("Faye client did not initialized");
      return false;
    }
    if (this._isSubscribed(name)) {
      delete this.client._channels._channels[name];
    }
    this.client.subscribe(name, request).callback(function() {
    });
    return true;
  };
  return this;
}.call(ls.realtime.connection || {}, undefined, REALTIME_OPTIONS || {});
ls = ls || {};
ls.realtime = ls.realtime || {};
ls.realtime.notification = function($, Notification, log) {
  /** @type {string} */
  this.soundContainerId = "realtime_notification_sound_container";
  /**
   * @param {!Object} data
   * @param {!Array} t
   * @return {?}
   */
  var e = function(data, t) {
    var obj = {};
    var i;
    for (i in data) {
      if (t.indexOf(i) >= 0) {
        continue;
      }
      if (!Object.prototype.hasOwnProperty.call(data, i)) {
        continue;
      }
      obj[i] = data[i];
    }
    return obj;
  };
  /**
   * @param {string} type
   * @param {!Object} name
   * @return {undefined}
   */
  this.show = function(type, name) {
    name = name === undefined ? {} : name;
    var str = name.type;
    var get = name.sound;
    name = e(name, ["type", "sound"]);
    log.show(type, name.body, str);
    this._showSystemNotification(type, name);
    if (typeof pjax !== "undefined") {
      pjax.refresh();
    }
  };
  /**
   * @param {string} text
   * @param {!Object} el
   * @return {undefined}
   */
  this._showSystemNotification = function(text, el) {
    el = el === undefined ? {} : el;
    var field = el.force;
    var primitive = el.events === undefined ? {} : el.events;
    el = e(el, ["requestPermission", "systemEvents"]);
    if (text) {
      text = this._prepareText(text);
    }
    if (el.body !== undefined) {
      el.body = this._prepareText(el.body);
    }
    /**
     * @param {string} data
     * @param {!Object} value
     * @param {!Object} options
     * @return {undefined}
     */
    var render = function(data, value, options) {
      var n = new Notification(data, value);
      n.onclick = options.onclick;
      n.onerror = options.onerror;
    };
    if (field && Notification.permission === "default") {
      Notification.requestPermission().then(function(result) {
        if (result === "granted") {
          render(text, el, primitive);
        }
      });
    }
    if (Notification.permission === "granted") {
      render(text, el, primitive);
    }
  };
  /**
   * @param {string} text
   * @return {?}
   */
  this._prepareText = function(text) {
    return text.replace(/<\/?[^>]+>/gi, "").replace(/\s{2,}/g, " ");
  };
  /**
   * @param {string} descriptor
   * @param {string} name
   * @return {undefined}
   */
  this._play = function(descriptor, name) {
    if (!this._hasSoundContainer()) {
      this._initSoundContainer();
    }
    this._$soundContainer().html('<audio autoplay="autoplay"><source src="' + descriptor + '" type="audio/mpeg" /><source src="' + name + '" type="audio/ogg" /><embed hidden="true" autostart="true" loop="false" src="' + descriptor + '" /></audio>');
  };
  /**
   * @return {undefined}
   */
  this._initSoundContainer = function() {
    var sparklineElement = $("<div>", {
      id : this.soundContainerId
    });
    $("body").append(sparklineElement);
  };
  /**
   * @return {?}
   */
  this._hasSoundContainer = function() {
    return this._$soundContainer().length !== 0;
  };
  /**
   * @return {?}
   */
  this._$soundContainer = function() {
    return $("#" + this.soundContainerId);
  };
  return this;
}.call(ls.realtime.notification || {}, jQuery, Notification, ls.notification);
(function($, canCreateDiscussions) {
  $.widget("livestreet.lsTalkCounter", $.livestreet.lsComponent, {
    options : {
      selectors : {
        counter : ".bubble"
      },
      current_user_realtime_channel : canCreateDiscussions.current_user_realtime_channel
    },
    _create : function() {
      this._super();
      this.subscribeToTalkCountModel();
    },
    subscribeToTalkCountModel : function() {
      var i = this.option("current_user_realtime_channel");
      if (!i) {
        ls.dev.debug("Subscription disabled for guest");
        return false;
      }
      ls.realtime.connection.subscribe("/" + i, this.onTalkCount.bind(this));
      return true;
    },
    onTalkCount : function(response) {
      if (response.type !== "talk_count") {
        return;
      }
      if (response.action !== "update") {
        return;
      }
      this.element.attr("data-count", response.entity.count);
      this.elements.counter.text(response.entity.count);
      /** @type {number} */
      var $target_value = $(".js-feed-counter")[0] ? parseInt($(".js-feed-counter").attr("data-count")) : 0;
      $(".js-events-counter .bubble").text(parseInt(response.entity.count) + $target_value);
      if (response.entity.count) {
        $(".js-talk-counter,.js-talk-counter .bubble,.js-events-counter .bubble").removeClass("hidden");
      } else {
        $(".js-talk-counter .bubble").addClass("hidden");
      }
    }
  });
})(jQuery, TALK_OPTIONS);
ls.hook.add("ls_template_init_end", function() {
  $(".js-talk-counter").lsTalkCounter();
});
ls = ls || {};
ls.talk_notifications = function(canCreateDiscussions, gameOptions, notify) {
  /**
   * @return {undefined}
   */
  this.init = function() {
    this.subscribeToTalkCountModel();
  };
  /**
   * @return {?}
   */
  this.subscribeToTalkCountModel = function() {
    var itemid = gameOptions.current_user_realtime_channel;
    if (!itemid) {
      ls.dev.debug("Subscription disabled for guest");
      return false;
    }
    ls.realtime.connection.subscribe("/" + itemid, this.onNotification.bind(this));
    return true;
  };
  /**
   * @param {!Object} msg
   * @return {undefined}
   */
  this.onNotification = function(msg) {
    if (msg.type !== "notification") {
      return;
    }
    if (msg.action !== "create") {
      return;
    }
    notify.show(null, {
      body : msg.entity.text,
      sound : gameOptions.message_sound
    });
  };
  return this;
}.call(ls.talk_notifications || {}, jQuery, TALK_OPTIONS, ls.realtime.notification);
ls.hook.add("ls_template_init_end", function() {
  ls.talk_notifications.init();
});
(function($, canCreateDiscussions) {
  $.widget("livestreet.lsComments", $.livestreet.lsComments, {
    options : {
      current_user_realtime_channel : canCreateDiscussions.current_user_realtime_channel
    },
    _create : function() {
      this._super();
      this.subscribeToCommentModel();
    },
    subscribeToCommentModel : function() {
      var i = this.option("current_user_realtime_channel");
      if (!i) {
        ls.dev.debug("Subscription disabled for guest");
        return false;
      }
      ls.realtime.connection.subscribe("/" + i, this.onComment.bind(this));
      return true;
    },
    onComment : function(line) {
      if (line.type !== "comment") {
        return;
      }
      var result = {
        create : this.onCreateComment.bind(this),
        update : this.onUpdateComment.bind(this)
      };
      result[line.action](line);
    },
    onCreateComment : function(e) {
      if (e.entity.target_type !== this._targetType) {
        return;
      }
      if (e.entity.target_id !== this._targetId.toString()) {
        return;
      }
      var value = this.buildComment(e.entity.html);
      this.addComments(value);
      this.insert(value, e.entity.id, e.entity.pid);
      this.setLastCommentId(e.entity.id);
      if (this.options.folding) {
        this.unfoldAll();
      }
      var item = this.getComments().length;
      this.elements.title.text(this._i18n("comments", null, item));
      if (typeof newCommentsFadeInit === "function") {
        newCommentsFadeInit();
      }
      if (!item) {
        this.elements.empty.hide();
      }
    },
    onUpdateComment : function(e) {
      if (e.entity.target_type !== this._targetType) {
        return;
      }
      if (e.entity.target_id !== this._targetId.toString()) {
        return;
      }
      var toggleColElement = this.getCommentById(e.entity.id);
      var type = this.buildComment(e.entity.html);
      this.removeCommentById(e.entity.id);
      this.addComments(type);
      toggleColElement.replaceWith(type);
    },
    buildComment : function(selector) {
      return this.initComments($($.trim(selector)));
    }
  });
})(jQuery, TALK_OPTIONS);
(function($, canCreateDiscussions) {
  $.widget("livestreet.lsBlockLive", $.livestreet.lsComponent, {
    options : {
      selectors : {
        content : ".ls-block-live-wrapper"
      },
      comment_live_block_realtime_channel : canCreateDiscussions.comment_live_block_realtime_channel
    },
    _create : function() {
      this._super();
      this.subscribeToCommentModel();
    },
    subscribeToCommentModel : function() {
      if ($(".js-block-live")[0]) {
        var i = this.option("comment_live_block_realtime_channel");
        ls.realtime.connection.subscribe("/" + i, this.onComment.bind(this));
        return true;
      }
      return false;
    },
    onComment : function(line) {
      if (line.type !== "comment") {
        return;
      }
      var result = {
        create : this.onCreateComment.bind(this),
        update : this.onUpdateComment.bind(this)
      };
      result[line.action](line);
    },
    onCreateComment : function(e) {
      if (e.entity.target_type !== "topic" || e.entity.target_topic_type !== "book") {
        return;
      }
      if ($(".js-comments").attr("data-target-id") == e.entity.target_id && $(".js-comments").attr("data-user-id") != e.entity.user_id) {
        $(".js-comments").lsComments("load", undefined, false);
        var master_settings_element = $(".js-comment[data-id=" + e.entity.id + "]");
        $(".js-vote-comment", master_settings_element).lsVote({
          urls : {
            vote : aRouter["ajax"] + "vote/comment/"
          }
        });
        $(".js-favourite-comment", master_settings_element).lsFavourite({
          urls : {
            toggle : aRouter["ajax"] + "favourite/comment/"
          }
        });
      }
      var n = $(".container__side--item[data-target-id=" + e.entity.target_id + "]");
      if (n.length) {
        n.remove();
      } else {
        this.elements.content.children().last().remove();
      }
      this.elements.content.prepend(e.entity.html);
      pjax.refresh();
    },
    onUpdateComment : function(canCreateDiscussions) {
    }
  });
})(jQuery, TALK_OPTIONS);
ls.hook.add("ls_template_init_end", function() {
  $(".js-block-live").lsBlockLive();
});
(function(e$jscomp$1066) {
  /**
   * @param {string} n$jscomp$588
   * @param {number} a$jscomp$254
   * @return {?}
   */
  e$jscomp$1066.fn.markItUp = function(n$jscomp$588, a$jscomp$254) {
    var s$jscomp$367;
    var u$jscomp$113;
    var t$jscomp$1169;
    var i$jscomp$640;
    var o$jscomp$317;
    var l$jscomp$131;
    /** @type {boolean} */
    i$jscomp$640 = o$jscomp$317 = l$jscomp$131 = false;
    if (typeof n$jscomp$588 == "string") {
      /** @type {string} */
      s$jscomp$367 = n$jscomp$588;
      /** @type {number} */
      u$jscomp$113 = a$jscomp$254;
    }
    t$jscomp$1169 = {
      id : "",
      nameSpace : "",
      root : "",
      previewHandler : false,
      previewInWindow : "",
      previewInElement : "",
      previewAutoRefresh : true,
      previewPosition : "after",
      previewTemplatePath : "~/templates/preview.html",
      previewParser : false,
      previewParserPath : "",
      previewParserVar : "data",
      resizeHandle : true,
      beforeInsert : "",
      afterInsert : "",
      onEnter : {},
      onShiftEnter : {},
      onCtrlEnter : {},
      onTab : {},
      markupSet : [{}]
    };
    e$jscomp$1066.extend(t$jscomp$1169, n$jscomp$588, a$jscomp$254);
    if (!t$jscomp$1169.root) {
      e$jscomp$1066("script").each(function(n, D) {
        miuScript = e$jscomp$1066(D).get(0).src.match(/(.*)jquery\.markitup(\.pack)?\.js$/);
        if (miuScript !== null) {
          t$jscomp$1169.root = miuScript[1];
        }
      });
    }
    /**
     * @param {string} a
     * @return {?}
     */
    var p$jscomp$54 = function(a) {
      a = a.toLowerCase();
      /** @type {!Array<string>} */
      var BROWSER_ENGINES = /(chrome)[ \/]([\w.]+)/.exec(a) || /(webkit)[ \/]([\w.]+)/.exec(a) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(a) || /(msie) ([\w.]+)/.exec(a) || a.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(a) || [];
      return {
        browser : BROWSER_ENGINES[1] || "",
        version : BROWSER_ENGINES[2] || "0"
      };
    };
    var c$jscomp$79 = p$jscomp$54(navigator.userAgent);
    var r$jscomp$428 = {};
    if (c$jscomp$79.browser) {
      /** @type {boolean} */
      r$jscomp$428[c$jscomp$79.browser] = true;
      r$jscomp$428.version = c$jscomp$79.version;
    }
    if (r$jscomp$428.chrome) {
      /** @type {boolean} */
      r$jscomp$428.webkit = true;
    } else {
      if (r$jscomp$428.webkit) {
        /** @type {boolean} */
        r$jscomp$428.safari = true;
      }
    }
    return this.each(function() {
      /**
       * @param {string} path
       * @param {number} value
       * @return {?}
       */
      function I$jscomp$8(path, value) {
        if (value) {
          return path.replace(/("|')~\//g, "$1" + t$jscomp$1169.root);
        }
        return path.replace(/^~\//, t$jscomp$1169.root);
      }
      /**
       * @return {undefined}
       */
      function K$jscomp$3() {
        /** @type {string} */
        id = "";
        /** @type {string} */
        nameSpace = "";
        if (t$jscomp$1169.id) {
          /** @type {string} */
          id = 'id="' + t$jscomp$1169.id + '"';
        } else {
          if (n$jscomp$590.attr("id")) {
            /** @type {string} */
            id = 'id="markItUp' + n$jscomp$590.attr("id").substr(0, 1).toUpperCase() + n$jscomp$590.attr("id").substr(1) + '"';
          }
        }
        if (t$jscomp$1169.nameSpace) {
          /** @type {string} */
          nameSpace = 'class="' + t$jscomp$1169.nameSpace + '"';
        }
        n$jscomp$590.wrap("<div " + nameSpace + "></div>");
        n$jscomp$590.wrap("<div " + id + ' class="markItUp"></div>');
        n$jscomp$590.wrap('<div class="markItUpContainer"></div>');
        n$jscomp$590.addClass("markItUpEditor");
        w$jscomp$27 = e$jscomp$1066('<div class="markItUpHeader"></div>').insertBefore(n$jscomp$590);
        e$jscomp$1066(E$jscomp$11(t$jscomp$1169.markupSet)).appendTo(w$jscomp$27);
        P$jscomp$6 = e$jscomp$1066('<div class="markItUpFooter"></div>').insertAfter(n$jscomp$590);
        if (t$jscomp$1169.resizeHandle === true && r$jscomp$428.safari !== true) {
          resizeHandle = e$jscomp$1066('<div class="markItUpResizeHandle"></div>').insertAfter(n$jscomp$590).bind("mousedown.markItUp", function(event) {
            var st = n$jscomp$590.height();
            var y = event.clientY;
            var handler;
            var expand;
            /**
             * @param {!Event} e
             * @return {?}
             */
            handler = function(e) {
              n$jscomp$590.css("height", Math.max(20, e.clientY + st - y) + "px");
              return false;
            };
            /**
             * @param {?} deep
             * @return {?}
             */
            expand = function(deep) {
              e$jscomp$1066("html").unbind("mousemove.markItUp", handler).unbind("mouseup.markItUp", expand);
              return false;
            };
            e$jscomp$1066("html").bind("mousemove.markItUp", handler).bind("mouseup.markItUp", expand);
          });
          P$jscomp$6.append(resizeHandle);
        }
        n$jscomp$590.bind("keydown.markItUp", R$jscomp$7).bind("keyup", R$jscomp$7);
        n$jscomp$590.bind("insertion.markItUp", function(canCreateDiscussions, n) {
          if (n.target !== false) {
            x$jscomp$92();
          }
          if (a$jscomp$255 === e$jscomp$1066.markItUp.focused) {
            g$jscomp$40(n);
          }
        });
        n$jscomp$590.bind("focus.markItUp", function() {
          e$jscomp$1066.markItUp.focused = this;
        });
        if (t$jscomp$1169.previewInElement) {
          W$jscomp$5();
        }
      }
      /**
       * @param {!Object} t$jscomp$1174
       * @return {?}
       */
      function E$jscomp$11(t$jscomp$1174) {
        var r$jscomp$431 = e$jscomp$1066("<ul></ul>");
        /** @type {number} */
        var i$jscomp$642 = 0;
        e$jscomp$1066("li:hover > ul", r$jscomp$431).css("display", "block");
        e$jscomp$1066.each(t$jscomp$1174, function() {
          var t$jscomp$1175 = this;
          /** @type {string} */
          var l$jscomp$132 = "";
          var s$jscomp$368;
          var a$jscomp$257;
          var o$jscomp$319;
          s$jscomp$368 = t$jscomp$1175.key ? (t$jscomp$1175.name || "") + " [Ctrl+" + t$jscomp$1175.key + "]" : t$jscomp$1175.name || "";
          /** @type {string} */
          key = t$jscomp$1175.key ? 'accesskey="' + t$jscomp$1175.key + '"' : "";
          if (t$jscomp$1175.separator) {
            a$jscomp$257 = e$jscomp$1066('<li class="markItUpSeparator">' + (t$jscomp$1175.separator || "") + "</li>").appendTo(r$jscomp$431);
          } else {
            i$jscomp$642++;
            /** @type {number} */
            o$jscomp$319 = k$jscomp$13.length - 1;
            for (; o$jscomp$319 >= 0; o$jscomp$319--) {
              /** @type {string} */
              l$jscomp$132 = l$jscomp$132 + (k$jscomp$13[o$jscomp$319] + "-");
            }
            a$jscomp$257 = e$jscomp$1066('<li class="markItUpButton markItUpButton' + l$jscomp$132 + i$jscomp$642 + " " + (t$jscomp$1175.className || "") + '"><a href="" ' + key + ' title="' + s$jscomp$368 + '">' + (t$jscomp$1175.name || "") + "</a></li>").bind("contextmenu.markItUp", function() {
              return false;
            }).bind("click.markItUp", function(event) {
              event.preventDefault();
            }).bind("focusin.markItUp", function() {
              n$jscomp$590.focus();
            }).bind("mouseup", function() {
              if (t$jscomp$1175.call) {
                eval(t$jscomp$1175.call)();
              }
              setTimeout(function() {
                g$jscomp$40(t$jscomp$1175);
              }, 1);
              return false;
            }).bind("mouseenter.markItUp", function() {
              e$jscomp$1066("> ul", this).show();
              e$jscomp$1066(document).one("click", function() {
                e$jscomp$1066("ul ul", w$jscomp$27).hide();
              });
            }).bind("mouseleave.markItUp", function() {
              e$jscomp$1066("> ul", this).hide();
            }).appendTo(r$jscomp$431);
            if (t$jscomp$1175.dropMenu) {
              k$jscomp$13.push(i$jscomp$642);
              e$jscomp$1066(a$jscomp$257).addClass("markItUpDropMenu").append(E$jscomp$11(t$jscomp$1175.dropMenu));
            }
          }
        });
        k$jscomp$13.pop();
        return r$jscomp$431;
      }
      /**
       * @param {string} b
       * @return {?}
       */
      function j$jscomp$8(b) {
        if (b) {
          b = b.toString();
          b = b.replace(/\(!\(([\s\S]*?)\)!\)/g, function(canCreateDiscussions, clusterShardData) {
            var args = clusterShardData.split("|!|");
            if (l$jscomp$131 === true) {
              return args[1] !== undefined ? args[1] : args[0];
            } else {
              return args[1] === undefined ? "" : args[0];
            }
          });
          b = b.replace(/\[!\[([\s\S]*?)\]!\]/g, function(canCreateDiscussions, clusterShardData) {
            var bare_element = clusterShardData.split(":!:");
            if (b$jscomp$18 === true) {
              return false;
            }
            /** @type {(null|string)} */
            value = prompt(bare_element[0], bare_element[1] ? bare_element[1] : "");
            if (value === null) {
              /** @type {boolean} */
              b$jscomp$18 = true;
            }
            return value;
          });
          return b;
        }
        return "";
      }
      /**
       * @param {string} c
       * @return {?}
       */
      function d$jscomp$64(c) {
        if (e$jscomp$1066.isFunction(c)) {
          c = c(v$jscomp$33);
        }
        return j$jscomp$8(c);
      }
      /**
       * @param {!Object} method
       * @return {?}
       */
      function y$jscomp$81(method) {
        var openWith = d$jscomp$64(f$jscomp$81.openWith);
        var placeHolder = d$jscomp$64(f$jscomp$81.placeHolder);
        var replaceWith = d$jscomp$64(f$jscomp$81.replaceWith);
        var closeWith = d$jscomp$64(f$jscomp$81.closeWith);
        var openBlockWith = d$jscomp$64(f$jscomp$81.openBlockWith);
        var closeBlockWith = d$jscomp$64(f$jscomp$81.closeBlockWith);
        var m = f$jscomp$81.multiline;
        if (replaceWith !== "") {
          block = openWith + replaceWith + closeWith;
        } else {
          if (selection === "" && placeHolder !== "") {
            block = openWith + placeHolder + closeWith;
          } else {
            method = method || selection;
            /** @type {!Array} */
            var arr = [method];
            /** @type {!Array} */
            var blocks = [];
            if (m === true) {
              arr = method.split(/\r?\n/);
            }
            /** @type {number} */
            var i = 0;
            for (; i < arr.length; i++) {
              line = arr[i];
              var trailingSpaces;
              if (trailingSpaces = line.match(/ *$/)) {
                blocks.push(openWith + line.replace(/ *$/g, "") + closeWith + trailingSpaces);
              } else {
                blocks.push(openWith + line + closeWith);
              }
            }
            /** @type {string} */
            block = blocks.join("\n");
          }
        }
        block = openBlockWith + block + closeBlockWith;
        return {
          block : block,
          openBlockWith : openBlockWith,
          openWith : openWith,
          replaceWith : replaceWith,
          placeHolder : placeHolder,
          closeWith : closeWith,
          closeBlockWith : closeBlockWith
        };
      }
      /**
       * @param {!Object} s
       * @return {undefined}
       */
      function g$jscomp$40(s) {
        var hlen;
        var j;
        var n;
        var index;
        v$jscomp$33 = f$jscomp$81 = s;
        x$jscomp$92();
        e$jscomp$1066.extend(v$jscomp$33, {
          line : "",
          root : t$jscomp$1169.root,
          textarea : a$jscomp$255,
          selection : selection || "",
          caretPosition : p$jscomp$55,
          ctrlKey : i$jscomp$640,
          shiftKey : o$jscomp$317,
          altKey : l$jscomp$131
        });
        d$jscomp$64(t$jscomp$1169.beforeInsert);
        d$jscomp$64(f$jscomp$81.beforeInsert);
        if (i$jscomp$640 === true && o$jscomp$317 === true || s.multiline === true) {
          d$jscomp$64(f$jscomp$81.beforeMultiInsert);
        }
        e$jscomp$1066.extend(v$jscomp$33, {
          line : 1
        });
        if (i$jscomp$640 === true && o$jscomp$317 === true) {
          lines = selection.split(/\r?\n/);
          /** @type {number} */
          j = 0;
          n = lines.length;
          /** @type {number} */
          index = 0;
          for (; index < n; index++) {
            if (e$jscomp$1066.trim(lines[index]) !== "") {
              e$jscomp$1066.extend(v$jscomp$33, {
                line : ++j,
                selection : lines[index]
              });
              lines[index] = y$jscomp$81(lines[index]).block;
            } else {
              /** @type {string} */
              lines[index] = "";
            }
          }
          string = {
            block : lines.join("\n")
          };
          start = p$jscomp$55;
          hlen = string.block.length + (r$jscomp$428.opera ? n - 1 : 0);
        } else {
          if (i$jscomp$640 === true) {
            string = y$jscomp$81(selection);
            start = p$jscomp$55 + string.openWith.length;
            /** @type {number} */
            hlen = string.block.length - string.openWith.length - string.closeWith.length;
            /** @type {number} */
            hlen = hlen - (string.block.match(/ $/) ? 1 : 0);
            /** @type {number} */
            hlen = hlen - S$jscomp$8(string.block);
          } else {
            if (o$jscomp$317 === true) {
              string = y$jscomp$81(selection);
              start = p$jscomp$55;
              hlen = string.block.length;
              /** @type {number} */
              hlen = hlen - S$jscomp$8(string.block);
            } else {
              string = y$jscomp$81(selection);
              start = p$jscomp$55 + string.block.length;
              /** @type {number} */
              hlen = 0;
              /** @type {number} */
              start = start - S$jscomp$8(string.block);
            }
          }
        }
        if (selection === "" && string.replaceWith === "") {
          m$jscomp$36 = m$jscomp$36 + C$jscomp$12(string.block);
          start = p$jscomp$55 + string.openBlockWith.length + string.openWith.length;
          /** @type {number} */
          hlen = string.block.length - string.openBlockWith.length - string.openWith.length - string.closeWith.length - string.closeBlockWith.length;
          m$jscomp$36 = n$jscomp$590.val().substring(p$jscomp$55, n$jscomp$590.val().length).length;
          /** @type {number} */
          m$jscomp$36 = m$jscomp$36 - C$jscomp$12(n$jscomp$590.val().substring(0, p$jscomp$55));
        }
        e$jscomp$1066.extend(v$jscomp$33, {
          caretPosition : p$jscomp$55,
          scrollPosition : U$jscomp$3
        });
        if (string.block !== selection && b$jscomp$18 === false) {
          A$jscomp$8(string.block);
          H$jscomp$7(start, hlen);
        } else {
          /** @type {number} */
          m$jscomp$36 = -1;
        }
        x$jscomp$92();
        e$jscomp$1066.extend(v$jscomp$33, {
          line : "",
          selection : selection
        });
        if (i$jscomp$640 === true && o$jscomp$317 === true || s.multiline === true) {
          d$jscomp$64(f$jscomp$81.afterMultiInsert);
        }
        d$jscomp$64(f$jscomp$81.afterInsert);
        d$jscomp$64(t$jscomp$1169.afterInsert);
        if (c$jscomp$80 && t$jscomp$1169.previewAutoRefresh) {
          W$jscomp$5();
        }
        /** @type {boolean} */
        o$jscomp$317 = l$jscomp$131 = i$jscomp$640 = b$jscomp$18 = false;
      }
      /**
       * @param {string} b
       * @return {?}
       */
      function C$jscomp$12(b) {
        if (r$jscomp$428.opera) {
          return b.length - b.replace(/\n*/g, "").length;
        }
        return 0;
      }
      /**
       * @param {string} selector
       * @return {?}
       */
      function S$jscomp$8(selector) {
        if (r$jscomp$428.msie) {
          return selector.length - selector.replace(/\r*/g, "").length;
        }
        return 0;
      }
      /**
       * @param {string} data
       * @return {undefined}
       */
      function A$jscomp$8(data) {
        if (document.selection) {
          /** @type {(ControlRange|TextRange|null)} */
          var theScriptElement = document.selection.createRange();
          /** @type {string} */
          theScriptElement.text = data;
        } else {
          a$jscomp$255.value = a$jscomp$255.value.substring(0, p$jscomp$55) + data + a$jscomp$255.value.substring(p$jscomp$55 + selection.length, a$jscomp$255.value.length);
        }
      }
      /**
       * @param {number} s
       * @param {number} len
       * @return {?}
       */
      function H$jscomp$7(s, len) {
        if (a$jscomp$255.createTextRange) {
          if (r$jscomp$428.opera && r$jscomp$428.version >= 9.5 && len == 0) {
            return false;
          }
          range = a$jscomp$255.createTextRange();
          range.collapse(true);
          range.moveStart("character", s);
          range.moveEnd("character", len);
          range.select();
        } else {
          if (a$jscomp$255.setSelectionRange) {
            a$jscomp$255.setSelectionRange(s, s + len);
          }
        }
        a$jscomp$255.scrollTop = U$jscomp$3;
        a$jscomp$255.focus();
      }
      /**
       * @return {?}
       */
      function x$jscomp$92() {
        a$jscomp$255.focus();
        U$jscomp$3 = a$jscomp$255.scrollTop;
        if (document.selection) {
          /** @type {string} */
          selection = document.selection.createRange().text;
          if (r$jscomp$428.msie) {
            /** @type {(ControlRange|TextRange|null)} */
            var selectionRange = document.selection.createRange();
            var range = selectionRange.duplicate();
            range.moveToElementText(a$jscomp$255);
            /** @type {number} */
            p$jscomp$55 = -1;
            for (; range.inRange(selectionRange);) {
              range.moveStart("character");
              p$jscomp$55++;
            }
          } else {
            p$jscomp$55 = a$jscomp$255.selectionStart;
          }
        } else {
          p$jscomp$55 = a$jscomp$255.selectionStart;
          selection = a$jscomp$255.value.substring(p$jscomp$55, a$jscomp$255.selectionEnd);
        }
        return selection;
      }
      /**
       * @return {undefined}
       */
      function z$jscomp$15() {
        if (typeof t$jscomp$1169.previewHandler === "function") {
          /** @type {boolean} */
          c$jscomp$80 = true;
        } else {
          if (t$jscomp$1169.previewInElement) {
            c$jscomp$80 = e$jscomp$1066(t$jscomp$1169.previewInElement);
          } else {
            if (!c$jscomp$80 || c$jscomp$80.closed) {
              if (t$jscomp$1169.previewInWindow) {
                /** @type {(Window|null)} */
                c$jscomp$80 = window.open("", "preview", t$jscomp$1169.previewInWindow);
                e$jscomp$1066(window).unload(function() {
                  c$jscomp$80.close();
                });
              } else {
                h$jscomp$67 = e$jscomp$1066('<iframe class="markItUpPreviewFrame"></iframe>');
                if (t$jscomp$1169.previewPosition == "after") {
                  h$jscomp$67.insertAfter(P$jscomp$6);
                } else {
                  h$jscomp$67.insertBefore(w$jscomp$27);
                }
                c$jscomp$80 = h$jscomp$67[h$jscomp$67.length - 1].contentWindow || frame[h$jscomp$67.length - 1];
              }
            } else {
              if (l$jscomp$131 === true) {
                if (h$jscomp$67) {
                  h$jscomp$67.remove();
                } else {
                  c$jscomp$80.close();
                }
                /** @type {boolean} */
                c$jscomp$80 = h$jscomp$67 = false;
              }
            }
          }
        }
        if (!t$jscomp$1169.previewAutoRefresh) {
          W$jscomp$5();
        }
        if (t$jscomp$1169.previewInWindow) {
          c$jscomp$80.focus();
        }
      }
      /**
       * @return {undefined}
       */
      function W$jscomp$5() {
        M$jscomp$8();
      }
      /**
       * @return {?}
       */
      function M$jscomp$8() {
        var i;
        if (t$jscomp$1169.previewHandler && typeof t$jscomp$1169.previewHandler === "function") {
          t$jscomp$1169.previewHandler(n$jscomp$590.val());
        } else {
          if (t$jscomp$1169.previewParser && typeof t$jscomp$1169.previewParser === "function") {
            var one = t$jscomp$1169.previewParser(n$jscomp$590.val());
            T$jscomp$15(I$jscomp$8(one, 1));
          } else {
            if (t$jscomp$1169.previewParserPath !== "") {
              e$jscomp$1066.ajax({
                type : "POST",
                dataType : "text",
                global : false,
                url : t$jscomp$1169.previewParserPath,
                data : t$jscomp$1169.previewParserVar + "=" + encodeURIComponent(n$jscomp$590.val()),
                success : function(type) {
                  T$jscomp$15(I$jscomp$8(type, 1));
                }
              });
            } else {
              if (!B$jscomp$5) {
                e$jscomp$1066.ajax({
                  url : t$jscomp$1169.previewTemplatePath,
                  dataType : "text",
                  global : false,
                  success : function(type) {
                    T$jscomp$15(I$jscomp$8(type, 1).replace(/\x3c!-- content --\x3e/g, n$jscomp$590.val()));
                  }
                });
              }
            }
          }
        }
        return false;
      }
      /**
       * @param {undefined} value
       * @return {undefined}
       */
      function T$jscomp$15(value) {
        if (t$jscomp$1169.previewInElement) {
          e$jscomp$1066(t$jscomp$1169.previewInElement).html(value);
        } else {
          if (c$jscomp$80 && c$jscomp$80.document) {
            try {
              sp = c$jscomp$80.document.documentElement.scrollTop;
            } catch (r) {
              /** @type {number} */
              sp = 0;
            }
            c$jscomp$80.document.open();
            c$jscomp$80.document.write(value);
            c$jscomp$80.document.close();
            c$jscomp$80.document.documentElement.scrollTop = sp;
          }
        }
      }
      /**
       * @param {!Event} event
       * @return {?}
       */
      function R$jscomp$7(event) {
        o$jscomp$317 = event.shiftKey;
        l$jscomp$131 = event.altKey;
        i$jscomp$640 = !(event.altKey && event.ctrlKey) ? event.ctrlKey || event.metaKey : false;
        if (event.type === "keydown") {
          if (i$jscomp$640 === true) {
            li = e$jscomp$1066('a[accesskey="' + (event.keyCode == 13 ? "\\n" : String.fromCharCode(event.keyCode)) + '"]', w$jscomp$27).parent("li");
            if (li.length !== 0) {
              /** @type {boolean} */
              i$jscomp$640 = false;
              setTimeout(function() {
                li.triggerHandler("mouseup");
              }, 1);
              return false;
            }
          }
          if (event.keyCode === 13 || event.keyCode === 10) {
            if (i$jscomp$640 === true) {
              /** @type {boolean} */
              i$jscomp$640 = false;
              g$jscomp$40(t$jscomp$1169.onCtrlEnter);
              return t$jscomp$1169.onCtrlEnter.keepDefault;
            } else {
              if (o$jscomp$317 === true) {
                /** @type {boolean} */
                o$jscomp$317 = false;
                g$jscomp$40(t$jscomp$1169.onShiftEnter);
                return t$jscomp$1169.onShiftEnter.keepDefault;
              } else {
                g$jscomp$40(t$jscomp$1169.onEnter);
                return t$jscomp$1169.onEnter.keepDefault;
              }
            }
          }
          if (event.keyCode === 9) {
            if (o$jscomp$317 == true || i$jscomp$640 == true || l$jscomp$131 == true) {
              return false;
            }
            if (m$jscomp$36 !== -1) {
              x$jscomp$92();
              /** @type {number} */
              m$jscomp$36 = n$jscomp$590.val().length - m$jscomp$36;
              H$jscomp$7(m$jscomp$36, 0);
              /** @type {number} */
              m$jscomp$36 = -1;
              return false;
            } else {
              g$jscomp$40(t$jscomp$1169.onTab);
              return t$jscomp$1169.onTab.keepDefault;
            }
          }
        }
      }
      /**
       * @return {undefined}
       */
      function D$jscomp$11() {
        n$jscomp$590.unbind(".markItUp").removeClass("markItUpEditor");
        n$jscomp$590.parent("div").parent("div.markItUp").parent("div").replaceWith(n$jscomp$590);
        n$jscomp$590.data("markItUp", null);
      }
      var n$jscomp$590;
      var a$jscomp$255;
      var k$jscomp$13;
      var U$jscomp$3;
      var p$jscomp$55;
      var m$jscomp$36;
      var f$jscomp$81;
      var v$jscomp$33;
      var w$jscomp$27;
      var P$jscomp$6;
      var c$jscomp$80;
      var B$jscomp$5;
      var h$jscomp$67;
      var b$jscomp$18;
      n$jscomp$590 = e$jscomp$1066(this);
      a$jscomp$255 = this;
      /** @type {!Array} */
      k$jscomp$13 = [];
      /** @type {boolean} */
      b$jscomp$18 = false;
      /** @type {number} */
      U$jscomp$3 = p$jscomp$55 = 0;
      /** @type {number} */
      m$jscomp$36 = -1;
      t$jscomp$1169.previewParserPath = I$jscomp$8(t$jscomp$1169.previewParserPath);
      t$jscomp$1169.previewTemplatePath = I$jscomp$8(t$jscomp$1169.previewTemplatePath);
      if (s$jscomp$367) {
        switch(s$jscomp$367) {
          case "remove":
            D$jscomp$11();
            break;
          case "insert":
            g$jscomp$40(u$jscomp$113);
            break;
          default:
            e$jscomp$1066.error("Method " + s$jscomp$367 + " does not exist on jQuery.markItUp");
        }
        return;
      }
      K$jscomp$3();
    });
  };
  /**
   * @return {?}
   */
  e$jscomp$1066.fn.markItUpRemove = function() {
    return this.each(function() {
      e$jscomp$1066(this).markItUp("remove");
    });
  };
  /**
   * @param {string} el
   * @return {?}
   */
  e$jscomp$1066.markItUp = function(el) {
    var t = {
      target : false
    };
    e$jscomp$1066.extend(t, el);
    if (t.target) {
      return e$jscomp$1066(t.target).each(function() {
        e$jscomp$1066(this).focus();
        e$jscomp$1066(this).trigger("insertion", [t]);
      });
    } else {
      e$jscomp$1066("textarea").trigger("insertion", [t]);
    }
  };
})(jQuery);
ls = ls || {};
ls.feed = ls.feed || {};
ls.feed = function() {
  /** @type {number} */
  this.id = 0;
  /** @type {number} */
  this.amount = 0;
  /** @type {number} */
  this.alert = 0;
  /** @type {number} */
  this.start = 1;
  this.bell = $("#feed-bell");
  this.selectors = {
    container : this.bell.find(".feed-container"),
    bubble : this.bell.find(".feed-bubble"),
    bell_alert : $("#feed-bell-alert"),
    list : $("#feed-bell-list"),
    list_up : $("#feed-list-up"),
    list_down : $("#feed-list-down"),
    list_up_loading : $("#feed-list-up-loading"),
    list_down_loading : $("#feed-list-down-loading"),
    amount : $("#feed-amount"),
    viewed : $("#feed-viewed-all"),
    loading : $("#feed-loading"),
    empty : $("#feed-empty")
  };
  /**
   * @return {undefined}
   */
  this.Init = function() {
    this.bell.click(function(event) {
      if (ls.feed.selectors.container.is(":hidden")) {
        ls.feed.selectors.container.fadeIn(300).css("top", "40px");
        if (ls.feed.amount || ls.feed.start) {
          /** @type {number} */
          ls.feed.start = 0;
          if (ls.feed.selectors.list.find("li.feed-item").length) {
            ls.feed.FeedListUp();
          } else {
            ls.feed.selectors.empty.hide();
            ls.feed.selectors.loading.show();
            ls.feed.Load("new", null, null);
          }
        }
      } else {
        ls.feed.selectors.container.fadeOut(300).css("top", "40px");
      }
      event.stopPropagation();
    });
    $(document).click(function() {
      ls.feed.selectors.container.fadeOut(300).css("top", "40px");
    });
    ls.feed.selectors.container.click(function(event) {
      event.stopPropagation();
    });
    if (ls.feed.selectors.bell_alert.length) {
      /** @type {number} */
      ls.feed.alert = 1;
    }
    /** @type {number} */
    this.amount = parseInt(ls.feed.selectors.amount.text());
    if (ls.feed.amount) {
      ls.feed.selectors.bubble.show();
    }
  };
  /**
   * @return {undefined}
   */
  this.New = function() {
    /** @type {string} */
    var e = aRouter.stream + "ajax_feed_new/";
    var s = {};
    ls.ajax.load(e, s, function(data) {
      if (data.bStateError) {
        ls.msg.error(null, data.sMsg);
      } else {
        /** @type {number} */
        var amount = parseInt(data.amount);
        if (ls.feed.amount != amount) {
          ls.feed.PlayAudio();
        }
        /** @type {number} */
        ls.feed.amount = amount;
        if (ls.feed.amount) {
          ls.feed.selectors.amount.text(ls.feed.amount).show();
          if (ls.feed.selectors.container.is(":visible")) {
            ls.feed.selectors.list_up.show();
          }
          ls.feed.selectors.bubble.show();
        } else {
          ls.feed.selectors.bubble.hide();
        }
      }
    }.bind(this));
  };
  /**
   * @param {string} fn
   * @param {!Object} url
   * @param {!Object} id
   * @return {undefined}
   */
  this.Load = function(fn, url, id) {
    /** @type {string} */
    var t = aRouter.stream + "ajax_feed_load/";
    var data = {
      event : fn,
      from_id : url,
      last_id : id
    };
    ls.ajax.load(t, data, function(data) {
      if (data.bStateError) {
        ls.msg.error(null, data.sMsg);
      } else {
        /** @type {number} */
        ls.feed.amount = 0;
        ls.feed.selectors.bubble.hide();
        ls.feed.selectors.loading.hide();
        if (data.event == "up") {
          ls.feed.selectors.list_up_loading.hide();
          ls.feed.selectors.list_up.after(data.html);
        } else {
          if (data.event == "down") {
            ls.feed.selectors.list_down_loading.hide();
            ls.feed.selectors.list_down_loading.before(data.html);
          } else {
            ls.feed.selectors.list_up.after(data.html);
          }
        }
        if (data.last_id) {
          ls.feed.selectors.list_down.show();
        }
        if (ls.feed.selectors.list.find("li.feed-item").length) {
          ls.feed.selectors.empty.hide();
          ls.feed.selectors.list.show();
        } else {
          ls.feed.selectors.empty.show();
          ls.feed.selectors.list.hide();
        }
        ls.feed.FeedMark();
      }
    }.bind(this));
  };
  /**
   * @return {undefined}
   */
  this.FeedListUp = function() {
    ls.feed.selectors.list_up_loading.show();
    ls.feed.selectors.list_up.hide();
    var relativePath = ls.feed.selectors.list.find("li.feed-item").first().data("feed-id");
    ls.feed.Load("up", relativePath, null);
  };
  /**
   * @return {undefined}
   */
  this.FeedListDown = function() {
    ls.feed.selectors.list_down_loading.show();
    ls.feed.selectors.list_down.hide();
    var engine = ls.feed.selectors.list.find("li.feed-item").last().data("feed-id");
    ls.feed.Load("down", null, engine);
  };
  $(function() {
    this.Init();
  }.bind(this));
  /**
   * @param {string} sId
   * @param {boolean} options
   * @param {number} window
   * @return {undefined}
   */
  this.FeedView = function(sId, options, window) {
    if (!sId) {
      return;
    }
    /** @type {string} */
    ls.feed.id = sId;
    var btn = $("#feed-id-" + sId);
    if (btn.length && btn.hasClass("unread")) {
      btn.removeClass("unread");
    }
    if (!window) {
      var i = aRouter["stream"] + "ajax_feed_view/";
      var d = {
        "sId" : sId,
        "sUrl" : options
      };
      ls.ajax.load(i, d, function(connectionOptions) {
        if (connectionOptions.bStateError) {
          ls.msg.error(null, connectionOptions.sMsg);
        } else {
        }
      }.bind(this));
    } else {
    }
  };
  /**
   * @return {undefined}
   */
  this.FeedViewedAll = function() {
    ls.feed.selectors.viewed.hide();
    ls.feed.selectors.list.find(".unread").removeClass("unread");
    var e = aRouter["stream"] + "ajax_feed_viewed_all/";
    var s = {};
    ls.ajax.load(e, s, function(canCreateDiscussions) {
    }.bind(this));
  };
  /**
   * @return {undefined}
   */
  this.FeedDeleteAll = function() {
    $("#stream_feed_delete_all").hide();
    var e = aRouter["stream"] + "ajax_feed_delete_all/";
    var s = {};
    ls.ajax.load(e, s, function(canCreateDiscussions) {
    }.bind(this));
  };
  /**
   * @param {string} e
   * @return {undefined}
   */
  this.FeedDelete = function(e) {
    $("#feed-id-" + e).slideUp(300);
    var s = aRouter["stream"] + "ajax_feed_delete/";
    var l = {
      id : e
    };
    ls.ajax.load(s, l, function(data) {
      if (data.bStateError) {
      } else {
        $("#feed-id-" + data.sId).remove();
        if (ls.feed.selectors.list.find("li.feed-item").length == 0) {
          ls.feed.selectors.list.hide();
          ls.feed.selectors.empty.show();
        }
      }
    }.bind(this));
  };
  /**
   * @param {!Object} command_module_id
   * @return {undefined}
   */
  this.ToggleAudio = function(command_module_id) {
    var s = aRouter["stream"] + "ajax_feed_toggle_audio/";
    var l = {
      value : command_module_id
    };
    ls.ajax.load(s, l, function(canCreateDiscussions) {
    }.bind(this));
  };
  /**
   * @return {undefined}
   */
  this.PlayAudio = function() {
    if (ls.feed.alert) {
      $("#feed-bell-alert").trigger("play");
    }
  };
  /**
   * @return {undefined}
   */
  this.FeedMark = function() {
    ls.feed.FeedViewed();
    ls.feed.selectors.list.find("li.feed-item").click(function(event) {
      if ($(this).hasClass("unread")) {
        $(this).removeClass("unread");
        ls.feed.FeedViewed();
        /** @type {number} */
        var iColumn = parseInt($(this).attr("data-feed-id"));
        ls.feed.FeedView(iColumn, false, 0);
      }
      event.stopPropagation();
    });
  };
  /**
   * @return {undefined}
   */
  this.FeedViewed = function() {
    if (ls.feed.selectors.list.find("li.unread").length) {
      ls.feed.selectors.viewed.show();
    } else {
      ls.feed.selectors.viewed.hide();
    }
  };
  return this;
}.call(ls.feed || {}, jQuery);
(function($) {
  $.widget("livestreet.lsFeedSettings", $.livestreet.lsComponent, {
    options : {
      urls : {
        toggle_type : null
      },
      selectors : {
        type_checkbox : ".js-plugin-feed-toggle-checkbox"
      }
    },
    _create : function() {
      this._super();
      this._on(this.elements.type_checkbox, {
        change : "toggleEventType"
      });
    },
    toggleEventType : function(jEvent) {
      this.option("params.type", $(jEvent.target).data("type"));
      this._load("toggle_type", function(canCreateDiscussions) {
        pjax.loadUrl(window.location.href);
      });
    }
  });
})(jQuery);
ls = ls || {};
ls.plugin = ls.plugin || {};
ls.plugin.autoopenid = function($) {
  var services = this;
  /**
   * @param {string} srv_name
   * @return {undefined}
   */
  this.goServiceLogin = function(srv_name) {
    ls.ajax.load("autoopenid/login-oauth", {
      service : srv_name,
      referal : window.location.href
    }, function(uploadConfig) {
      window.location.href = uploadConfig.sUrl;
    }.bind(this), {
      onError : function() {
        ls.msg.error(null, "\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 " + srv_name + " \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043d\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430.");
      }
    });
  };
  /**
   * @param {!Object} name
   * @param {string} host
   * @return {undefined}
   */
  this.removeService = function(name, host) {
    ls.ajax.load("autoopenid/service-remove", {
      type : name,
      id : host
    }, function(timeline_mode) {
      $("#autoopenid-service-connect-item-" + timeline_mode.id).remove();
    }.bind(this));
  };
  /**
   * @return {undefined}
   */
  this.showFormData = function() {
    $("#aoid-form-mail").hide();
    $("#aoid-form-data").show();
    $("#aoid-toggle-data").addClass("active");
    $("#aoid-toggle-mail").removeClass("active");
  };
  /**
   * @return {undefined}
   */
  this.showFormMail = function() {
    $("#aoid-form-mail").show();
    $("#aoid-form-data").hide();
    $("#aoid-toggle-data").removeClass("active");
    $("#aoid-toggle-mail").addClass("active");
  };
  /**
   * @return {undefined}
   */
  this.toggleFieldMail = function() {
    $("#aoid-field-mail").toggle();
  };
  $(function() {
    $(".js-autoopenid-auth").on("click", function(canCreateDiscussions) {
      services.goServiceLogin($(this).data("service"));
      return false;
    });
    $(document).on("click", ".js-autoopenid-remove", function(canCreateDiscussions) {
      services.removeService($(this).data("serviceType"), $(this).attr("data-service-id"));
      return false;
    });
  }.bind(this));
  return this;
}.call(ls.plugin.autoopenid || {}, jQuery);
(function(e) {
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = e();
  } else {
    if (typeof define === "function" && define.amd) {
      define([], e);
    } else {
      var f;
      if (typeof window !== "undefined") {
        /** @type {!Window} */
        f = window;
      } else {
        if (typeof global !== "undefined") {
          f = global;
        } else {
          if (typeof self !== "undefined") {
            /** @type {!Window} */
            f = self;
          } else {
            f = this;
          }
        }
      }
      f.Pjax = e();
    }
  }
})(function() {
  var e;
  var t;
  var o;
  return function() {
    /**
     * @param {!Object} o
     * @param {!Object} t
     * @param {!NodeList} r
     * @return {?}
     */
    function e(o, t, r) {
      /**
       * @param {string} id
       * @param {?} s
       * @return {?}
       */
      function s(id, s) {
        if (!t[id]) {
          if (!o[id]) {
            var i = "function" == typeof require && require;
            if (!s && i) {
              return i(id, true);
            }
            if (a) {
              return a(id, true);
            }
            /** @type {!Error} */
            var f = new Error("Cannot find module '" + id + "'");
            throw f.code = "MODULE_NOT_FOUND", f;
          }
          var u = t[id] = {
            exports : {}
          };
          o[id][0].call(u.exports, function(e) {
            var n = o[id][1][e];
            return s(n || e);
          }, u, u.exports, e, o, t, r);
        }
        return t[id].exports;
      }
      var a = "function" == typeof require && require;
      /** @type {number} */
      var o = 0;
      for (; o < r.length; o++) {
        s(r[o]);
      }
      return s;
    }
    return e;
  }()({
    1 : [function(require, module, canCreateDiscussions) {
      var f = require("./lib/execute-scripts");
      var load = require("./lib/foreach-els");
      var extend = require("./lib/parse-options");
      var data = require("./lib/switches");
      var sphereKnn = require("./lib/uniqueid");
      var addEvent = require("./lib/events/on");
      var callback = require("./lib/events/trigger");
      var $ = require("./lib/util/clone");
      var html = require("./lib/util/contains");
      var assign = require("./lib/util/extend");
      var p = require("./lib/util/noop");
      /**
       * @param {?} name
       * @return {undefined}
       */
      var exports = function(name) {
        this.state = {
          numPendingSwitches : 0,
          href : null,
          options : null
        };
        this.options = extend(name);
        this.log("Pjax options", this.options);
        if (this.options.scrollRestoration && "scrollRestoration" in history) {
          /** @type {string} */
          history.scrollRestoration = "manual";
        }
        this.maxUid = this.lastUid = sphereKnn();
        this.parseDOM(document);
        addEvent(window, "popstate", function(media) {
          if (media.state) {
            var o = $(this.options);
            o.url = media.state.url;
            o.title = media.state.title;
            /** @type {boolean} */
            o.history = false;
            o.scrollPos = media.state.scrollPos;
            if (media.state.uid < this.lastUid) {
              /** @type {boolean} */
              o.backward = true;
            } else {
              /** @type {boolean} */
              o.forward = true;
            }
            this.lastUid = media.state.uid;
            this.loadUrl(media.state.url, o);
          }
        }.bind(this));
      };
      exports.switches = data;
      exports.prototype = {
        log : require("./lib/proto/log"),
        getElements : function(el) {
          return el.querySelectorAll(this.options.elements);
        },
        parseDOM : function(element) {
          var module = require("./lib/proto/parse-element");
          load(this.getElements(element), module, this);
        },
        refresh : function(doc) {
          this.parseDOM(doc || document);
        },
        reload : function() {
          window.location.reload();
        },
        attachLink : require("./lib/proto/attach-link"),
        attachForm : require("./lib/proto/attach-form"),
        forEachSelectors : function(desiredPriority, name, whenArray) {
          return require("./lib/foreach-selectors").bind(this)(this.options.selectors, desiredPriority, name, whenArray);
        },
        switchSelectors : function(DATA_DIR, o, s, colour) {
          return require("./lib/switches-selectors").bind(this)(this.options.switches, this.options.switchesOptions, DATA_DIR, o, s, colour);
        },
        latestChance : function(place) {
          /** @type {string} */
          window.location = place;
        },
        onSwitch : function() {
          callback(window, "resize scroll");
          this.state.numPendingSwitches--;
          if (this.state.numPendingSwitches === 0) {
            this.afterAllSwitches();
          }
        },
        loadContent : function(mimeType, content) {
          if (typeof mimeType !== "string") {
            callback(document, "pjax:complete pjax:error", content);
            return;
          }
          /** @type {!HTMLDocument} */
          var doc = document.implementation.createHTMLDocument("pjax");
          /** @type {!RegExp} */
          var re = /<html[^>]+>/gi;
          /** @type {!RegExp} */
          var METADATA_REGEX = /\s?[a-z:]+(?:=['"][^'">]+['"])*/gi;
          /** @type {(Array<string>|null)} */
          var args = mimeType.match(re);
          if (args && args.length) {
            /** @type {(Array<string>|null)} */
            args = args[0].match(METADATA_REGEX);
            if (args.length) {
              args.shift();
              args.forEach(function(commentToCheck) {
                /** @type {!Array<string>} */
                var copy = commentToCheck.trim().split("=");
                if (copy.length === 1) {
                  doc.documentElement.setAttribute(copy[0], true);
                } else {
                  doc.documentElement.setAttribute(copy[0], copy[1].slice(1, -1));
                }
              });
            }
          }
          /** @type {string} */
          doc.documentElement.innerHTML = mimeType;
          this.log("load content", doc.documentElement.attributes, doc.documentElement.innerHTML.length);
          if (document.activeElement && html(document, this.options.selectors, document.activeElement)) {
            try {
              document.activeElement.blur();
            } catch (s) {
            }
          }
          this.switchSelectors(this.options.selectors, doc, document, content);
        },
        abortRequest : require("./lib/abort-request"),
        doRequest : require("./lib/send-request"),
        handleResponse : require("./lib/proto/handle-response"),
        loadUrl : function(options, data) {
          data = typeof data === "object" ? assign({}, this.options, data) : $(this.options);
          this.log("load href", options, data);
          this.abortRequest(this.request);
          callback(document, "pjax:send", data);
          this.request = this.doRequest(options, data, this.handleResponse.bind(this));
        },
        afterAllSwitches : function() {
          var autofocusEl = Array.prototype.slice.call(document.querySelectorAll("[autofocus]")).pop();
          if (autofocusEl && document.activeElement !== autofocusEl) {
            autofocusEl.focus();
          }
          this.options.selectors.forEach(function(id) {
            load(document.querySelectorAll(id), function(widthCtrl) {
              f(widthCtrl);
            });
          });
          var self = this.state;
          if (self.options.history) {
            if (!window.history.state) {
              this.lastUid = this.maxUid = sphereKnn();
              window.history.replaceState({
                url : window.location.href,
                title : document.title,
                uid : this.maxUid,
                scrollPos : [0, 0]
              }, document.title);
            }
            this.lastUid = this.maxUid = sphereKnn();
            window.history.pushState({
              url : self.href,
              title : self.options.title,
              uid : this.maxUid,
              scrollPos : [0, 0]
            }, self.options.title, self.href);
          }
          this.forEachSelectors(function(root) {
            this.parseDOM(root);
          }, this);
          callback(document, "pjax:complete pjax:success", self.options);
          if (typeof self.options.analytics === "function") {
            self.options.analytics();
          }
          if (self.options.history) {
            /** @type {!Element} */
            var data = document.createElement("a");
            data.href = this.state.href;
            if (data.hash) {
              var id = data.hash.slice(1);
              /** @type {string} */
              id = decodeURIComponent(id);
              /** @type {number} */
              var scrollTop = 0;
              /** @type {!Element} */
              var parentNode = document.getElementById(id) || document.getElementsByName(id)[0];
              if (parentNode) {
                if (parentNode.offsetParent) {
                  do {
                    scrollTop = scrollTop + parentNode.offsetTop;
                    parentNode = parentNode.offsetParent;
                  } while (parentNode);
                }
              }
              window.scrollTo(0, scrollTop);
            } else {
              if (self.options.scrollTo !== false) {
                if (self.options.scrollTo.length > 1) {
                  window.scrollTo(self.options.scrollTo[0], self.options.scrollTo[1]);
                } else {
                  window.scrollTo(0, self.options.scrollTo);
                }
              }
            }
          } else {
            if (self.options.scrollRestoration && self.options.scrollPos) {
              window.scrollTo(self.options.scrollPos[0], self.options.scrollPos[1]);
            }
          }
          this.state = {
            numPendingSwitches : 0,
            href : null,
            options : null
          };
        }
      };
      exports.isSupported = require("./lib/is-supported");
      if (exports.isSupported()) {
        /** @type {function(?): undefined} */
        module.exports = exports;
      } else {
        var P = p;
        var key;
        for (key in exports.prototype) {
          if (exports.prototype.hasOwnProperty(key) && typeof exports.prototype[key] === "function") {
            P[key] = p;
          }
        }
        module.exports = P;
      }
    }, {
      "./lib/abort-request" : 2,
      "./lib/events/on" : 4,
      "./lib/events/trigger" : 5,
      "./lib/execute-scripts" : 6,
      "./lib/foreach-els" : 7,
      "./lib/foreach-selectors" : 8,
      "./lib/is-supported" : 9,
      "./lib/parse-options" : 10,
      "./lib/proto/attach-form" : 11,
      "./lib/proto/attach-link" : 12,
      "./lib/proto/handle-response" : 13,
      "./lib/proto/log" : 14,
      "./lib/proto/parse-element" : 15,
      "./lib/send-request" : 16,
      "./lib/switches" : 18,
      "./lib/switches-selectors" : 17,
      "./lib/uniqueid" : 19,
      "./lib/util/clone" : 20,
      "./lib/util/contains" : 21,
      "./lib/util/extend" : 22,
      "./lib/util/noop" : 23
    }],
    2 : [function($, mixin, canCreateDiscussions) {
      var result = $("./util/noop");
      /**
       * @param {!Object} type
       * @return {undefined}
       */
      mixin.exports = function(type) {
        if (type && type.readyState < 4) {
          type.onreadystatechange = result;
          type.abort();
        }
      };
    }, {
      "./util/noop" : 23
    }],
    3 : [function(canCreateDiscussions, mixin, isSlidingUp) {
      /**
       * @param {!Object} value
       * @return {?}
       */
      mixin.exports = function(value) {
        var text = value.text || value.textContent || value.innerHTML || "";
        var i = value.src || "";
        var el = value.parentNode || document.querySelector("head") || document.documentElement;
        /** @type {!Element} */
        var node = document.createElement("script");
        if (text.match("document.write")) {
          if (console && console.log) {
            console.log("Script contains document.write. Can\u2019t be executed correctly. Code skipped ", value);
          }
          return false;
        }
        /** @type {string} */
        node.type = "text/javascript";
        node.id = value.id;
        if (i !== "") {
          node.src = i;
          /** @type {boolean} */
          node.async = false;
        }
        if (text !== "") {
          try {
            node.appendChild(document.createTextNode(text));
          } catch (s) {
            node.text = text;
          }
        }
        el.appendChild(node);
        if ((el instanceof HTMLHeadElement || el instanceof HTMLBodyElement) && el.contains(node)) {
          el.removeChild(node);
        }
        return true;
      };
    }, {}],
    4 : [function(saveNotifs, mixin, canCreateDiscussions) {
      var getStatementTypeFromString = saveNotifs("../foreach-els");
      /**
       * @param {?} type
       * @param {!Object} source
       * @param {!Object} callback
       * @param {!Object} obj
       * @return {undefined}
       */
      mixin.exports = function(type, source, callback, obj) {
        source = typeof source === "string" ? source.split(" ") : source;
        source.forEach(function(t) {
          getStatementTypeFromString(type, function(db) {
            db.addEventListener(t, callback, obj);
          });
        });
      };
    }, {
      "../foreach-els" : 7
    }],
    5 : [function(saveNotifs, mixin, canCreateDiscussions) {
      var getStatementTypeFromString = saveNotifs("../foreach-els");
      /**
       * @param {?} type
       * @param {!Object} path
       * @param {string} raw
       * @return {undefined}
       */
      mixin.exports = function(type, path, raw) {
        path = typeof path === "string" ? path.split(" ") : path;
        path.forEach(function(eventName) {
          var evt;
          /** @type {(Event|null)} */
          evt = document.createEvent("HTMLEvents");
          evt.initEvent(eventName, true, true);
          /** @type {string} */
          evt.eventName = eventName;
          if (raw) {
            Object.keys(raw).forEach(function(i) {
              evt[i] = raw[i];
            });
          }
          getStatementTypeFromString(type, function(elem) {
            /** @type {boolean} */
            var t = false;
            if (!elem.parentNode && elem !== document && elem !== window) {
              /** @type {boolean} */
              t = true;
              document.body.appendChild(elem);
            }
            elem.dispatchEvent(evt);
            if (t) {
              elem.parentNode.removeChild(elem);
            }
          });
        });
      };
    }, {
      "../foreach-els" : 7
    }],
    6 : [function(require, mixin, canCreateDiscussions) {
      var debug = require("./foreach-els");
      var assert = require("./eval-script");
      /**
       * @param {?} type
       * @return {undefined}
       */
      mixin.exports = function(type) {
        if (type.tagName.toLowerCase() === "script") {
          assert(type);
        }
        debug(type.querySelectorAll("script"), function(input) {
          if (!input.type || input.type.toLowerCase() === "text/javascript") {
            if (input.parentNode) {
              input.parentNode.removeChild(input);
            }
            assert(input);
          }
        });
      };
    }, {
      "./eval-script" : 3,
      "./foreach-els" : 7
    }],
    7 : [function(canCreateDiscussions, mixin, isSlidingUp) {
      /**
       * @param {?} obj
       * @param {!Function} f
       * @param {string} t
       * @return {?}
       */
      mixin.exports = function(obj, f, t) {
        if (obj instanceof HTMLCollection || obj instanceof NodeList || obj instanceof Array) {
          return Array.prototype.forEach.call(obj, f, t);
        }
        return f.call(t, obj);
      };
    }, {}],
    8 : [function(norm, mixin, canCreateDiscussions) {
      var n = norm("./foreach-els");
      /**
       * @param {?} type
       * @param {!Object} dir
       * @param {string} s
       * @param {!Object} context
       * @return {undefined}
       */
      mixin.exports = function(type, dir, s, context) {
        context = context || document;
        type.forEach(function(query) {
          n(context.querySelectorAll(query), dir, s);
        });
      };
    }, {
      "./foreach-els" : 7
    }],
    9 : [function(canCreateDiscussions, mixin, isSlidingUp) {
      /**
       * @return {?}
       */
      mixin.exports = function() {
        return window.history && window.history.pushState && window.history.replaceState && !navigator.userAgent.match(/((iPod|iPhone|iPad).+\bOS\s+[1-4]\D|WebApps\/.+CFNetwork)/);
      };
    }, {}],
    10 : [function(Clazz_superCall, mixin, canCreateDiscussions) {
      /**
       * @return {undefined}
       */
      function init() {
        if (window._gaq) {
          _gaq.push(["_trackPageview"]);
        }
        if (window.ga) {
          ga("send", "pageview", {
            page : location.pathname,
            title : document.title
          });
        }
      }
      var e = Clazz_superCall("./switches");
      /**
       * @param {!Object} event
       * @return {?}
       */
      mixin.exports = function(event) {
        event = event || {};
        event.elements = event.elements || "a[href], form[action]";
        event.selectors = event.selectors || ["title", ".js-Pjax"];
        event.switches = event.switches || {};
        event.switchesOptions = event.switchesOptions || {};
        event.history = typeof event.history === "undefined" ? true : event.history;
        event.analytics = typeof event.analytics === "function" || event.analytics === false ? event.analytics : init;
        event.scrollTo = typeof event.scrollTo === "undefined" ? 0 : event.scrollTo;
        event.scrollRestoration = typeof event.scrollRestoration !== "undefined" ? event.scrollRestoration : true;
        event.cacheBust = typeof event.cacheBust === "undefined" ? true : event.cacheBust;
        event.debug = event.debug || false;
        event.timeout = event.timeout || 0;
        event.currentUrlFullReload = typeof event.currentUrlFullReload === "undefined" ? false : event.currentUrlFullReload;
        if (!event.switches.head) {
          event.switches.head = e.switchElementsAlt;
        }
        if (!event.switches.body) {
          event.switches.body = e.switchElementsAlt;
        }
        return event;
      };
    }, {
      "./switches" : 18
    }],
    11 : [function(require, mixin, canCreateDiscussions) {
      /**
       * @param {!Object} view
       * @return {?}
       */
      function serialize(view) {
        /** @type {!Array} */
        var result = [];
        var elements = view.elements;
        /** @type {number} */
        var i = 0;
        for (; i < elements.length; i++) {
          var obj = elements[i];
          var tagName = obj.tagName.toLowerCase();
          if (!!obj.name && obj.attributes !== undefined && tagName !== "button") {
            var elem = obj.attributes.type;
            if (!elem || elem.value !== "checkbox" && elem.value !== "radio" || obj.checked) {
              /** @type {!Array} */
              var n = [];
              if (tagName === "select") {
                var opt;
                /** @type {number} */
                var i = 0;
                for (; i < obj.options.length; i++) {
                  opt = obj.options[i];
                  if (opt.selected && !opt.disabled) {
                    n.push(opt.hasAttribute("value") ? opt.value : opt.text);
                  }
                }
              } else {
                n.push(obj.value);
              }
              /** @type {number} */
              var i = 0;
              for (; i < n.length; i++) {
                result.push({
                  name : encodeURIComponent(obj.name),
                  value : encodeURIComponent(n[i])
                });
              }
            }
          }
        }
        return result;
      }
      /**
       * @param {!Object} url
       * @param {?} t
       * @return {?}
       */
      function parse(url, t) {
        if (url.protocol !== window.location.protocol || url.host !== window.location.host) {
          return "external";
        }
        if (url.hash && url.href.replace(url.hash, "") === window.location.href.replace(location.hash, "")) {
          return "anchor";
        }
        if (url.href === window.location.href.split("#")[0] + "#") {
          return "anchor-empty";
        }
        if (t.currentUrlFullReload && url.href === window.location.href.split("#")[0]) {
          return "reload";
        }
      }
      var extend = require("../events/on");
      var mix = require("../util/clone");
      /** @type {string} */
      var n = "data-pjax-state";
      /**
       * @param {!Object} form
       * @param {!Object} event
       * @return {undefined}
       */
      var handler = function(form, event) {
        if (onKeyPress(event)) {
          return;
        }
        var data = mix(this.options);
        data.requestOptions = {
          requestUrl : form.getAttribute("action") || window.location.href,
          requestMethod : form.getAttribute("method") || "GET"
        };
        /** @type {!Element} */
        var source = document.createElement("a");
        source.setAttribute("href", data.requestOptions.requestUrl);
        var url = parse(source, data);
        if (url) {
          form.setAttribute(n, url);
          return;
        }
        event.preventDefault();
        if (form.enctype === "multipart/form-data") {
          /** @type {!FormData} */
          data.requestOptions.formData = new FormData(form);
        } else {
          data.requestOptions.requestParams = serialize(form);
        }
        form.setAttribute(n, "submit");
        /** @type {!Object} */
        data.triggerElement = form;
        this.loadUrl(source.href, data);
      };
      /**
       * @param {!Object} event
       * @return {?}
       */
      var onKeyPress = function(event) {
        return event.defaultPrevented || event.returnValue === false;
      };
      /**
       * @param {?} name
       * @return {undefined}
       */
      mixin.exports = function(name) {
        var currTarget = this;
        name.setAttribute(n, "");
        extend(name, "submit", function(oldTransport) {
          handler.call(currTarget, name, oldTransport);
        });
      };
    }, {
      "../events/on" : 4,
      "../util/clone" : 20
    }],
    12 : [function(require, mixin, canCreateDiscussions) {
      /**
       * @param {!Object} url
       * @param {!Event} event
       * @return {?}
       */
      function update(url, event) {
        if (event.which > 1 || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) {
          return "modifier";
        }
        if (url.protocol !== window.location.protocol || url.host !== window.location.host) {
          return "external";
        }
        if (url.hash && url.href.replace(url.hash, "") === window.location.href.replace(location.hash, "")) {
          return "anchor";
        }
        if (url.href === window.location.href.split("#")[0] + "#") {
          return "anchor-empty";
        }
      }
      var addEvent = require("../events/on");
      var extend = require("../util/clone");
      /** @type {string} */
      var n = "data-pjax-state";
      /**
       * @param {!Object} source
       * @param {!Event} e
       * @return {undefined}
       */
      var init = function(source, e) {
        if (onclick(e)) {
          return;
        }
        var o = extend(this.options);
        var state = update(source, e);
        if (state) {
          source.setAttribute(n, state);
          return;
        }
        e.preventDefault();
        if (this.options.currentUrlFullReload && source.href === window.location.href.split("#")[0]) {
          source.setAttribute(n, "reload");
          this.reload();
          return;
        }
        source.setAttribute(n, "load");
        /** @type {!Object} */
        o.triggerElement = source;
        this.loadUrl(source.href, o);
      };
      /**
       * @param {!Event} event
       * @return {?}
       */
      var onclick = function(event) {
        return event.defaultPrevented || event.returnValue === false;
      };
      /**
       * @param {?} type
       * @return {undefined}
       */
      mixin.exports = function(type) {
        var homepage = this;
        type.setAttribute(n, "");
        addEvent(type, "click", function(name) {
          init.call(homepage, type, name);
        });
        addEvent(type, "keyup", function(opts) {
          if (opts.keyCode === 13) {
            init.call(homepage, type, opts);
          }
        }.bind(this));
      };
    }, {
      "../events/on" : 4,
      "../util/clone" : 20
    }],
    13 : [function(require, mixin, canCreateDiscussions) {
      var defaults = require("../util/clone");
      var timestamp = require("../uniqueid");
      var fn = require("../events/trigger");
      /**
       * @param {?} type
       * @param {!Object} req
       * @param {string} location
       * @param {!Object} options
       * @return {?}
       */
      mixin.exports = function(type, req, location, options) {
        options = defaults(options || this.options);
        /** @type {!Object} */
        options.request = req;
        if (type === false) {
          fn(document, "pjax:complete pjax:error", options);
          return;
        }
        /** @type {*} */
        var opts = window.history.state || {};
        window.history.replaceState({
          url : opts.url || window.location.href,
          title : opts.title || document.title,
          uid : opts.uid || timestamp(),
          scrollPos : [document.documentElement.scrollLeft || document.body.scrollLeft, document.documentElement.scrollTop || document.body.scrollTop]
        }, document.title, window.location.href);
        /** @type {string} */
        var loc = location;
        if (req.responseURL) {
          if (location !== req.responseURL) {
            location = req.responseURL;
          }
        } else {
          if (req.getResponseHeader("X-PJAX-URL")) {
            location = req.getResponseHeader("X-PJAX-URL");
          } else {
            if (req.getResponseHeader("X-XHR-Redirected-To")) {
              location = req.getResponseHeader("X-XHR-Redirected-To");
            }
          }
        }
        /** @type {!Element} */
        var data = document.createElement("a");
        data.href = loc;
        var md5 = data.hash;
        /** @type {string} */
        data.href = location;
        if (md5 && !data.hash) {
          data.hash = md5;
          location = data.href;
        }
        /** @type {string} */
        this.state.href = location;
        /** @type {!Object} */
        this.state.options = options;
        try {
          this.loadContent(type, options);
        } catch (l) {
          fn(document, "pjax:error", options);
          if (!this.options.debug) {
            if (console && console.error) {
              console.error("Pjax switch fail: ", l);
            }
            return this.latestChance(location);
          } else {
            throw l;
          }
        }
      };
    }, {
      "../events/trigger" : 5,
      "../uniqueid" : 19,
      "../util/clone" : 20
    }],
    14 : [function(canCreateDiscussions, mixin, isSlidingUp) {
      /**
       * @return {undefined}
       */
      mixin.exports = function() {
        if (this.options.debug && console) {
          if (typeof console.log === "function") {
            console.log.apply(console, arguments);
          } else {
            if (console.log) {
              console.log(arguments);
            }
          }
        }
      };
    }, {}],
    15 : [function(canCreateDiscussions, mixin, isSlidingUp) {
      /** @type {string} */
      var children = "data-pjax-state";
      /**
       * @param {!Object} type
       * @return {undefined}
       */
      mixin.exports = function(type) {
        switch(type.tagName.toLowerCase()) {
          case "a":
            if (!type.hasAttribute(children)) {
              this.attachLink(type);
            }
            break;
          case "form":
            if (!type.hasAttribute(children)) {
              this.attachForm(type);
            }
            break;
          default:
            throw "Pjax can only be applied on <a> or <form> submit";
        }
      };
    }, {}],
    16 : [function(require, mixin, canCreateDiscussions) {
      var process = require("./util/update-query-string");
      /**
       * @param {?} event
       * @param {!Object} options
       * @param {string} callback
       * @return {?}
       */
      mixin.exports = function(event, options, callback) {
        options = options || {};
        var splitChar;
        var params = options.requestOptions || {};
        var type = (params.requestMethod || "GET").toUpperCase();
        var connectionConfigs = params.requestParams || null;
        var callback = params.formData || null;
        /** @type {null} */
        var data = null;
        /** @type {!XMLHttpRequest} */
        var req = new XMLHttpRequest;
        var rpcCheckTimeout = options.timeout || 0;
        /**
         * @return {undefined}
         */
        req.onreadystatechange = function() {
          if (req.readyState === 4) {
            if (req.status === 200) {
              callback(req.responseText, req, event, options);
            } else {
              if (req.status !== 0) {
                callback(null, req, event, options);
              }
            }
          }
        };
        /**
         * @param {undefined} script
         * @return {undefined}
         */
        req.onerror = function(script) {
          console.log(script);
          callback(null, req, event, options);
        };
        /**
         * @return {undefined}
         */
        req.ontimeout = function() {
          callback(null, req, event, options);
        };
        if (connectionConfigs && connectionConfigs.length) {
          splitChar = connectionConfigs.map(function(enumMemberSymbol) {
            return enumMemberSymbol.name + "=" + enumMemberSymbol.value;
          }).join("&");
          switch(type) {
            case "GET":
              event = event.split("?")[0];
              /** @type {string} */
              event = event + ("?" + splitChar);
              break;
            case "POST":
              data = splitChar;
              break;
          }
        } else {
          if (callback) {
            data = callback;
          }
        }
        if (options.cacheBust) {
          event = process(event, "t", Date.now());
        }
        req.open(type, event, true);
        req.timeout = rpcCheckTimeout;
        req.setRequestHeader("X-Requested-With", "XMLHttpRequest");
        req.setRequestHeader("X-PJAX", "true");
        req.setRequestHeader("X-PJAX-Selectors", JSON.stringify(options.selectors));
        if (data && type === "POST" && !callback) {
          req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        }
        req.send(data);
        return req;
      };
    }, {
      "./util/update-query-string" : 24
    }],
    17 : [function(d3_bisect, mixin, canCreateDiscussions) {
      var index = d3_bisect("./foreach-els");
      var i = d3_bisect("./switches");
      /**
       * @param {?} type
       * @param {!Object} options
       * @param {!Object} stack
       * @param {!Object} scope
       * @param {!HTMLElement} elem
       * @param {?} prop
       * @return {undefined}
       */
      mixin.exports = function(type, options, stack, scope, elem, prop) {
        /** @type {!Array} */
        var payload = [];
        stack.forEach(function(key) {
          var data = scope.querySelectorAll(key);
          var item = elem.querySelectorAll(key);
          if (this.log) {
            this.log("Pjax switch", key, data, item);
          }
          if (data.length !== item.length) {
            throw "DOM doesn\u2019t look the same on new loaded page: \u2019" + key + "\u2019 - new " + data.length + ", old " + item.length;
          }
          index(data, function(id, fieldId) {
            var value = item[fieldId];
            if (this.log) {
              this.log("newEl", id, "oldEl", value);
            }
            var form_payload = type[key] ? type[key].bind(this, value, id, prop, options[key]) : i.outerHTML.bind(this, value, id, prop);
            payload.push(form_payload);
          }, this);
        }, this);
        /** @type {number} */
        this.state.numPendingSwitches = payload.length;
        payload.forEach(function(fileChangeListener) {
          fileChangeListener();
        });
      };
    }, {
      "./foreach-els" : 7,
      "./switches" : 18
    }],
    18 : [function(norm, mixin, canCreateDiscussions) {
      var n = norm("./events/on");
      mixin.exports = {
        outerHTML : function(type, name) {
          type.outerHTML = name.outerHTML;
          this.onSwitch();
        },
        innerHTML : function(type, element) {
          type.innerHTML = element.innerHTML;
          if (element.className === "") {
            type.removeAttribute("class");
          } else {
            type.className = element.className;
          }
          this.onSwitch();
        },
        switchElementsAlt : function(type, element) {
          type.innerHTML = element.innerHTML;
          if (element.hasAttributes()) {
            var a = element.attributes;
            /** @type {number} */
            var i = 0;
            for (; i < a.length; i++) {
              type.attributes.setNamedItem(a[i].cloneNode());
            }
          }
          this.onSwitch();
        },
        replaceNode : function(oldNode, newNode) {
          oldNode.parentNode.replaceChild(newNode, oldNode);
          this.onSwitch();
        },
        sideBySide : function(data, options, axis, self) {
          /** @type {function(this:(IArrayLike<T>|string), (function(this:S, T, number, !Array<T>): ?|null), S=): undefined} */
          var forEach = Array.prototype.forEach;
          /** @type {!Array} */
          var changes = [];
          /** @type {!Array} */
          var a = [];
          /** @type {!DocumentFragment} */
          var c = document.createDocumentFragment();
          /** @type {string} */
          var mb = "animationend webkitAnimationEnd MSAnimationEnd oanimationend";
          /** @type {number} */
          var level = 0;
          var baby = function(event) {
            if (event.target !== event.currentTarget) {
              return;
            }
            level--;
            if (level <= 0 && changes) {
              changes.forEach(function(gapiEl) {
                if (gapiEl.parentNode) {
                  gapiEl.parentNode.removeChild(gapiEl);
                }
              });
              a.forEach(function(e) {
                e.className = e.className.replace(e.getAttribute("data-pjax-classes"), "");
                e.removeAttribute("data-pjax-classes");
              });
              /** @type {null} */
              a = null;
              /** @type {null} */
              changes = null;
              this.onSwitch();
            }
          }.bind(this);
          self = self || {};
          forEach.call(data.childNodes, function(a) {
            changes.push(a);
            if (a.classList && !a.classList.contains("js-Pjax-remove")) {
              if (a.hasAttribute("data-pjax-classes")) {
                a.className = a.className.replace(a.getAttribute("data-pjax-classes"), "");
                a.removeAttribute("data-pjax-classes");
              }
              a.classList.add("js-Pjax-remove");
              if (self.callbacks && self.callbacks.removeElement) {
                self.callbacks.removeElement(a);
              }
              if (self.classNames) {
                a.className += " " + self.classNames.remove + " " + (axis.backward ? self.classNames.backward : self.classNames.forward);
              }
              level++;
              n(a, mb, baby, true);
            }
          });
          forEach.call(options.childNodes, function(e) {
            if (e.classList) {
              /** @type {string} */
              var style = "";
              if (self.classNames) {
                /** @type {string} */
                style = " js-Pjax-add " + self.classNames.add + " " + (axis.backward ? self.classNames.forward : self.classNames.backward);
              }
              if (self.callbacks && self.callbacks.addElement) {
                self.callbacks.addElement(e);
              }
              e.className += style;
              e.setAttribute("data-pjax-classes", style);
              a.push(e);
              c.appendChild(e);
              level++;
              n(e, mb, baby, true);
            }
          });
          data.className = options.className;
          data.appendChild(c);
        }
      };
    }, {
      "./events/on" : 4
    }],
    19 : [function(canCreateDiscussions, mixin, isSlidingUp) {
      mixin.exports = function() {
        /** @type {number} */
        var contentId = 0;
        return function() {
          var linkCssId = "pjax" + (new Date).getTime() + "_" + contentId;
          contentId++;
          return linkCssId;
        };
      }();
    }, {}],
    20 : [function(canCreateDiscussions, mixin, isSlidingUp) {
      /**
       * @param {?} type
       * @return {?}
       */
      mixin.exports = function(type) {
        if (null === type || "object" !== typeof type) {
          return type;
        }
        var data = type.constructor();
        var key;
        for (key in type) {
          if (type.hasOwnProperty(key)) {
            data[key] = type[key];
          }
        }
        return data;
      };
    }, {}],
    21 : [function(canCreateDiscussions, mixin, isSlidingUp) {
      /**
       * @param {?} type
       * @param {!Object} args
       * @param {!Object} stack
       * @return {?}
       */
      mixin.exports = function(type, args, stack) {
        /** @type {number} */
        var i = 0;
        for (; i < args.length; i++) {
          var crossfilterable_layers = type.querySelectorAll(args[i]);
          /** @type {number} */
          var layer_i = 0;
          for (; layer_i < crossfilterable_layers.length; layer_i++) {
            if (crossfilterable_layers[layer_i].contains(stack)) {
              return true;
            }
          }
        }
        return false;
      };
    }, {}],
    22 : [function(canCreateDiscussions, mixin, isSlidingUp) {
      /**
       * @param {?} name
       * @return {?}
       */
      mixin.exports = function(name) {
        if (name == null) {
          return null;
        }
        /** @type {!Object} */
        var obj = Object(name);
        /** @type {number} */
        var i = 1;
        for (; i < arguments.length; i++) {
          var source = arguments[i];
          if (source != null) {
            var prop;
            for (prop in source) {
              if (Object.prototype.hasOwnProperty.call(source, prop)) {
                obj[prop] = source[prop];
              }
            }
          }
        }
        return obj;
      };
    }, {}],
    23 : [function(canCreateDiscussions, mixin, isSlidingUp) {
      /**
       * @return {undefined}
       */
      mixin.exports = function() {
      };
    }, {}],
    24 : [function(canCreateDiscussions, mixin, isSlidingUp) {
      /**
       * @param {?} type
       * @param {string} value
       * @param {string} prefix
       * @return {?}
       */
      mixin.exports = function(type, value, prefix) {
        /** @type {!RegExp} */
        var n = new RegExp("([?&])" + value + "=.*?(&|$)", "i");
        /** @type {string} */
        var Item_ = type.indexOf("?") !== -1 ? "&" : "?";
        if (type.match(n)) {
          return type.replace(n, "$1" + value + "=" + prefix + "$2");
        } else {
          return type + Item_ + value + "=" + prefix;
        }
      };
    }, {}]
  }, {}, [1])(1);
});
(function(f) {
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = f();
  } else {
    if (typeof define === "function" && define.amd) {
      define([], f);
    } else {
      var g;
      if (typeof window !== "undefined") {
        /** @type {!Window} */
        g = window;
      } else {
        if (typeof global !== "undefined") {
          g = global;
        } else {
          if (typeof self !== "undefined") {
            /** @type {!Window} */
            g = self;
          } else {
            g = this;
          }
        }
      }
      g.enquire = f();
    }
  }
})(function() {
  var t;
  var e;
  var n;
  return function e(t, n, r) {
    /**
     * @param {string} o
     * @param {?} s
     * @return {?}
     */
    function s(o, s) {
      if (!n[o]) {
        if (!t[o]) {
          var i = typeof require == "function" && require;
          if (!s && i) {
            return i(o, true);
          }
          if (a) {
            return a(o, true);
          }
          /** @type {!Error} */
          var f = new Error("Cannot find module '" + o + "'");
          throw f.code = "MODULE_NOT_FOUND", f;
        }
        var u = n[o] = {
          exports : {}
        };
        t[o][0].call(u.exports, function(e) {
          var n = t[o][1][e];
          return s(n ? n : e);
        }, u, u.exports, e, t, n, r);
      }
      return n[o].exports;
    }
    var a = typeof require == "function" && require;
    /** @type {number} */
    var o = 0;
    for (; o < r.length; o++) {
      s(r[o]);
    }
    return s;
  }({
    1 : [function(require, module, n) {
      /**
       * @param {?} type
       * @param {boolean} query
       * @return {undefined}
       */
      function MediaQuery(type, query) {
        this.query = type;
        /** @type {boolean} */
        this.isUnconditional = query;
        /** @type {!Array} */
        this.handlers = [];
        /** @type {(MediaQueryList|null)} */
        this.mql = window.matchMedia(type);
        var self = this;
        /**
         * @param {!Event} mql
         * @return {undefined}
         */
        this.listener = function(mql) {
          self.mql = mql.currentTarget || mql;
          self.assess();
        };
        this.mql.addListener(this.listener);
      }
      var QueryHandler = require(3);
      var each = require(4).each;
      MediaQuery.prototype = {
        constuctor : MediaQuery,
        addHandler : function(handler) {
          var qh = new QueryHandler(handler);
          this.handlers.push(qh);
          if (this.matches()) {
            qh.on();
          }
        },
        removeHandler : function(type) {
          var handlers = this.handlers;
          each(handlers, function(n, i) {
            if (n.equals(type)) {
              n.destroy();
              return !handlers.splice(i, 1);
            }
          });
        },
        matches : function() {
          return this.mql.matches || this.isUnconditional;
        },
        clear : function() {
          each(this.handlers, function(anAlertDialog) {
            anAlertDialog.destroy();
          });
          this.mql.removeListener(this.listener);
          /** @type {number} */
          this.handlers.length = 0;
        },
        assess : function() {
          /** @type {string} */
          var action = this.matches() ? "on" : "off";
          each(this.handlers, function(intentFilter) {
            intentFilter[action]();
          });
        }
      };
      /** @type {function(?, boolean): undefined} */
      module.exports = MediaQuery;
    }, {
      3 : 3,
      4 : 4
    }],
    2 : [function(require, module, n) {
      /**
       * @return {undefined}
       */
      function MediaQueryDispatch() {
        if (!window.matchMedia) {
          throw new Error("matchMedia not present, legacy browsers require a polyfill");
        }
        this.queries = {};
        /** @type {boolean} */
        this.browserIsIncapable = !window.matchMedia("only all").matches;
      }
      var MediaQuery = require(1);
      var _ = require(4);
      var each = _.each;
      var isFunction = _.isFunction;
      var isArray = _.isArray;
      MediaQueryDispatch.prototype = {
        constructor : MediaQueryDispatch,
        register : function(q, options, shouldDegrade) {
          var queries = this.queries;
          var isUnconditional = shouldDegrade && this.browserIsIncapable;
          if (!queries[q]) {
            queries[q] = new MediaQuery(q, isUnconditional);
          }
          if (isFunction(options)) {
            options = {
              match : options
            };
          }
          if (!isArray(options)) {
            /** @type {!Array} */
            options = [options];
          }
          each(options, function(handler) {
            if (isFunction(handler)) {
              handler = {
                match : handler
              };
            }
            queries[q].addHandler(handler);
          });
          return this;
        },
        unregister : function(id, handler) {
          var query = this.queries[id];
          if (query) {
            if (handler) {
              query.removeHandler(handler);
            } else {
              query.clear();
              delete this.queries[id];
            }
          }
          return this;
        }
      };
      /** @type {function(): undefined} */
      module.exports = MediaQueryDispatch;
    }, {
      1 : 1,
      4 : 4
    }],
    3 : [function(canCreateDiscussions, module, n) {
      /**
       * @param {!Object} type
       * @return {undefined}
       */
      function QueryHandler(type) {
        /** @type {!Object} */
        this.options = type;
        if (!type.deferSetup) {
          this.setup();
        }
      }
      QueryHandler.prototype = {
        constructor : QueryHandler,
        setup : function() {
          if (this.options.setup) {
            this.options.setup();
          }
          /** @type {boolean} */
          this.initialised = true;
        },
        on : function() {
          if (!this.initialised) {
            this.setup();
          }
          if (this.options.match) {
            this.options.match();
          }
        },
        off : function() {
          if (this.options.unmatch) {
            this.options.unmatch();
          }
        },
        destroy : function() {
          if (this.options.destroy) {
            this.options.destroy();
          } else {
            this.off();
          }
        },
        equals : function(target) {
          return this.options === target || this.options.match === target;
        }
      };
      /** @type {function(!Object): undefined} */
      module.exports = QueryHandler;
    }, {}],
    4 : [function(canCreateDiscussions, module, n) {
      /**
       * @param {!Object} data
       * @param {!Function} callback
       * @return {undefined}
       */
      function iter(data, callback) {
        /** @type {number} */
        var i = 0;
        var tldCount = data.length;
        var value;
        i;
        for (; i < tldCount; i++) {
          value = callback(data[i], i);
          if (value === false) {
            break;
          }
        }
      }
      /**
       * @param {!Object} value
       * @return {?}
       */
      function isArray(value) {
        return Object.prototype.toString.apply(value) === "[object Array]";
      }
      /**
       * @param {!Object} value
       * @return {?}
       */
      function isFunction(value) {
        return typeof value === "function";
      }
      module.exports = {
        isFunction : isFunction,
        isArray : isArray,
        each : iter
      };
    }, {}],
    5 : [function(require, module, n) {
      var Datasource = require(2);
      module.exports = new Datasource;
    }, {
      2 : 2
    }]
  }, {}, [5])(5);
});
!function(factory) {
  if ("function" == typeof define && define.amd) {
    define(["jquery"], factory);
  } else {
    if ("undefined" != typeof exports) {
      module.exports = factory(require("jquery"));
    } else {
      factory(jQuery);
    }
  }
}(function($) {
  var Slick = window.Slick || {};
  /**
   * @return {undefined}
   */
  (Slick = function() {
    /** @type {number} */
    var instanceUid = 0;
    return function(element, settings) {
      var dataSettings;
      var _ = this;
      _.defaults = {
        accessibility : true,
        adaptiveHeight : false,
        appendArrows : $(element),
        appendDots : $(element),
        arrows : true,
        asNavFor : null,
        prevArrow : '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
        nextArrow : '<button class="slick-next" aria-label="Next" type="button">Next</button>',
        autoplay : false,
        autoplaySpeed : 3e3,
        centerMode : false,
        centerPadding : "50px",
        cssEase : "ease",
        customPaging : function(slider, i) {
          return $('<button type="button" />').text(i + 1);
        },
        dots : false,
        dotsClass : "slick-dots",
        draggable : true,
        easing : "linear",
        edgeFriction : .35,
        fade : false,
        focusOnSelect : false,
        focusOnChange : false,
        infinite : true,
        initialSlide : 0,
        lazyLoad : "ondemand",
        mobileFirst : false,
        pauseOnHover : true,
        pauseOnFocus : true,
        pauseOnDotsHover : false,
        respondTo : "window",
        responsive : null,
        rows : 1,
        rtl : false,
        slide : "",
        slidesPerRow : 1,
        slidesToShow : 1,
        slidesToScroll : 1,
        speed : 500,
        swipe : true,
        swipeToSlide : false,
        touchMove : true,
        touchThreshold : 5,
        useCSS : true,
        useTransform : true,
        variableWidth : false,
        vertical : false,
        verticalSwiping : false,
        waitForAnimate : true,
        zIndex : 1e3
      };
      _.initials = {
        animating : false,
        dragging : false,
        autoPlayTimer : null,
        currentDirection : 0,
        currentLeft : null,
        currentSlide : 0,
        direction : 1,
        $dots : null,
        listWidth : null,
        listHeight : null,
        loadIndex : 0,
        $nextArrow : null,
        $prevArrow : null,
        scrolling : false,
        slideCount : null,
        slideWidth : null,
        $slideTrack : null,
        $slides : null,
        sliding : false,
        slideOffset : 0,
        swipeLeft : null,
        swiping : false,
        $list : null,
        touchObject : {},
        transformsEnabled : false,
        unslicked : false
      };
      $.extend(_, _.initials);
      /** @type {null} */
      _.activeBreakpoint = null;
      /** @type {null} */
      _.animType = null;
      /** @type {null} */
      _.animProp = null;
      /** @type {!Array} */
      _.breakpoints = [];
      /** @type {!Array} */
      _.breakpointSettings = [];
      /** @type {boolean} */
      _.cssTransitions = false;
      /** @type {boolean} */
      _.focussed = false;
      /** @type {boolean} */
      _.interrupted = false;
      /** @type {string} */
      _.hidden = "hidden";
      /** @type {boolean} */
      _.paused = true;
      /** @type {null} */
      _.positionProp = null;
      /** @type {null} */
      _.respondTo = null;
      /** @type {number} */
      _.rowCount = 1;
      /** @type {boolean} */
      _.shouldClick = true;
      _.$slider = $(element);
      /** @type {null} */
      _.$slidesCache = null;
      /** @type {null} */
      _.transformType = null;
      /** @type {null} */
      _.transitionType = null;
      /** @type {string} */
      _.visibilityChange = "visibilitychange";
      /** @type {number} */
      _.windowWidth = 0;
      /** @type {null} */
      _.windowTimer = null;
      dataSettings = $(element).data("slick") || {};
      _.options = $.extend({}, _.defaults, settings, dataSettings);
      _.currentSlide = _.options.initialSlide;
      _.originalSettings = _.options;
      if (void 0 !== document.mozHidden) {
        /** @type {string} */
        _.hidden = "mozHidden";
        /** @type {string} */
        _.visibilityChange = "mozvisibilitychange";
      } else {
        if (void 0 !== document.webkitHidden) {
          /** @type {string} */
          _.hidden = "webkitHidden";
          /** @type {string} */
          _.visibilityChange = "webkitvisibilitychange";
        }
      }
      _.autoPlay = $.proxy(_.autoPlay, _);
      _.autoPlayClear = $.proxy(_.autoPlayClear, _);
      _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
      _.changeSlide = $.proxy(_.changeSlide, _);
      _.clickHandler = $.proxy(_.clickHandler, _);
      _.selectHandler = $.proxy(_.selectHandler, _);
      _.setPosition = $.proxy(_.setPosition, _);
      _.swipeHandler = $.proxy(_.swipeHandler, _);
      _.dragHandler = $.proxy(_.dragHandler, _);
      _.keyHandler = $.proxy(_.keyHandler, _);
      /** @type {number} */
      _.instanceUid = instanceUid++;
      /** @type {!RegExp} */
      _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;
      _.registerBreakpoints();
      _.init(true);
    };
  }()).prototype.activateADA = function() {
    this.$slideTrack.find(".slick-active").attr({
      "aria-hidden" : "false"
    }).find("a, input, button, select").attr({
      tabindex : "0"
    });
  };
  /** @type {function(?, number, boolean): ?} */
  Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {
    var _ = this;
    if ("boolean" == typeof index) {
      /** @type {number} */
      addBefore = index;
      /** @type {null} */
      index = null;
    } else {
      if (index < 0 || index >= _.slideCount) {
        return false;
      }
    }
    _.unload();
    if ("number" == typeof index) {
      if (0 === index && 0 === _.$slides.length) {
        $(markup).appendTo(_.$slideTrack);
      } else {
        if (addBefore) {
          $(markup).insertBefore(_.$slides.eq(index));
        } else {
          $(markup).insertAfter(_.$slides.eq(index));
        }
      }
    } else {
      if (true === addBefore) {
        $(markup).prependTo(_.$slideTrack);
      } else {
        $(markup).appendTo(_.$slideTrack);
      }
    }
    _.$slides = _.$slideTrack.children(this.options.slide);
    _.$slideTrack.children(this.options.slide).detach();
    _.$slideTrack.append(_.$slides);
    _.$slides.each(function(e, clicked_el) {
      $(clicked_el).attr("data-slick-index", e);
    });
    _.$slidesCache = _.$slides;
    _.reinit();
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.animateHeight = function() {
    var _ = this;
    if (1 === _.options.slidesToShow && true === _.options.adaptiveHeight && false === _.options.vertical) {
      var dxdydust = _.$slides.eq(_.currentSlide).outerHeight(true);
      _.$list.animate({
        height : dxdydust
      }, _.options.speed);
    }
  };
  /**
   * @param {string} targetLeft
   * @param {string} callback
   * @return {undefined}
   */
  Slick.prototype.animateSlide = function(targetLeft, callback) {
    var transition = {};
    var _ = this;
    _.animateHeight();
    if (true === _.options.rtl && false === _.options.vertical) {
      /** @type {number} */
      targetLeft = -targetLeft;
    }
    if (false === _.transformsEnabled) {
      if (false === _.options.vertical) {
        _.$slideTrack.animate({
          left : targetLeft
        }, _.options.speed, _.options.easing, callback);
      } else {
        _.$slideTrack.animate({
          top : targetLeft
        }, _.options.speed, _.options.easing, callback);
      }
    } else {
      if (false === _.cssTransitions) {
        if (true === _.options.rtl) {
          /** @type {number} */
          _.currentLeft = -_.currentLeft;
        }
        $({
          animStart : _.currentLeft
        }).animate({
          animStart : targetLeft
        }, {
          duration : _.options.speed,
          easing : _.options.easing,
          step : function(type) {
            /** @type {number} */
            type = Math.ceil(type);
            if (false === _.options.vertical) {
              /** @type {string} */
              transition[_.animType] = "translate(" + type + "px, 0px)";
              _.$slideTrack.css(transition);
            } else {
              /** @type {string} */
              transition[_.animType] = "translate(0px," + type + "px)";
              _.$slideTrack.css(transition);
            }
          },
          complete : function() {
            if (callback) {
              callback.call();
            }
          }
        });
      } else {
        _.applyTransition();
        /** @type {number} */
        targetLeft = Math.ceil(targetLeft);
        if (false === _.options.vertical) {
          /** @type {string} */
          transition[_.animType] = "translate3d(" + targetLeft + "px, 0px, 0px)";
        } else {
          /** @type {string} */
          transition[_.animType] = "translate3d(0px," + targetLeft + "px, 0px)";
        }
        _.$slideTrack.css(transition);
        if (callback) {
          setTimeout(function() {
            _.disableTransition();
            callback.call();
          }, _.options.speed);
        }
      }
    }
  };
  /**
   * @return {?}
   */
  Slick.prototype.getNavTarget = function() {
    var _ = this;
    var e = _.options.asNavFor;
    return e && null !== e && (e = $(e).not(_.$slider)), e;
  };
  /**
   * @param {number} index
   * @return {undefined}
   */
  Slick.prototype.asNavFor = function(index) {
    var options = this.getNavTarget();
    if (null !== options && "object" == typeof options) {
      options.each(function() {
        var target = $(this).slick("getSlick");
        if (!target.unslicked) {
          target.slideHandler(index, true);
        }
      });
    }
  };
  /**
   * @param {number} slide
   * @return {undefined}
   */
  Slick.prototype.applyTransition = function(slide) {
    var _ = this;
    var transition = {};
    if (false === _.options.fade) {
      /** @type {string} */
      transition[_.transitionType] = _.transformType + " " + _.options.speed + "ms " + _.options.cssEase;
    } else {
      /** @type {string} */
      transition[_.transitionType] = "opacity " + _.options.speed + "ms " + _.options.cssEase;
    }
    if (false === _.options.fade) {
      _.$slideTrack.css(transition);
    } else {
      _.$slides.eq(slide).css(transition);
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.autoPlay = function() {
    var _ = this;
    _.autoPlayClear();
    if (_.slideCount > _.options.slidesToShow) {
      /** @type {number} */
      _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed);
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.autoPlayClear = function() {
    var _ = this;
    if (_.autoPlayTimer) {
      clearInterval(_.autoPlayTimer);
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.autoPlayIterator = function() {
    var _ = this;
    var slideCount = _.currentSlide + _.options.slidesToScroll;
    if (!(_.paused || _.interrupted || _.focussed)) {
      if (false === _.options.infinite) {
        if (1 === _.direction && _.currentSlide + 1 === _.slideCount - 1) {
          /** @type {number} */
          _.direction = 0;
        } else {
          if (0 === _.direction) {
            /** @type {number} */
            slideCount = _.currentSlide - _.options.slidesToScroll;
            if (_.currentSlide - 1 == 0) {
              /** @type {number} */
              _.direction = 1;
            }
          }
        }
      }
      _.slideHandler(slideCount);
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.buildArrows = function() {
    var _ = this;
    if (true === _.options.arrows) {
      _.$prevArrow = $(_.options.prevArrow).addClass("slick-arrow");
      _.$nextArrow = $(_.options.nextArrow).addClass("slick-arrow");
      if (_.slideCount > _.options.slidesToShow) {
        _.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex");
        _.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex");
        if (_.htmlExpr.test(_.options.prevArrow)) {
          _.$prevArrow.prependTo(_.options.appendArrows);
        }
        if (_.htmlExpr.test(_.options.nextArrow)) {
          _.$nextArrow.appendTo(_.options.appendArrows);
        }
        if (true !== _.options.infinite) {
          _.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true");
        }
      } else {
        _.$prevArrow.add(_.$nextArrow).addClass("slick-hidden").attr({
          "aria-disabled" : "true",
          tabindex : "-1"
        });
      }
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.buildDots = function() {
    var i;
    var dot;
    var _ = this;
    if (true === _.options.dots) {
      _.$slider.addClass("slick-dotted");
      dot = $("<ul />").addClass(_.options.dotsClass);
      /** @type {number} */
      i = 0;
      for (; i <= _.getDotCount(); i = i + 1) {
        dot.append($("<li />").append(_.options.customPaging.call(this, _, i)));
      }
      _.$dots = dot.appendTo(_.options.appendDots);
      _.$dots.find("li").first().addClass("slick-active");
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.buildOut = function() {
    var _ = this;
    _.$slides = _.$slider.children(_.options.slide + ":not(.slick-cloned)").addClass("slick-slide");
    _.slideCount = _.$slides.length;
    _.$slides.each(function(e, clicked_el) {
      $(clicked_el).attr("data-slick-index", e).data("originalStyling", $(clicked_el).attr("style") || "");
    });
    _.$slider.addClass("slick-slider");
    _.$slideTrack = 0 === _.slideCount ? $('<div class="slick-track"/>').appendTo(_.$slider) : _.$slides.wrapAll('<div class="slick-track"/>').parent();
    _.$list = _.$slideTrack.wrap('<div class="slick-list"/>').parent();
    _.$slideTrack.css("opacity", 0);
    if (!(true !== _.options.centerMode && true !== _.options.swipeToSlide)) {
      /** @type {number} */
      _.options.slidesToScroll = 1;
    }
    $("img[data-lazy]", _.$slider).not("[src]").addClass("slick-loading");
    _.setupInfinite();
    _.buildArrows();
    _.buildDots();
    _.updateDots();
    _.setSlideClasses("number" == typeof _.currentSlide ? _.currentSlide : 0);
    if (true === _.options.draggable) {
      _.$list.addClass("draggable");
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.buildRows = function() {
    var a;
    var b;
    var c;
    var h;
    var Del;
    var p;
    var slidesPerSection;
    var _ = this;
    if (h = document.createDocumentFragment(), p = _.$slider.children(), _.options.rows > 1) {
      /** @type {number} */
      slidesPerSection = _.options.slidesPerRow * _.options.rows;
      /** @type {number} */
      Del = Math.ceil(p.length / slidesPerSection);
      /** @type {number} */
      a = 0;
      for (; a < Del; a++) {
        /** @type {!Element} */
        var outline = document.createElement("div");
        /** @type {number} */
        b = 0;
        for (; b < _.options.rows; b++) {
          /** @type {!Element} */
          var element = document.createElement("div");
          /** @type {number} */
          c = 0;
          for (; c < _.options.slidesPerRow; c++) {
            /** @type {number} */
            var l = a * slidesPerSection + (b * _.options.slidesPerRow + c);
            if (p.get(l)) {
              element.appendChild(p.get(l));
            }
          }
          outline.appendChild(element);
        }
        h.appendChild(outline);
      }
      _.$slider.empty().append(h);
      _.$slider.children().children().children().css({
        width : 100 / _.options.slidesPerRow + "%",
        display : "inline-block"
      });
    }
  };
  /**
   * @param {boolean} initial
   * @param {boolean} forceUpdate
   * @return {undefined}
   */
  Slick.prototype.checkResponsive = function(initial, forceUpdate) {
    var breakpoint;
    var targetBreakpoint;
    var respondToWidth;
    var _ = this;
    /** @type {boolean} */
    var triggerBreakpoint = false;
    var sliderWidth = _.$slider.width();
    var windowWidth = window.innerWidth || $(window).width();
    if ("window" === _.respondTo ? respondToWidth = windowWidth : "slider" === _.respondTo ? respondToWidth = sliderWidth : "min" === _.respondTo && (respondToWidth = Math.min(windowWidth, sliderWidth)), _.options.responsive && _.options.responsive.length && null !== _.options.responsive) {
      /** @type {null} */
      targetBreakpoint = null;
      for (breakpoint in _.breakpoints) {
        if (_.breakpoints.hasOwnProperty(breakpoint)) {
          if (false === _.originalSettings.mobileFirst) {
            if (respondToWidth < _.breakpoints[breakpoint]) {
              targetBreakpoint = _.breakpoints[breakpoint];
            }
          } else {
            if (respondToWidth > _.breakpoints[breakpoint]) {
              targetBreakpoint = _.breakpoints[breakpoint];
            }
          }
        }
      }
      if (null !== targetBreakpoint) {
        if (null !== _.activeBreakpoint) {
          if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
            _.activeBreakpoint = targetBreakpoint;
            if ("unslick" === _.breakpointSettings[targetBreakpoint]) {
              _.unslick(targetBreakpoint);
            } else {
              _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
              if (true === initial) {
                _.currentSlide = _.options.initialSlide;
              }
              _.refresh(initial);
            }
            triggerBreakpoint = targetBreakpoint;
          }
        } else {
          /** @type {null} */
          _.activeBreakpoint = targetBreakpoint;
          if ("unslick" === _.breakpointSettings[targetBreakpoint]) {
            _.unslick(targetBreakpoint);
          } else {
            _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
            if (true === initial) {
              _.currentSlide = _.options.initialSlide;
            }
            _.refresh(initial);
          }
          /** @type {null} */
          triggerBreakpoint = targetBreakpoint;
        }
      } else {
        if (null !== _.activeBreakpoint) {
          /** @type {null} */
          _.activeBreakpoint = null;
          _.options = _.originalSettings;
          if (true === initial) {
            _.currentSlide = _.options.initialSlide;
          }
          _.refresh(initial);
          /** @type {null} */
          triggerBreakpoint = targetBreakpoint;
        }
      }
      if (!(initial || false === triggerBreakpoint)) {
        _.$slider.trigger("breakpoint", [_, triggerBreakpoint]);
      }
    }
  };
  /**
   * @param {!Object} event
   * @param {boolean} dontAnimate
   * @return {undefined}
   */
  Slick.prototype.changeSlide = function(event, dontAnimate) {
    var indexOffset;
    var slideOffset;
    var unevenOffset;
    var _ = this;
    var $lis = $(event.currentTarget);
    switch($lis.is("a") && event.preventDefault(), $lis.is("li") || ($lis = $lis.closest("li")), unevenOffset = _.slideCount % _.options.slidesToScroll != 0, indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll, event.data.message) {
      case "previous":
        slideOffset = 0 === indexOffset ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
        if (_.slideCount > _.options.slidesToShow) {
          _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
        }
        break;
      case "next":
        slideOffset = 0 === indexOffset ? _.options.slidesToScroll : indexOffset;
        if (_.slideCount > _.options.slidesToShow) {
          _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
        }
        break;
      case "index":
        var index = 0 === event.data.index ? 0 : event.data.index || $lis.index() * _.options.slidesToScroll;
        _.slideHandler(_.checkNavigable(index), false, dontAnimate);
        $lis.children().trigger("focus");
        break;
      default:
        return;
    }
  };
  /**
   * @param {number} index
   * @return {?}
   */
  Slick.prototype.checkNavigable = function(index) {
    var navigables;
    var prevNavigable;
    if (navigables = this.getNavigableIndexes(), prevNavigable = 0, index > navigables[navigables.length - 1]) {
      index = navigables[navigables.length - 1];
    } else {
      var n;
      for (n in navigables) {
        if (index < navigables[n]) {
          index = prevNavigable;
          break;
        }
        prevNavigable = navigables[n];
      }
    }
    return index;
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.cleanUpEvents = function() {
    var _ = this;
    if (_.options.dots && null !== _.$dots) {
      $("li", _.$dots).off("click.slick", _.changeSlide).off("mouseenter.slick", $.proxy(_.interrupt, _, true)).off("mouseleave.slick", $.proxy(_.interrupt, _, false));
      if (true === _.options.accessibility) {
        _.$dots.off("keydown.slick", _.keyHandler);
      }
    }
    _.$slider.off("focus.slick blur.slick");
    if (true === _.options.arrows && _.slideCount > _.options.slidesToShow) {
      if (_.$prevArrow) {
        _.$prevArrow.off("click.slick", _.changeSlide);
      }
      if (_.$nextArrow) {
        _.$nextArrow.off("click.slick", _.changeSlide);
      }
      if (true === _.options.accessibility) {
        if (_.$prevArrow) {
          _.$prevArrow.off("keydown.slick", _.keyHandler);
        }
        if (_.$nextArrow) {
          _.$nextArrow.off("keydown.slick", _.keyHandler);
        }
      }
    }
    _.$list.off("touchstart.slick mousedown.slick", _.swipeHandler);
    _.$list.off("touchmove.slick mousemove.slick", _.swipeHandler);
    _.$list.off("touchend.slick mouseup.slick", _.swipeHandler);
    _.$list.off("touchcancel.slick mouseleave.slick", _.swipeHandler);
    _.$list.off("click.slick", _.clickHandler);
    $(document).off(_.visibilityChange, _.visibility);
    _.cleanUpSlideEvents();
    if (true === _.options.accessibility) {
      _.$list.off("keydown.slick", _.keyHandler);
    }
    if (true === _.options.focusOnSelect) {
      $(_.$slideTrack).children().off("click.slick", _.selectHandler);
    }
    $(window).off("orientationchange.slick.slick-" + _.instanceUid, _.orientationChange);
    $(window).off("resize.slick.slick-" + _.instanceUid, _.resize);
    $("[draggable!=true]", _.$slideTrack).off("dragstart", _.preventDefault);
    $(window).off("load.slick.slick-" + _.instanceUid, _.setPosition);
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.cleanUpSlideEvents = function() {
    var self = this;
    self.$list.off("mouseenter.slick", $.proxy(self.interrupt, self, true));
    self.$list.off("mouseleave.slick", $.proxy(self.interrupt, self, false));
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.cleanUpRows = function() {
    var sparklineElement;
    var _ = this;
    if (_.options.rows > 1) {
      (sparklineElement = _.$slides.children().children()).removeAttr("style");
      _.$slider.empty().append(sparklineElement);
    }
  };
  /**
   * @param {!Event} event
   * @return {undefined}
   */
  Slick.prototype.clickHandler = function(event) {
    if (false === this.shouldClick) {
      event.stopImmediatePropagation();
      event.stopPropagation();
      event.preventDefault();
    }
  };
  /**
   * @param {boolean} s
   * @return {undefined}
   */
  Slick.prototype.destroy = function(s) {
    var _ = this;
    _.autoPlayClear();
    _.touchObject = {};
    _.cleanUpEvents();
    $(".slick-cloned", _.$slider).detach();
    if (_.$dots) {
      _.$dots.remove();
    }
    if (_.$prevArrow && _.$prevArrow.length) {
      _.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", "");
      if (_.htmlExpr.test(_.options.prevArrow)) {
        _.$prevArrow.remove();
      }
    }
    if (_.$nextArrow && _.$nextArrow.length) {
      _.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", "");
      if (_.htmlExpr.test(_.options.nextArrow)) {
        _.$nextArrow.remove();
      }
    }
    if (_.$slides) {
      _.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function() {
        $(this).attr("style", $(this).data("originalStyling"));
      });
      _.$slideTrack.children(this.options.slide).detach();
      _.$slideTrack.detach();
      _.$list.detach();
      _.$slider.append(_.$slides);
    }
    _.cleanUpRows();
    _.$slider.removeClass("slick-slider");
    _.$slider.removeClass("slick-initialized");
    _.$slider.removeClass("slick-dotted");
    /** @type {boolean} */
    _.unslicked = true;
    if (!s) {
      _.$slider.trigger("destroy", [_]);
    }
  };
  /**
   * @param {number} slide
   * @return {undefined}
   */
  Slick.prototype.disableTransition = function(slide) {
    var _ = this;
    var transition = {};
    /** @type {string} */
    transition[_.transitionType] = "";
    if (false === _.options.fade) {
      _.$slideTrack.css(transition);
    } else {
      _.$slides.eq(slide).css(transition);
    }
  };
  /**
   * @param {number} slideIndex
   * @param {?} callback
   * @return {undefined}
   */
  Slick.prototype.fadeSlide = function(slideIndex, callback) {
    var _ = this;
    if (false === _.cssTransitions) {
      _.$slides.eq(slideIndex).css({
        zIndex : _.options.zIndex
      });
      _.$slides.eq(slideIndex).animate({
        opacity : 1
      }, _.options.speed, _.options.easing, callback);
    } else {
      _.applyTransition(slideIndex);
      _.$slides.eq(slideIndex).css({
        opacity : 1,
        zIndex : _.options.zIndex
      });
      if (callback) {
        setTimeout(function() {
          _.disableTransition(slideIndex);
          callback.call();
        }, _.options.speed);
      }
    }
  };
  /**
   * @param {number} slideIndex
   * @return {undefined}
   */
  Slick.prototype.fadeSlideOut = function(slideIndex) {
    var _ = this;
    if (false === _.cssTransitions) {
      _.$slides.eq(slideIndex).animate({
        opacity : 0,
        zIndex : _.options.zIndex - 2
      }, _.options.speed, _.options.easing);
    } else {
      _.applyTransition(slideIndex);
      _.$slides.eq(slideIndex).css({
        opacity : 0,
        zIndex : _.options.zIndex - 2
      });
    }
  };
  /** @type {function(string): undefined} */
  Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {
    var _ = this;
    if (null !== filter) {
      _.$slidesCache = _.$slides;
      _.unload();
      _.$slideTrack.children(this.options.slide).detach();
      _.$slidesCache.filter(filter).appendTo(_.$slideTrack);
      _.reinit();
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.focusHandler = function() {
    var _ = this;
    _.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick", "*", function(event) {
      event.stopImmediatePropagation();
      var $passwordList = $(this);
      setTimeout(function() {
        if (_.options.pauseOnFocus) {
          _.focussed = $passwordList.is(":focus");
          _.autoPlay();
        }
      }, 0);
    });
  };
  /** @type {function(): ?} */
  Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {
    return this.currentSlide;
  };
  /**
   * @return {?}
   */
  Slick.prototype.getDotCount = function() {
    var _ = this;
    /** @type {number} */
    var breakPoint = 0;
    /** @type {number} */
    var counter = 0;
    /** @type {number} */
    var pagerQty = 0;
    if (true === _.options.infinite) {
      if (_.slideCount <= _.options.slidesToShow) {
        ++pagerQty;
      } else {
        for (; breakPoint < _.slideCount;) {
          ++pagerQty;
          breakPoint = counter + _.options.slidesToScroll;
          counter = counter + (_.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow);
        }
      }
    } else {
      if (true === _.options.centerMode) {
        pagerQty = _.slideCount;
      } else {
        if (_.options.asNavFor) {
          for (; breakPoint < _.slideCount;) {
            ++pagerQty;
            breakPoint = counter + _.options.slidesToScroll;
            counter = counter + (_.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow);
          }
        } else {
          /** @type {number} */
          pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
        }
      }
    }
    return pagerQty - 1;
  };
  /**
   * @param {number} slideIndex
   * @return {?}
   */
  Slick.prototype.getLeft = function(slideIndex) {
    var i;
    var verticalHeight;
    var c;
    var r;
    var _ = this;
    /** @type {number} */
    var value = 0;
    return _.slideOffset = 0, verticalHeight = _.$slides.first().outerHeight(true), true === _.options.infinite ? (_.slideCount > _.options.slidesToShow && (_.slideOffset = _.slideWidth * _.options.slidesToShow * -1, r = -1, true === _.options.vertical && true === _.options.centerMode && (2 === _.options.slidesToShow ? r = -1.5 : 1 === _.options.slidesToShow && (r = -2)), value = verticalHeight * _.options.slidesToShow * r), _.slideCount % _.options.slidesToScroll != 0 && slideIndex + _.options.slidesToScroll > 
    _.slideCount && _.slideCount > _.options.slidesToShow && (slideIndex > _.slideCount ? (_.slideOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth * -1, value = (_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight * -1) : (_.slideOffset = _.slideCount % _.options.slidesToScroll * _.slideWidth * -1, value = _.slideCount % _.options.slidesToScroll * verticalHeight * -1))) : slideIndex + _.options.slidesToShow > _.slideCount && (_.slideOffset = (slideIndex + 
    _.options.slidesToShow - _.slideCount) * _.slideWidth, value = (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight), _.slideCount <= _.options.slidesToShow && (_.slideOffset = 0, value = 0), true === _.options.centerMode && _.slideCount <= _.options.slidesToShow ? _.slideOffset = _.slideWidth * Math.floor(_.options.slidesToShow) / 2 - _.slideWidth * _.slideCount / 2 : true === _.options.centerMode && true === _.options.infinite ? _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 
    2) - _.slideWidth : true === _.options.centerMode && (_.slideOffset = 0, _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2)), i = false === _.options.vertical ? slideIndex * _.slideWidth * -1 + _.slideOffset : slideIndex * verticalHeight * -1 + value, true === _.options.variableWidth && (c = _.slideCount <= _.options.slidesToShow || false === _.options.infinite ? _.$slideTrack.children(".slick-slide").eq(slideIndex) : _.$slideTrack.children(".slick-slide").eq(slideIndex + 
    _.options.slidesToShow), i = true === _.options.rtl ? c[0] ? -1 * (_.$slideTrack.width() - c[0].offsetLeft - c.width()) : 0 : c[0] ? -1 * c[0].offsetLeft : 0, true === _.options.centerMode && (c = _.slideCount <= _.options.slidesToShow || false === _.options.infinite ? _.$slideTrack.children(".slick-slide").eq(slideIndex) : _.$slideTrack.children(".slick-slide").eq(slideIndex + _.options.slidesToShow + 1), i = true === _.options.rtl ? c[0] ? -1 * (_.$slideTrack.width() - c[0].offsetLeft - c.width()) : 
    0 : c[0] ? -1 * c[0].offsetLeft : 0, i = i + (_.$list.width() - c.outerWidth()) / 2)), i;
  };
  /** @type {function(?): ?} */
  Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {
    return this.options[option];
  };
  /**
   * @return {?}
   */
  Slick.prototype.getNavigableIndexes = function() {
    var pagerQty;
    var _ = this;
    /** @type {number} */
    var i = 0;
    /** @type {number} */
    var counter = 0;
    /** @type {!Array} */
    var indexes = [];
    if (false === _.options.infinite) {
      pagerQty = _.slideCount;
    } else {
      /** @type {number} */
      i = -1 * _.options.slidesToScroll;
      /** @type {number} */
      counter = -1 * _.options.slidesToScroll;
      /** @type {number} */
      pagerQty = 2 * _.slideCount;
    }
    for (; i < pagerQty;) {
      indexes.push(i);
      i = counter + _.options.slidesToScroll;
      counter = counter + (_.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow);
    }
    return indexes;
  };
  /**
   * @return {?}
   */
  Slick.prototype.getSlick = function() {
    return this;
  };
  /**
   * @return {?}
   */
  Slick.prototype.getSlideCount = function() {
    var t;
    var left;
    var _ = this;
    return left = true === _.options.centerMode ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0, true === _.options.swipeToSlide ? (_.$slideTrack.find(".slick-slide").each(function(s, e) {
      if (e.offsetLeft - left + $(e).outerWidth() / 2 > -1 * _.swipeLeft) {
        return t = e, false;
      }
    }), Math.abs($(t).attr("data-slick-index") - _.currentSlide) || 1) : _.options.slidesToScroll;
  };
  /** @type {function(?, boolean): undefined} */
  Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {
    this.changeSlide({
      data : {
        message : "index",
        index : parseInt(slide)
      }
    }, dontAnimate);
  };
  /**
   * @param {string} e
   * @return {undefined}
   */
  Slick.prototype.init = function(e) {
    var _ = this;
    if (!$(_.$slider).hasClass("slick-initialized")) {
      $(_.$slider).addClass("slick-initialized");
      _.buildRows();
      _.buildOut();
      _.setProps();
      _.startLoad();
      _.loadSlider();
      _.initializeEvents();
      _.updateArrows();
      _.updateDots();
      _.checkResponsive(true);
      _.focusHandler();
    }
    if (e) {
      _.$slider.trigger("init", [_]);
    }
    if (true === _.options.accessibility) {
      _.initADA();
    }
    if (_.options.autoplay) {
      /** @type {boolean} */
      _.paused = false;
      _.autoPlay();
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.initADA = function() {
    var _ = this;
    /** @type {number} */
    var userName = Math.ceil(_.slideCount / _.options.slidesToShow);
    var info = _.getNavigableIndexes().filter(function(i) {
      return i >= 0 && i < _.slideCount;
    });
    _.$slides.add(_.$slideTrack.find(".slick-cloned")).attr({
      "aria-hidden" : "true",
      tabindex : "-1"
    }).find("a, input, button, select").attr({
      tabindex : "-1"
    });
    if (null !== _.$dots) {
      _.$slides.not(_.$slideTrack.find(".slick-cloned")).each(function(i) {
        var $sendIcon = info.indexOf(i);
        $(this).attr({
          role : "tabpanel",
          id : "slick-slide" + _.instanceUid + i,
          tabindex : -1
        });
        if (-1 !== $sendIcon) {
          $(this).attr({
            "aria-describedby" : "slick-slide-control" + _.instanceUid + $sendIcon
          });
        }
      });
      _.$dots.attr("role", "tablist").find("li").each(function(hash) {
        var i = info[hash];
        $(this).attr({
          role : "presentation"
        });
        $(this).find("button").first().attr({
          role : "tab",
          id : "slick-slide-control" + _.instanceUid + hash,
          "aria-controls" : "slick-slide" + _.instanceUid + i,
          "aria-label" : hash + 1 + " of " + userName,
          "aria-selected" : null,
          tabindex : "-1"
        });
      }).eq(_.currentSlide).find("button").attr({
        "aria-selected" : "true",
        tabindex : "0"
      }).end();
    }
    var i = _.currentSlide;
    var dest = i + _.options.slidesToShow;
    for (; i < dest; i++) {
      _.$slides.eq(i).attr("tabindex", 0);
    }
    _.activateADA();
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.initArrowEvents = function() {
    var _ = this;
    if (true === _.options.arrows && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow.off("click.slick").on("click.slick", {
        message : "previous"
      }, _.changeSlide);
      _.$nextArrow.off("click.slick").on("click.slick", {
        message : "next"
      }, _.changeSlide);
      if (true === _.options.accessibility) {
        _.$prevArrow.on("keydown.slick", _.keyHandler);
        _.$nextArrow.on("keydown.slick", _.keyHandler);
      }
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.initDotEvents = function() {
    var _ = this;
    if (true === _.options.dots) {
      $("li", _.$dots).on("click.slick", {
        message : "index"
      }, _.changeSlide);
      if (true === _.options.accessibility) {
        _.$dots.on("keydown.slick", _.keyHandler);
      }
    }
    if (true === _.options.dots && true === _.options.pauseOnDotsHover) {
      $("li", _.$dots).on("mouseenter.slick", $.proxy(_.interrupt, _, true)).on("mouseleave.slick", $.proxy(_.interrupt, _, false));
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.initSlideEvents = function() {
    var self = this;
    if (self.options.pauseOnHover) {
      self.$list.on("mouseenter.slick", $.proxy(self.interrupt, self, true));
      self.$list.on("mouseleave.slick", $.proxy(self.interrupt, self, false));
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.initializeEvents = function() {
    var _ = this;
    _.initArrowEvents();
    _.initDotEvents();
    _.initSlideEvents();
    _.$list.on("touchstart.slick mousedown.slick", {
      action : "start"
    }, _.swipeHandler);
    _.$list.on("touchmove.slick mousemove.slick", {
      action : "move"
    }, _.swipeHandler);
    _.$list.on("touchend.slick mouseup.slick", {
      action : "end"
    }, _.swipeHandler);
    _.$list.on("touchcancel.slick mouseleave.slick", {
      action : "end"
    }, _.swipeHandler);
    _.$list.on("click.slick", _.clickHandler);
    $(document).on(_.visibilityChange, $.proxy(_.visibility, _));
    if (true === _.options.accessibility) {
      _.$list.on("keydown.slick", _.keyHandler);
    }
    if (true === _.options.focusOnSelect) {
      $(_.$slideTrack).children().on("click.slick", _.selectHandler);
    }
    $(window).on("orientationchange.slick.slick-" + _.instanceUid, $.proxy(_.orientationChange, _));
    $(window).on("resize.slick.slick-" + _.instanceUid, $.proxy(_.resize, _));
    $("[draggable!=true]", _.$slideTrack).on("dragstart", _.preventDefault);
    $(window).on("load.slick.slick-" + _.instanceUid, _.setPosition);
    $(_.setPosition);
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.initUI = function() {
    var _ = this;
    if (true === _.options.arrows && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow.show();
      _.$nextArrow.show();
    }
    if (true === _.options.dots && _.slideCount > _.options.slidesToShow) {
      _.$dots.show();
    }
  };
  /**
   * @param {!Event} event
   * @return {undefined}
   */
  Slick.prototype.keyHandler = function(event) {
    var _ = this;
    if (!event.target.tagName.match("TEXTAREA|INPUT|SELECT")) {
      if (37 === event.keyCode && true === _.options.accessibility) {
        _.changeSlide({
          data : {
            message : true === _.options.rtl ? "next" : "previous"
          }
        });
      } else {
        if (39 === event.keyCode && true === _.options.accessibility) {
          _.changeSlide({
            data : {
              message : true === _.options.rtl ? "previous" : "next"
            }
          });
        }
      }
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.lazyLoad = function() {
    /**
     * @param {!Object} imagesScope
     * @return {undefined}
     */
    function loadImages(imagesScope) {
      $("img[data-lazy]", imagesScope).each(function() {
        var image = $(this);
        var src = $(this).attr("data-lazy");
        var options = $(this).attr("data-srcset");
        var visible = $(this).attr("data-sizes") || _.$slider.attr("data-sizes");
        /** @type {!Element} */
        var s = document.createElement("img");
        /**
         * @return {undefined}
         */
        s.onload = function() {
          image.animate({
            opacity : 0
          }, 100, function() {
            if (options) {
              image.attr("srcset", options);
              if (visible) {
                image.attr("sizes", visible);
              }
            }
            image.attr("src", src).animate({
              opacity : 1
            }, 200, function() {
              image.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading");
            });
            _.$slider.trigger("lazyLoaded", [_, image, src]);
          });
        };
        /**
         * @return {undefined}
         */
        s.onerror = function() {
          image.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error");
          _.$slider.trigger("lazyLoadError", [_, image, src]);
        };
        s.src = src;
      });
    }
    var loadRange;
    var y;
    var value;
    var _ = this;
    if (true === _.options.centerMode ? true === _.options.infinite ? value = (y = _.currentSlide + (_.options.slidesToShow / 2 + 1)) + _.options.slidesToShow + 2 : (y = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1)), value = _.options.slidesToShow / 2 + 1 + 2 + _.currentSlide) : (y = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide, value = Math.ceil(y + _.options.slidesToShow), true === _.options.fade && (y > 0 && y--, value <= _.slideCount && value++)), 
    loadRange = _.$slider.find(".slick-slide").slice(y, value), "anticipated" === _.options.lazyLoad) {
      /** @type {number} */
      var nextSlide = y - 1;
      var current = value;
      var slides = _.$slider.find(".slick-slide");
      /** @type {number} */
      var i = 0;
      for (; i < _.options.slidesToScroll; i++) {
        if (nextSlide < 0) {
          /** @type {number} */
          nextSlide = _.slideCount - 1;
        }
        loadRange = (loadRange = loadRange.add(slides.eq(nextSlide))).add(slides.eq(current));
        nextSlide--;
        current++;
      }
    }
    loadImages(loadRange);
    if (_.slideCount <= _.options.slidesToShow) {
      loadImages(_.$slider.find(".slick-slide"));
    } else {
      if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
        loadImages(_.$slider.find(".slick-cloned").slice(0, _.options.slidesToShow));
      } else {
        if (0 === _.currentSlide) {
          loadImages(_.$slider.find(".slick-cloned").slice(-1 * _.options.slidesToShow));
        }
      }
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.loadSlider = function() {
    var _ = this;
    _.setPosition();
    _.$slideTrack.css({
      opacity : 1
    });
    _.$slider.removeClass("slick-loading");
    _.initUI();
    if ("progressive" === _.options.lazyLoad) {
      _.progressiveLazyLoad();
    }
  };
  /** @type {function(): undefined} */
  Slick.prototype.next = Slick.prototype.slickNext = function() {
    this.changeSlide({
      data : {
        message : "next"
      }
    });
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.orientationChange = function() {
    var _ = this;
    _.checkResponsive();
    _.setPosition();
  };
  /** @type {function(): undefined} */
  Slick.prototype.pause = Slick.prototype.slickPause = function() {
    var _ = this;
    _.autoPlayClear();
    /** @type {boolean} */
    _.paused = true;
  };
  /** @type {function(): undefined} */
  Slick.prototype.play = Slick.prototype.slickPlay = function() {
    var _ = this;
    _.autoPlay();
    /** @type {boolean} */
    _.options.autoplay = true;
    /** @type {boolean} */
    _.paused = false;
    /** @type {boolean} */
    _.focussed = false;
    /** @type {boolean} */
    _.interrupted = false;
  };
  /**
   * @param {!Object} index
   * @return {undefined}
   */
  Slick.prototype.postSlide = function(index) {
    var _ = this;
    if (!_.unslicked) {
      _.$slider.trigger("afterChange", [_, index]);
      /** @type {boolean} */
      _.animating = false;
      if (_.slideCount > _.options.slidesToShow) {
        _.setPosition();
      }
      /** @type {null} */
      _.swipeLeft = null;
      if (_.options.autoplay) {
        _.autoPlay();
      }
      if (true === _.options.accessibility) {
        _.initADA();
        if (_.options.focusOnChange) {
          $(_.$slides.get(_.currentSlide)).attr("tabindex", 0).focus();
        }
      }
    }
  };
  /** @type {function(): undefined} */
  Slick.prototype.prev = Slick.prototype.slickPrev = function() {
    this.changeSlide({
      data : {
        message : "previous"
      }
    });
  };
  /**
   * @param {!Event} event
   * @return {undefined}
   */
  Slick.prototype.preventDefault = function(event) {
    event.preventDefault();
  };
  /**
   * @param {number} tryCount
   * @return {undefined}
   */
  Slick.prototype.progressiveLazyLoad = function(tryCount) {
    tryCount = tryCount || 1;
    var image;
    var url;
    var visible;
    var w;
    var imageToLoad;
    var _ = this;
    var waitingIssues = $("img[data-lazy]", _.$slider);
    if (waitingIssues.length) {
      image = waitingIssues.first();
      url = image.attr("data-lazy");
      visible = image.attr("data-srcset");
      w = image.attr("data-sizes") || _.$slider.attr("data-sizes");
      /**
       * @return {undefined}
       */
      (imageToLoad = document.createElement("img")).onload = function() {
        if (visible) {
          image.attr("srcset", visible);
          if (w) {
            image.attr("sizes", w);
          }
        }
        image.attr("src", url).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading");
        if (true === _.options.adaptiveHeight) {
          _.setPosition();
        }
        _.$slider.trigger("lazyLoaded", [_, image, url]);
        _.progressiveLazyLoad();
      };
      /**
       * @return {undefined}
       */
      imageToLoad.onerror = function() {
        if (tryCount < 3) {
          setTimeout(function() {
            _.progressiveLazyLoad(tryCount + 1);
          }, 500);
        } else {
          image.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error");
          _.$slider.trigger("lazyLoadError", [_, image, url]);
          _.progressiveLazyLoad();
        }
      };
      imageToLoad.src = url;
    } else {
      _.$slider.trigger("allImagesLoaded", [_]);
    }
  };
  /**
   * @param {boolean} height
   * @return {undefined}
   */
  Slick.prototype.refresh = function(height) {
    var currentSlide;
    var firstVisible;
    var _ = this;
    /** @type {number} */
    firstVisible = _.slideCount - _.options.slidesToShow;
    if (!_.options.infinite && _.currentSlide > firstVisible) {
      /** @type {number} */
      _.currentSlide = firstVisible;
    }
    if (_.slideCount <= _.options.slidesToShow) {
      /** @type {number} */
      _.currentSlide = 0;
    }
    currentSlide = _.currentSlide;
    _.destroy(true);
    $.extend(_, _.initials, {
      currentSlide : currentSlide
    });
    _.init();
    if (!height) {
      _.changeSlide({
        data : {
          message : "index",
          index : currentSlide
        }
      }, false);
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.registerBreakpoints = function() {
    var i;
    var currentBreakpoint;
    var l;
    var _ = this;
    var value = _.options.responsive || null;
    if ("array" === $.type(value) && value.length) {
      _.respondTo = _.options.respondTo || "window";
      for (i in value) {
        if (l = _.breakpoints.length - 1, value.hasOwnProperty(i)) {
          currentBreakpoint = value[i].breakpoint;
          for (; l >= 0;) {
            if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {
              _.breakpoints.splice(l, 1);
            }
            l--;
          }
          _.breakpoints.push(currentBreakpoint);
          _.breakpointSettings[currentBreakpoint] = value[i].settings;
        }
      }
      _.breakpoints.sort(function(a, b) {
        return _.options.mobileFirst ? a - b : b - a;
      });
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.reinit = function() {
    var _ = this;
    _.$slides = _.$slideTrack.children(_.options.slide).addClass("slick-slide");
    _.slideCount = _.$slides.length;
    if (_.currentSlide >= _.slideCount && 0 !== _.currentSlide) {
      /** @type {number} */
      _.currentSlide = _.currentSlide - _.options.slidesToScroll;
    }
    if (_.slideCount <= _.options.slidesToShow) {
      /** @type {number} */
      _.currentSlide = 0;
    }
    _.registerBreakpoints();
    _.setProps();
    _.setupInfinite();
    _.buildArrows();
    _.updateArrows();
    _.initArrowEvents();
    _.buildDots();
    _.updateDots();
    _.initDotEvents();
    _.cleanUpSlideEvents();
    _.initSlideEvents();
    _.checkResponsive(false, true);
    if (true === _.options.focusOnSelect) {
      $(_.$slideTrack).children().on("click.slick", _.selectHandler);
    }
    _.setSlideClasses("number" == typeof _.currentSlide ? _.currentSlide : 0);
    _.setPosition();
    _.focusHandler();
    /** @type {boolean} */
    _.paused = !_.options.autoplay;
    _.autoPlay();
    _.$slider.trigger("reInit", [_]);
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.resize = function() {
    var _ = this;
    if ($(window).width() !== _.windowWidth) {
      clearTimeout(_.windowDelay);
      _.windowDelay = window.setTimeout(function() {
        _.windowWidth = $(window).width();
        _.checkResponsive();
        if (!_.unslicked) {
          _.setPosition();
        }
      }, 50);
    }
  };
  /** @type {function(number, (number|string), (number|string)): ?} */
  Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {
    var _ = this;
    if (index = "boolean" == typeof index ? true === (removeBefore = index) ? 0 : _.slideCount - 1 : true === removeBefore ? --index : index, _.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
      return false;
    }
    _.unload();
    if (true === removeAll) {
      _.$slideTrack.children().remove();
    } else {
      _.$slideTrack.children(this.options.slide).eq(index).remove();
    }
    _.$slides = _.$slideTrack.children(this.options.slide);
    _.$slideTrack.children(this.options.slide).detach();
    _.$slideTrack.append(_.$slides);
    _.$slidesCache = _.$slides;
    _.reinit();
  };
  /**
   * @param {number} position
   * @return {undefined}
   */
  Slick.prototype.setCSS = function(position) {
    var o;
    var s;
    var _ = this;
    var positionProps = {};
    if (true === _.options.rtl) {
      /** @type {number} */
      position = -position;
    }
    /** @type {string} */
    o = "left" == _.positionProp ? Math.ceil(position) + "px" : "0px";
    /** @type {string} */
    s = "top" == _.positionProp ? Math.ceil(position) + "px" : "0px";
    /** @type {number} */
    positionProps[_.positionProp] = position;
    if (false === _.transformsEnabled) {
      _.$slideTrack.css(positionProps);
    } else {
      positionProps = {};
      if (false === _.cssTransitions) {
        /** @type {string} */
        positionProps[_.animType] = "translate(" + o + ", " + s + ")";
        _.$slideTrack.css(positionProps);
      } else {
        /** @type {string} */
        positionProps[_.animType] = "translate3d(" + o + ", " + s + ", 0px)";
        _.$slideTrack.css(positionProps);
      }
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.setDimensions = function() {
    var _ = this;
    if (false === _.options.vertical) {
      if (true === _.options.centerMode) {
        _.$list.css({
          padding : "0px " + _.options.centerPadding
        });
      }
    } else {
      _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
      if (true === _.options.centerMode) {
        _.$list.css({
          padding : _.options.centerPadding + " 0px"
        });
      }
    }
    _.listWidth = _.$list.width();
    _.listHeight = _.$list.height();
    if (false === _.options.vertical && false === _.options.variableWidth) {
      /** @type {number} */
      _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
      _.$slideTrack.width(Math.ceil(_.slideWidth * _.$slideTrack.children(".slick-slide").length));
    } else {
      if (true === _.options.variableWidth) {
        _.$slideTrack.width(5E3 * _.slideCount);
      } else {
        /** @type {number} */
        _.slideWidth = Math.ceil(_.listWidth);
        _.$slideTrack.height(Math.ceil(_.$slides.first().outerHeight(true) * _.$slideTrack.children(".slick-slide").length));
      }
    }
    /** @type {number} */
    var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
    if (false === _.options.variableWidth) {
      _.$slideTrack.children(".slick-slide").width(_.slideWidth - offset);
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.setFade = function() {
    var stringOrNumberPropType;
    var _ = this;
    _.$slides.each(function(index, entryEl) {
      /** @type {number} */
      stringOrNumberPropType = _.slideWidth * index * -1;
      if (true === _.options.rtl) {
        $(entryEl).css({
          position : "relative",
          right : stringOrNumberPropType,
          top : 0,
          zIndex : _.options.zIndex - 2,
          opacity : 0
        });
      } else {
        $(entryEl).css({
          position : "relative",
          left : stringOrNumberPropType,
          top : 0,
          zIndex : _.options.zIndex - 2,
          opacity : 0
        });
      }
    });
    _.$slides.eq(_.currentSlide).css({
      zIndex : _.options.zIndex - 1,
      opacity : 1
    });
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.setHeight = function() {
    var _ = this;
    if (1 === _.options.slidesToShow && true === _.options.adaptiveHeight && false === _.options.vertical) {
      var ipb_session_id = _.$slides.eq(_.currentSlide).outerHeight(true);
      _.$list.css("height", ipb_session_id);
    }
  };
  /** @type {function(): undefined} */
  Slick.prototype.setOption = Slick.prototype.slickSetOption = function() {
    var l;
    var i;
    var r;
    var v;
    var type;
    var _ = this;
    /** @type {boolean} */
    var n = false;
    if ("object" === $.type(arguments[0]) ? (r = arguments[0], n = arguments[1], type = "multiple") : "string" === $.type(arguments[0]) && (r = arguments[0], v = arguments[1], n = arguments[2], "responsive" === arguments[0] && "array" === $.type(arguments[1]) ? type = "responsive" : void 0 !== arguments[1] && (type = "single")), "single" === type) {
      _.options[r] = v;
    } else {
      if ("multiple" === type) {
        $.each(r, function(name, loadedPlugin) {
          _.options[name] = loadedPlugin;
        });
      } else {
        if ("responsive" === type) {
          for (i in v) {
            if ("array" !== $.type(_.options.responsive)) {
              /** @type {!Array} */
              _.options.responsive = [v[i]];
            } else {
              /** @type {number} */
              l = _.options.responsive.length - 1;
              for (; l >= 0;) {
                if (_.options.responsive[l].breakpoint === v[i].breakpoint) {
                  _.options.responsive.splice(l, 1);
                }
                l--;
              }
              _.options.responsive.push(v[i]);
            }
          }
        }
      }
    }
    if (n) {
      _.unload();
      _.reinit();
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.setPosition = function() {
    var _ = this;
    _.setDimensions();
    _.setHeight();
    if (false === _.options.fade) {
      _.setCSS(_.getLeft(_.currentSlide));
    } else {
      _.setFade();
    }
    _.$slider.trigger("setPosition", [_]);
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.setProps = function() {
    var _ = this;
    /** @type {!CSSStyleDeclaration} */
    var bodyStyle = document.body.style;
    /** @type {string} */
    _.positionProp = true === _.options.vertical ? "top" : "left";
    if ("top" === _.positionProp) {
      _.$slider.addClass("slick-vertical");
    } else {
      _.$slider.removeClass("slick-vertical");
    }
    if (!(void 0 === bodyStyle.WebkitTransition && void 0 === bodyStyle.MozTransition && void 0 === bodyStyle.msTransition)) {
      if (true === _.options.useCSS) {
        /** @type {boolean} */
        _.cssTransitions = true;
      }
    }
    if (_.options.fade) {
      if ("number" == typeof _.options.zIndex) {
        if (_.options.zIndex < 3) {
          /** @type {number} */
          _.options.zIndex = 3;
        }
      } else {
        _.options.zIndex = _.defaults.zIndex;
      }
    }
    if (void 0 !== bodyStyle.OTransform) {
      /** @type {string} */
      _.animType = "OTransform";
      /** @type {string} */
      _.transformType = "-o-transform";
      /** @type {string} */
      _.transitionType = "OTransition";
      if (void 0 === bodyStyle.perspectiveProperty && void 0 === bodyStyle.webkitPerspective) {
        /** @type {boolean} */
        _.animType = false;
      }
    }
    if (void 0 !== bodyStyle.MozTransform) {
      /** @type {string} */
      _.animType = "MozTransform";
      /** @type {string} */
      _.transformType = "-moz-transform";
      /** @type {string} */
      _.transitionType = "MozTransition";
      if (void 0 === bodyStyle.perspectiveProperty && void 0 === bodyStyle.MozPerspective) {
        /** @type {boolean} */
        _.animType = false;
      }
    }
    if (void 0 !== bodyStyle.webkitTransform) {
      /** @type {string} */
      _.animType = "webkitTransform";
      /** @type {string} */
      _.transformType = "-webkit-transform";
      /** @type {string} */
      _.transitionType = "webkitTransition";
      if (void 0 === bodyStyle.perspectiveProperty && void 0 === bodyStyle.webkitPerspective) {
        /** @type {boolean} */
        _.animType = false;
      }
    }
    if (void 0 !== bodyStyle.msTransform) {
      /** @type {string} */
      _.animType = "msTransform";
      /** @type {string} */
      _.transformType = "-ms-transform";
      /** @type {string} */
      _.transitionType = "msTransition";
      if (void 0 === bodyStyle.msTransform) {
        /** @type {boolean} */
        _.animType = false;
      }
    }
    if (void 0 !== bodyStyle.transform && false !== _.animType) {
      /** @type {string} */
      _.animType = "transform";
      /** @type {string} */
      _.transformType = "transform";
      /** @type {string} */
      _.transitionType = "transition";
    }
    _.transformsEnabled = _.options.useTransform && null !== _.animType && false !== _.animType;
  };
  /**
   * @param {number} index
   * @return {undefined}
   */
  Slick.prototype.setSlideClasses = function(index) {
    var centerOffset;
    var allSlides;
    var pos;
    var remainder;
    var _ = this;
    if (allSlides = _.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true"), _.$slides.eq(index).addClass("slick-current"), true === _.options.centerMode) {
      /** @type {number} */
      var x1 = _.options.slidesToShow % 2 == 0 ? 1 : 0;
      /** @type {number} */
      centerOffset = Math.floor(_.options.slidesToShow / 2);
      if (true === _.options.infinite) {
        if (index >= centerOffset && index <= _.slideCount - 1 - centerOffset) {
          _.$slides.slice(index - centerOffset + x1, index + centerOffset + 1).addClass("slick-active").attr("aria-hidden", "false");
        } else {
          pos = _.options.slidesToShow + index;
          allSlides.slice(pos - centerOffset + 1 + x1, pos + centerOffset + 2).addClass("slick-active").attr("aria-hidden", "false");
        }
        if (0 === index) {
          allSlides.eq(allSlides.length - 1 - _.options.slidesToShow).addClass("slick-center");
        } else {
          if (index === _.slideCount - 1) {
            allSlides.eq(_.options.slidesToShow).addClass("slick-center");
          }
        }
      }
      _.$slides.eq(index).addClass("slick-center");
    } else {
      if (index >= 0 && index <= _.slideCount - _.options.slidesToShow) {
        _.$slides.slice(index, index + _.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false");
      } else {
        if (allSlides.length <= _.options.slidesToShow) {
          allSlides.addClass("slick-active").attr("aria-hidden", "false");
        } else {
          /** @type {number} */
          remainder = _.slideCount % _.options.slidesToShow;
          pos = true === _.options.infinite ? _.options.slidesToShow + index : index;
          if (_.options.slidesToShow == _.options.slidesToScroll && _.slideCount - index < _.options.slidesToShow) {
            allSlides.slice(pos - (_.options.slidesToShow - remainder), pos + remainder).addClass("slick-active").attr("aria-hidden", "false");
          } else {
            allSlides.slice(pos, pos + _.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false");
          }
        }
      }
    }
    if (!("ondemand" !== _.options.lazyLoad && "anticipated" !== _.options.lazyLoad)) {
      _.lazyLoad();
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.setupInfinite = function() {
    var i;
    var slideIndex;
    var index;
    var _ = this;
    if (true === _.options.fade && (_.options.centerMode = false), true === _.options.infinite && false === _.options.fade && (slideIndex = null, _.slideCount > _.options.slidesToShow)) {
      index = true === _.options.centerMode ? _.options.slidesToShow + 1 : _.options.slidesToShow;
      i = _.slideCount;
      for (; i > _.slideCount - index; i = i - 1) {
        /** @type {number} */
        slideIndex = i - 1;
        $(_.$slides[slideIndex]).clone(true).attr("id", "").attr("data-slick-index", slideIndex - _.slideCount).prependTo(_.$slideTrack).addClass("slick-cloned");
      }
      /** @type {number} */
      i = 0;
      for (; i < index + _.slideCount; i = i + 1) {
        /** @type {number} */
        slideIndex = i;
        $(_.$slides[slideIndex]).clone(true).attr("id", "").attr("data-slick-index", slideIndex + _.slideCount).appendTo(_.$slideTrack).addClass("slick-cloned");
      }
      _.$slideTrack.find(".slick-cloned").find("[id]").each(function() {
        $(this).attr("id", "");
      });
    }
  };
  /**
   * @param {boolean} toggle
   * @return {undefined}
   */
  Slick.prototype.interrupt = function(toggle) {
    var _ = this;
    if (!toggle) {
      _.autoPlay();
    }
    /** @type {boolean} */
    _.interrupted = toggle;
  };
  /**
   * @param {!Event} event
   * @return {undefined}
   */
  Slick.prototype.selectHandler = function(event) {
    var asNavFor = this;
    var targetElement = $(event.target).is(".slick-slide") ? $(event.target) : $(event.target).parents(".slick-slide");
    /** @type {number} */
    var index = parseInt(targetElement.attr("data-slick-index"));
    if (!index) {
      /** @type {number} */
      index = 0;
    }
    if (asNavFor.slideCount <= asNavFor.options.slidesToShow) {
      asNavFor.slideHandler(index, false, true);
    } else {
      asNavFor.slideHandler(index);
    }
  };
  /**
   * @param {number} index
   * @param {boolean} sync
   * @param {boolean} dontAnimate
   * @return {?}
   */
  Slick.prototype.slideHandler = function(index, sync, dontAnimate) {
    var targetSlide;
    var animSlide;
    var oldSlide;
    var slideLeft;
    var navTarget;
    /** @type {null} */
    var targetLeft = null;
    var _ = this;
    if (sync = sync || false, !(true === _.animating && true === _.options.waitForAnimate || true === _.options.fade && _.currentSlide === index)) {
      if (false === sync && _.asNavFor(index), targetSlide = index, targetLeft = _.getLeft(targetSlide), slideLeft = _.getLeft(_.currentSlide), _.currentLeft = null === _.swipeLeft ? slideLeft : _.swipeLeft, false === _.options.infinite && false === _.options.centerMode && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
        if (false === _.options.fade) {
          targetSlide = _.currentSlide;
          if (true !== dontAnimate) {
            _.animateSlide(slideLeft, function() {
              _.postSlide(targetSlide);
            });
          } else {
            _.postSlide(targetSlide);
          }
        }
      } else {
        if (false === _.options.infinite && true === _.options.centerMode && (index < 0 || index > _.slideCount - _.options.slidesToScroll)) {
          if (false === _.options.fade) {
            targetSlide = _.currentSlide;
            if (true !== dontAnimate) {
              _.animateSlide(slideLeft, function() {
                _.postSlide(targetSlide);
              });
            } else {
              _.postSlide(targetSlide);
            }
          }
        } else {
          if (_.options.autoplay && clearInterval(_.autoPlayTimer), animSlide = targetSlide < 0 ? _.slideCount % _.options.slidesToScroll != 0 ? _.slideCount - _.slideCount % _.options.slidesToScroll : _.slideCount + targetSlide : targetSlide >= _.slideCount ? _.slideCount % _.options.slidesToScroll != 0 ? 0 : targetSlide - _.slideCount : targetSlide, _.animating = true, _.$slider.trigger("beforeChange", [_, _.currentSlide, animSlide]), oldSlide = _.currentSlide, _.currentSlide = animSlide, _.setSlideClasses(_.currentSlide), 
          _.options.asNavFor && (navTarget = (navTarget = _.getNavTarget()).slick("getSlick")).slideCount <= navTarget.options.slidesToShow && navTarget.setSlideClasses(_.currentSlide), _.updateDots(), _.updateArrows(), true === _.options.fade) {
            return true !== dontAnimate ? (_.fadeSlideOut(oldSlide), _.fadeSlide(animSlide, function() {
              _.postSlide(animSlide);
            })) : _.postSlide(animSlide), void _.animateHeight();
          }
          if (true !== dontAnimate) {
            _.animateSlide(targetLeft, function() {
              _.postSlide(animSlide);
            });
          } else {
            _.postSlide(animSlide);
          }
        }
      }
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.startLoad = function() {
    var _ = this;
    if (true === _.options.arrows && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow.hide();
      _.$nextArrow.hide();
    }
    if (true === _.options.dots && _.slideCount > _.options.slidesToShow) {
      _.$dots.hide();
    }
    _.$slider.addClass("slick-loading");
  };
  /**
   * @return {?}
   */
  Slick.prototype.swipeDirection = function() {
    var y;
    var i;
    var val;
    var num;
    var _ = this;
    return y = _.touchObject.startX - _.touchObject.curX, i = _.touchObject.startY - _.touchObject.curY, val = Math.atan2(i, y), (num = Math.round(180 * val / Math.PI)) < 0 && (num = 360 - Math.abs(num)), num <= 45 && num >= 0 ? false === _.options.rtl ? "left" : "right" : num <= 360 && num >= 315 ? false === _.options.rtl ? "left" : "right" : num >= 135 && num <= 225 ? false === _.options.rtl ? "right" : "left" : true === _.options.verticalSwiping ? num >= 35 && num <= 135 ? "down" : "up" : "vertical";
  };
  /**
   * @param {!Event} event
   * @return {?}
   */
  Slick.prototype.swipeEnd = function(event) {
    var slideCount;
    var lhNavActions;
    var _ = this;
    if (_.dragging = false, _.swiping = false, _.scrolling) {
      return _.scrolling = false, false;
    }
    if (_.interrupted = false, _.shouldClick = !(_.touchObject.swipeLength > 10), void 0 === _.touchObject.curX) {
      return false;
    }
    if (true === _.touchObject.edgeHit && _.$slider.trigger("edge", [_, _.swipeDirection()]), _.touchObject.swipeLength >= _.touchObject.minSwipe) {
      switch(lhNavActions = _.swipeDirection()) {
        case "left":
        case "down":
          slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount();
          /** @type {number} */
          _.currentDirection = 0;
          break;
        case "right":
        case "up":
          slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount();
          /** @type {number} */
          _.currentDirection = 1;
      }
      if ("vertical" != lhNavActions) {
        _.slideHandler(slideCount);
        _.touchObject = {};
        _.$slider.trigger("swipe", [_, lhNavActions]);
      }
    } else {
      if (_.touchObject.startX !== _.touchObject.curX) {
        _.slideHandler(_.currentSlide);
        _.touchObject = {};
      }
    }
  };
  /**
   * @param {!Event} event
   * @return {undefined}
   */
  Slick.prototype.swipeHandler = function(event) {
    var _ = this;
    if (!(false === _.options.swipe || "ontouchend" in document && false === _.options.swipe || false === _.options.draggable && -1 !== event.type.indexOf("mouse"))) {
      switch(_.touchObject.fingerCount = event.originalEvent && void 0 !== event.originalEvent.touches ? event.originalEvent.touches.length : 1, _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold, true === _.options.verticalSwiping && (_.touchObject.minSwipe = _.listHeight / _.options.touchThreshold), event.data.action) {
        case "start":
          _.swipeStart(event);
          break;
        case "move":
          _.swipeMove(event);
          break;
        case "end":
          _.swipeEnd(event);
      }
    }
  };
  /**
   * @param {!Event} event
   * @return {?}
   */
  Slick.prototype.swipeMove = function(event) {
    var curLeft;
    var anchorX;
    var swipeLength;
    var positionOffset;
    var undefined;
    var verticalSwipeLength;
    var _ = this;
    return undefined = void 0 !== event.originalEvent ? event.originalEvent.touches : null, !(!_.dragging || _.scrolling || undefined && 1 !== undefined.length) && (curLeft = _.getLeft(_.currentSlide), _.touchObject.curX = void 0 !== undefined ? undefined[0].pageX : event.clientX, _.touchObject.curY = void 0 !== undefined ? undefined[0].pageY : event.clientY, _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2))), verticalSwipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curY - 
    _.touchObject.startY, 2))), !_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4 ? (_.scrolling = true, false) : (true === _.options.verticalSwiping && (_.touchObject.swipeLength = verticalSwipeLength), anchorX = _.swipeDirection(), void 0 !== event.originalEvent && _.touchObject.swipeLength > 4 && (_.swiping = true, event.preventDefault()), positionOffset = (false === _.options.rtl ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1), true === _.options.verticalSwiping && 
    (positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1), swipeLength = _.touchObject.swipeLength, _.touchObject.edgeHit = false, false === _.options.infinite && (0 === _.currentSlide && "right" === anchorX || _.currentSlide >= _.getDotCount() && "left" === anchorX) && (swipeLength = _.touchObject.swipeLength * _.options.edgeFriction, _.touchObject.edgeHit = true), false === _.options.vertical ? _.swipeLeft = curLeft + swipeLength * positionOffset : _.swipeLeft = curLeft + swipeLength * 
    (_.$list.height() / _.listWidth) * positionOffset, true === _.options.verticalSwiping && (_.swipeLeft = curLeft + swipeLength * positionOffset), true !== _.options.fade && false !== _.options.touchMove && (true === _.animating ? (_.swipeLeft = null, false) : void _.setCSS(_.swipeLeft))));
  };
  /**
   * @param {!Event} event
   * @return {?}
   */
  Slick.prototype.swipeStart = function(event) {
    var undefined;
    var _ = this;
    if (_.interrupted = true, 1 !== _.touchObject.fingerCount || _.slideCount <= _.options.slidesToShow) {
      return _.touchObject = {}, false;
    }
    if (void 0 !== event.originalEvent && void 0 !== event.originalEvent.touches) {
      undefined = event.originalEvent.touches[0];
    }
    _.touchObject.startX = _.touchObject.curX = void 0 !== undefined ? undefined.pageX : event.clientX;
    _.touchObject.startY = _.touchObject.curY = void 0 !== undefined ? undefined.pageY : event.clientY;
    /** @type {boolean} */
    _.dragging = true;
  };
  /** @type {function(): undefined} */
  Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {
    var _ = this;
    if (null !== _.$slidesCache) {
      _.unload();
      _.$slideTrack.children(this.options.slide).detach();
      _.$slidesCache.appendTo(_.$slideTrack);
      _.reinit();
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.unload = function() {
    var _ = this;
    $(".slick-cloned", _.$slider).remove();
    if (_.$dots) {
      _.$dots.remove();
    }
    if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
      _.$prevArrow.remove();
    }
    if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
      _.$nextArrow.remove();
    }
    _.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "");
  };
  /**
   * @param {!Object} fromBreakpoint
   * @return {undefined}
   */
  Slick.prototype.unslick = function(fromBreakpoint) {
    var _ = this;
    _.$slider.trigger("unslick", [_, fromBreakpoint]);
    _.destroy();
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.updateArrows = function() {
    var _ = this;
    Math.floor(_.options.slidesToShow / 2);
    if (true === _.options.arrows && _.slideCount > _.options.slidesToShow && !_.options.infinite) {
      _.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
      _.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
      if (0 === _.currentSlide) {
        _.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true");
        _.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
      } else {
        if (_.currentSlide >= _.slideCount - _.options.slidesToShow && false === _.options.centerMode) {
          _.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true");
          _.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
        } else {
          if (_.currentSlide >= _.slideCount - 1 && true === _.options.centerMode) {
            _.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true");
            _.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
          }
        }
      }
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.updateDots = function() {
    var _ = this;
    if (null !== _.$dots) {
      _.$dots.find("li").removeClass("slick-active").end();
      _.$dots.find("li").eq(Math.floor(_.currentSlide / _.options.slidesToScroll)).addClass("slick-active");
    }
  };
  /**
   * @return {undefined}
   */
  Slick.prototype.visibility = function() {
    var _ = this;
    if (_.options.autoplay) {
      if (document[_.hidden]) {
        /** @type {boolean} */
        _.interrupted = true;
      } else {
        /** @type {boolean} */
        _.interrupted = false;
      }
    }
  };
  /**
   * @return {?}
   */
  $.fn.slick = function() {
    var i;
    var ret;
    var _ = this;
    var opt = arguments[0];
    /** @type {!Array<?>} */
    var n = Array.prototype.slice.call(arguments, 1);
    var r = _.length;
    /** @type {number} */
    i = 0;
    for (; i < r; i++) {
      if ("object" == typeof opt || void 0 === opt ? _[i].slick = new Slick(_[i], opt) : ret = _[i].slick[opt].apply(_[i].slick, n), void 0 !== ret) {
        return ret;
      }
    }
    return _;
  };
});
/** @type {function(!Object, ...(Object|null)): !Object} */
var _extends = Object.assign || function(result) {
  /** @type {number} */
  var i = 1;
  for (; i < arguments.length; i++) {
    var value = arguments[i];
    var name;
    for (name in value) {
      if (Object.prototype.hasOwnProperty.call(value, name)) {
        result[name] = value[name];
      }
    }
  }
  return result;
};
/** @type {function(?): ?} */
var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(Orienter) {
  return typeof Orienter;
} : function(obj) {
  return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
!function(global, factory) {
  if ("object" === ("undefined" == typeof exports ? "undefined" : _typeof(exports)) && "undefined" != typeof module) {
    module.exports = factory();
  } else {
    if ("function" == typeof define && define.amd) {
      define(factory);
    } else {
      global.LazyLoad = factory();
    }
  }
}(this, function() {
  /**
   * @param {!HTMLElement} t
   * @param {?} data
   * @param {!Object} component
   * @return {undefined}
   */
  function add(t, data, component) {
    var settings = data._settings;
    if (!(!component && f(t))) {
      g(settings.callback_enter, t);
      if (blocks.indexOf(t.tagName) > -1) {
        u(t, data);
        test(t, settings.class_loading);
      }
      load(t, data);
      bind(t);
      g(settings.callback_set, t);
    }
  }
  var defaultSettings = {
    elements_selector : "img",
    container : document,
    threshold : 300,
    thresholds : null,
    data_src : "src",
    data_srcset : "srcset",
    data_sizes : "sizes",
    data_bg : "bg",
    class_loading : "loading",
    class_loaded : "loaded",
    class_error : "error",
    load_delay : 0,
    callback_load : null,
    callback_error : null,
    callback_set : null,
    callback_enter : null,
    callback_finish : null,
    to_webp : false
  };
  /**
   * @param {?} selector
   * @return {?}
   */
  var extend = function(selector) {
    return _extends({}, defaultSettings, selector);
  };
  /**
   * @param {!Object} el
   * @param {string} name
   * @return {?}
   */
  var $ = function(el, name) {
    return el.getAttribute("data-" + name);
  };
  /**
   * @param {!HTMLElement} target
   * @param {string} identifier
   * @param {!Object} val
   * @return {undefined}
   */
  var callback = function(target, identifier, val) {
    /** @type {string} */
    var name = "data-" + identifier;
    if (null !== val) {
      target.setAttribute(name, val);
    } else {
      target.removeAttribute(name);
    }
  };
  /**
   * @param {!HTMLElement} transform
   * @return {?}
   */
  var bind = function(transform) {
    return callback(transform, "was-processed", "true");
  };
  /**
   * @param {!HTMLElement} text
   * @return {?}
   */
  var f = function(text) {
    return "true" === $(text, "was-processed");
  };
  /**
   * @param {!HTMLElement} t
   * @param {!Object} obj
   * @return {?}
   */
  var notify = function(t, obj) {
    return callback(t, "ll-timeout", obj);
  };
  /**
   * @param {!HTMLElement} sel
   * @return {?}
   */
  var $$ = function(sel) {
    return $(sel, "ll-timeout");
  };
  /**
   * @param {!Array} array
   * @return {?}
   */
  var intersect = function(array) {
    return array.filter(function(elem) {
      return !f(elem);
    });
  };
  /**
   * @param {!Array} _
   * @param {!Node} value
   * @return {?}
   */
  var size = function(_, value) {
    return _.filter(function(result) {
      return result !== value;
    });
  };
  /**
   * @param {!Function} type
   * @param {!Object} object
   * @return {undefined}
   */
  var triggerEvent = function(type, object) {
    var event;
    var instance = new type(object);
    try {
      /** @type {!CustomEvent} */
      event = new CustomEvent("LazyLoad::Initialized", {
        detail : {
          instance : instance
        }
      });
    } catch (r) {
      (event = document.createEvent("CustomEvent")).initCustomEvent("LazyLoad::Initialized", false, false, {
        instance : instance
      });
    }
    window.dispatchEvent(event);
  };
  /**
   * @param {string} text
   * @param {boolean} type
   * @return {?}
   */
  var get = function(text, type) {
    return type ? text.replace(/\.(jpe?g|png)/gi, ".webp") : text;
  };
  /** @type {boolean} */
  var person = "undefined" != typeof window;
  /** @type {boolean} */
  var x = person && !("onscroll" in window) || /(gle|ing|ro)bot|crawl|spider/i.test(navigator.userAgent);
  /** @type {boolean} */
  var reverseIsSingle = person && "IntersectionObserver" in window;
  /** @type {boolean} */
  var tileSeen = person && "classList" in document.createElement("p");
  var options = person && function() {
    /** @type {!Element} */
    var canvas = document.createElement("canvas");
    return !(!canvas.getContext || !canvas.getContext("2d")) && 0 === canvas.toDataURL("image/webp").indexOf("data:image/webp");
  }();
  /**
   * @param {!Object} level
   * @param {string} args
   * @param {string} obj
   * @param {boolean} string
   * @return {undefined}
   */
  var log = function(level, args, obj, string) {
    var data;
    /** @type {number} */
    var j = 0;
    for (; data = level.children[j]; j = j + 1) {
      if ("SOURCE" === data.tagName) {
        var item = $(data, obj);
        cb(data, args, item, string);
      }
    }
  };
  /**
   * @param {!Object} data
   * @param {string} name
   * @param {string} text
   * @param {boolean} value
   * @return {undefined}
   */
  var cb = function(data, name, text, value) {
    if (text) {
      data.setAttribute(name, get(text, value));
    }
  };
  /**
   * @param {!Object} target
   * @param {?} settings
   * @return {undefined}
   */
  var action = function(target, settings) {
    var filter = options && settings.to_webp;
    var a = $(target, settings.data_src);
    var src = $(target, settings.data_bg);
    if (a) {
      var html = get(a, filter);
      /** @type {string} */
      target.style.backgroundImage = 'url("' + html + '")';
    }
    if (src) {
      var val = get(src, filter);
      target.style.backgroundImage = val;
    }
  };
  var tags = {
    IMG : function(v, settings) {
      var file = options && settings.to_webp;
      var template = settings.data_srcset;
      var a = v.parentNode;
      if (a && "PICTURE" === a.tagName) {
        log(a, "srcset", template, file);
      }
      var version = $(v, settings.data_sizes);
      cb(v, "sizes", version);
      var t = $(v, template);
      cb(v, "srcset", t, file);
      var row = $(v, settings.data_src);
      cb(v, "src", row, file);
    },
    IFRAME : function(el, settings) {
      var parent = $(el, settings.data_src);
      cb(el, "src", parent);
    },
    VIDEO : function(level, settings) {
      var data = settings.data_src;
      var header = $(level, data);
      log(level, "src", data);
      cb(level, "src", header);
      level.load();
    }
  };
  /**
   * @param {!Element} s
   * @param {?} v
   * @return {?}
   */
  var load = function(s, v) {
    var i = v._settings;
    var tag = s.tagName;
    var value = tags[tag];
    if (value) {
      return value(s, i), v._updateLoadingCount(1), void(v._elements = size(v._elements, s));
    }
    action(s, i);
  };
  /**
   * @param {!HTMLElement} elem
   * @param {undefined} name
   * @return {undefined}
   */
  var test = function(elem, name) {
    if (tileSeen) {
      elem.classList.add(name);
    } else {
      elem.className += (elem.className ? " " : "") + name;
    }
  };
  /**
   * @param {!Element} el
   * @param {string} o
   * @return {undefined}
   */
  var set = function(el, o) {
    if (tileSeen) {
      el.classList.remove(o);
    } else {
      el.className = el.className.replace(new RegExp("(^|\\s+)" + o + "(\\s+|$)"), " ").replace(/^\s+/, "").replace(/\s+$/, "");
    }
  };
  /**
   * @param {?} e
   * @param {!HTMLElement} k
   * @return {undefined}
   */
  var g = function(e, k) {
    if (e) {
      e(k);
    }
  };
  /**
   * @param {!HTMLElement} input
   * @param {string} name
   * @param {!Function} func
   * @return {undefined}
   */
  var observe = function(input, name, func) {
    input.addEventListener(name, func);
  };
  /**
   * @param {!HTMLElement} element
   * @param {string} type
   * @param {!Function} fn
   * @return {undefined}
   */
  var error = function(element, type, fn) {
    element.removeEventListener(type, fn);
  };
  /**
   * @param {!HTMLElement} target
   * @param {!Function} value
   * @param {!Function} index
   * @return {undefined}
   */
  var update = function(target, value, index) {
    observe(target, "load", value);
    observe(target, "loadeddata", value);
    observe(target, "error", index);
  };
  /**
   * @param {!HTMLElement} json
   * @param {!Function} e
   * @param {!Function} t
   * @return {undefined}
   */
  var print = function(json, e, t) {
    error(json, "load", e);
    error(json, "loadeddata", e);
    error(json, "error", t);
  };
  /**
   * @param {!Event} action
   * @param {string} next
   * @param {?} self
   * @return {undefined}
   */
  var validate = function(action, next, self) {
    var settings = self._settings;
    var n = next ? settings.class_loaded : settings.class_error;
    var id = next ? settings.callback_load : settings.callback_error;
    var a = action.target;
    set(a, settings.class_loading);
    test(a, n);
    g(id, a);
    self._updateLoadingCount(-1);
  };
  /**
   * @param {!HTMLElement} c
   * @param {?} val
   * @return {undefined}
   */
  var u = function(c, val) {
    /**
     * @param {!Event} start
     * @return {undefined}
     */
    var id = function v(start) {
      validate(start, true, val);
      print(c, v, x);
    };
    /**
     * @param {!Event} start
     * @return {undefined}
     */
    var x = function v(start) {
      validate(start, false, val);
      print(c, id, v);
    };
    update(c, id, x);
  };
  /** @type {!Array} */
  var blocks = ["IMG", "IFRAME", "VIDEO"];
  /**
   * @param {!HTMLElement} o
   * @param {?} m
   * @param {?} b
   * @return {undefined}
   */
  var handler = function(o, m, b) {
    add(o, b);
    m.unobserve(o);
  };
  /**
   * @param {!HTMLElement} obj
   * @return {undefined}
   */
  var remove = function(obj) {
    var e = $$(obj);
    if (e) {
      clearTimeout(e);
      notify(obj, null);
    }
  };
  /**
   * @param {!HTMLElement} e
   * @param {?} msg
   * @param {?} value
   * @return {undefined}
   */
  var _notify = function(e, msg, value) {
    var p = value._settings.load_delay;
    var o = $$(e);
    if (!o) {
      /** @type {number} */
      o = setTimeout(function() {
        handler(e, msg, value);
        remove(e);
      }, p);
      notify(e, o);
    }
  };
  /**
   * @param {!Event} width
   * @return {?}
   */
  var googleImageSize = function(width) {
    return width.isIntersecting || width.intersectionRatio > 0;
  };
  /**
   * @param {!Object} options
   * @return {?}
   */
  var next = function(options) {
    return {
      root : options.container === document ? null : options.container,
      rootMargin : options.thresholds || options.threshold + "px"
    };
  };
  /**
   * @param {?} name
   * @param {string} config
   * @return {undefined}
   */
  var Controller = function(name, config) {
    this._settings = extend(name);
    this._setObserver();
    /** @type {number} */
    this._loadingCount = 0;
    this.update(config);
  };
  return Controller.prototype = {
    _manageIntersection : function(input) {
      var info = this._observer;
      var shape = this._settings.load_delay;
      var text = input.target;
      if (shape) {
        if (googleImageSize(input)) {
          _notify(text, info, this);
        } else {
          remove(text);
        }
      } else {
        if (googleImageSize(input)) {
          handler(text, info, this);
        }
      }
    },
    _onIntersection : function(wrappersTemplates) {
      wrappersTemplates.forEach(this._manageIntersection.bind(this));
    },
    _setObserver : function() {
      if (reverseIsSingle) {
        /** @type {!IntersectionObserver} */
        this._observer = new IntersectionObserver(this._onIntersection.bind(this), next(this._settings));
      }
    },
    _updateLoadingCount : function(increment) {
      this._loadingCount += increment;
      if (0 === this._elements.length && 0 === this._loadingCount) {
        g(this._settings.callback_finish);
      }
    },
    update : function(options) {
      var cmp = this;
      var settings = this._settings;
      var o = options || settings.container.querySelectorAll(settings.elements_selector);
      this._elements = intersect(Array.prototype.slice.call(o));
      if (!x && this._observer) {
        this._elements.forEach(function(newObserver) {
          cmp._observer.observe(newObserver);
        });
      } else {
        this.loadAll();
      }
    },
    destroy : function() {
      var cmp = this;
      if (this._observer) {
        this._elements.forEach(function(obj) {
          cmp._observer.unobserve(obj);
        });
        /** @type {null} */
        this._observer = null;
      }
      /** @type {null} */
      this._elements = null;
      /** @type {null} */
      this._settings = null;
    },
    load : function(fn, s) {
      add(fn, this, s);
    },
    loadAll : function() {
      var t = this;
      this._elements.forEach(function(e) {
        t.load(e);
      });
    }
  }, person && function(name, obj) {
    if (obj) {
      if (obj.length) {
        var target;
        /** @type {number} */
        var i = 0;
        for (; target = obj[i]; i = i + 1) {
          triggerEvent(name, target);
        }
      } else {
        triggerEvent(name, obj);
      }
    }
  }(Controller, window.lazyLoadOptions), Controller;
});
var CryptoJS = CryptoJS || function(e, m) {
  var p = {};
  var j = p.lib = {};
  /**
   * @return {undefined}
   */
  var l = function() {
  };
  var Base = j.Base = {
    extend : function(name) {
      l.prototype = this;
      var c = new l;
      if (name) {
        c.mixIn(name);
      }
      if (!c.hasOwnProperty("init")) {
        /**
         * @return {undefined}
         */
        c.init = function() {
          c.$super.init.apply(this, arguments);
        };
      }
      c.init.prototype = c;
      c.$super = this;
      return c;
    },
    create : function() {
      var a = this.extend();
      a.init.apply(a, arguments);
      return a;
    },
    init : function() {
    },
    mixIn : function(a) {
      var prop;
      for (prop in a) {
        if (a.hasOwnProperty(prop)) {
          this[prop] = a[prop];
        }
      }
      if (a.hasOwnProperty("toString")) {
        this.toString = a.toString;
      }
    },
    clone : function() {
      return this.init.prototype.extend(this);
    }
  };
  var n = j.WordArray = Base.extend({
    init : function(a, c) {
      a = this.words = a || [];
      this.sigBytes = c != m ? c : 4 * a.length;
    },
    toString : function(encoder) {
      return (encoder || Hex).stringify(this);
    },
    concat : function(a) {
      var j = this.words;
      var d = a.words;
      var b = this.sigBytes;
      a = a.sigBytes;
      this.clamp();
      if (b % 4) {
        /** @type {number} */
        var c = 0;
        for (; c < a; c++) {
          j[b + c >>> 2] |= (d[c >>> 2] >>> 24 - 8 * (c % 4) & 255) << 24 - 8 * ((b + c) % 4);
        }
      } else {
        if (65535 < d.length) {
          /** @type {number} */
          c = 0;
          for (; c < a; c = c + 4) {
            j[b + c >>> 2] = d[c >>> 2];
          }
        } else {
          j.push.apply(j, d);
        }
      }
      this.sigBytes += a;
      return this;
    },
    clamp : function() {
      var a = this.words;
      var c = this.sigBytes;
      a[c >>> 2] &= 4294967295 << 32 - 8 * (c % 4);
      /** @type {number} */
      a.length = e.ceil(c / 4);
    },
    clone : function() {
      var c = Base.clone.call(this);
      c.words = this.words.slice(0);
      return c;
    },
    random : function(a) {
      /** @type {!Array} */
      var b = [];
      /** @type {number} */
      var d = 0;
      for (; d < a; d = d + 4) {
        b.push(4294967296 * e.random() | 0);
      }
      return new n.init(b, a);
    }
  });
  var b = p.enc = {};
  var Hex = b.Hex = {
    stringify : function(a) {
      var c = a.words;
      a = a.sigBytes;
      /** @type {!Array} */
      var outChance = [];
      /** @type {number} */
      var d = 0;
      for (; d < a; d++) {
        /** @type {number} */
        var f = c[d >>> 2] >>> 24 - 8 * (d % 4) & 255;
        outChance.push((f >>> 4).toString(16));
        outChance.push((f & 15).toString(16));
      }
      return outChance.join("");
    },
    parse : function(t) {
      var c = t.length;
      /** @type {!Array} */
      var b = [];
      /** @type {number} */
      var d = 0;
      for (; d < c; d = d + 2) {
        b[d >>> 3] |= parseInt(t.substr(d, 2), 16) << 24 - 4 * (d % 8);
      }
      return new n.init(b, c / 2);
    }
  };
  var g = b.Latin1 = {
    stringify : function(a) {
      var c = a.words;
      a = a.sigBytes;
      /** @type {!Array} */
      var outChance = [];
      /** @type {number} */
      var d = 0;
      for (; d < a; d++) {
        outChance.push(String.fromCharCode(c[d >>> 2] >>> 24 - 8 * (d % 4) & 255));
      }
      return outChance.join("");
    },
    parse : function(t) {
      var d = t.length;
      /** @type {!Array} */
      var c = [];
      /** @type {number} */
      var b = 0;
      for (; b < d; b++) {
        c[b >>> 2] |= (t.charCodeAt(b) & 255) << 24 - 8 * (b % 4);
      }
      return new n.init(c, d);
    }
  };
  var f = b.Utf8 = {
    stringify : function(val) {
      try {
        return decodeURIComponent(escape(g.stringify(val)));
      } catch (e) {
        throw Error("Malformed UTF-8 data");
      }
    },
    parse : function(string) {
      return g.parse(unescape(encodeURIComponent(string)));
    }
  };
  var k = j.BufferedBlockAlgorithm = Base.extend({
    reset : function() {
      this._data = new n.init;
      /** @type {number} */
      this._nDataBytes = 0;
    },
    _append : function(a) {
      if ("string" == typeof a) {
        a = f.parse(a);
      }
      this._data.concat(a);
      this._nDataBytes += a.sigBytes;
    },
    _process : function(a) {
      var c = this._data;
      var dataWords = c.words;
      var d = c.sigBytes;
      var f = this.blockSize;
      /** @type {number} */
      var h = d / (4 * f);
      /** @type {number} */
      h = a ? e.ceil(h) : e.max((h | 0) - this._minBufferSize, 0);
      /** @type {number} */
      a = h * f;
      /** @type {number} */
      d = e.min(4 * a, d);
      if (a) {
        /** @type {number} */
        var g = 0;
        for (; g < a; g = g + f) {
          this._doProcessBlock(dataWords, g);
        }
        g = dataWords.splice(0, a);
        c.sigBytes -= d;
      }
      return new n.init(g, d);
    },
    clone : function() {
      var polygon = Base.clone.call(this);
      polygon._data = this._data.clone();
      return polygon;
    },
    _minBufferSize : 0
  });
  j.Hasher = k.extend({
    cfg : Base.extend(),
    init : function(a) {
      this.cfg = this.cfg.extend(a);
      this.reset();
    },
    reset : function() {
      k.reset.call(this);
      this._doReset();
    },
    update : function(a) {
      this._append(a);
      this._process();
      return this;
    },
    finalize : function(a) {
      if (a) {
        this._append(a);
      }
      return this._doFinalize();
    },
    blockSize : 16,
    _createHelper : function(a) {
      return function(context, b) {
        return (new a.init(b)).finalize(context);
      };
    },
    _createHmacHelper : function(a) {
      return function(b, f) {
        return (new s.HMAC.init(a, f)).finalize(b);
      };
    }
  });
  var s = p.algo = {};
  return p;
}(Math);
(function() {
  var C = CryptoJS;
  var p = C.lib.WordArray;
  C.enc.Base64 = {
    stringify : function(r) {
      var d = r.words;
      var er = r.sigBytes;
      var map = this._map;
      r.clamp();
      /** @type {!Array} */
      r = [];
      /** @type {number} */
      var c = 0;
      for (; c < er; c = c + 3) {
        /** @type {number} */
        var o = (d[c >>> 2] >>> 24 - 8 * (c % 4) & 255) << 16 | (d[c + 1 >>> 2] >>> 24 - 8 * ((c + 1) % 4) & 255) << 8 | d[c + 2 >>> 2] >>> 24 - 8 * ((c + 2) % 4) & 255;
        /** @type {number} */
        var startRes = 0;
        for (; 4 > startRes && c + .75 * startRes < er; startRes++) {
          r.push(map.charAt(o >>> 6 * (3 - startRes) & 63));
        }
      }
      if (d = map.charAt(64)) {
        for (; r.length % 4;) {
          r.push(d);
        }
      }
      return r.join("");
    },
    parse : function(t) {
      var n = t.length;
      var data = this._map;
      var m = data.charAt(64);
      if (m) {
        m = t.indexOf(m);
        if (-1 != m) {
          n = m;
        }
      }
      /** @type {!Array} */
      m = [];
      /** @type {number} */
      var l = 0;
      /** @type {number} */
      var j = 0;
      for (; j < n; j++) {
        if (j % 4) {
          /** @type {number} */
          var c = data.indexOf(t.charAt(j - 1)) << 2 * (j % 4);
          /** @type {number} */
          var translucentFlag = data.indexOf(t.charAt(j)) >>> 6 - 2 * (j % 4);
          m[l >>> 2] |= (c | translucentFlag) << 24 - 8 * (l % 4);
          l++;
        }
      }
      return p.create(m, l);
    },
    _map : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
  };
})();
(function(Math) {
  /**
   * @param {number} a
   * @param {number} c
   * @param {number} d
   * @param {number} b
   * @param {?} x
   * @param {number} s
   * @param {?} suffix
   * @return {?}
   */
  function HH(a, c, d, b, x, s, suffix) {
    a = a + (c & d | ~c & b) + x + suffix;
    return (a << s | a >>> 32 - s) + c;
  }
  /**
   * @param {number} i
   * @param {number} c
   * @param {number} d
   * @param {number} a
   * @param {?} x
   * @param {number} b
   * @param {?} s
   * @return {?}
   */
  function II(i, c, d, a, x, b, s) {
    i = i + (c & a | d & ~a) + x + s;
    return (i << b | i >>> 32 - b) + c;
  }
  /**
   * @param {number} n
   * @param {number} d
   * @param {number} a
   * @param {number} b
   * @param {?} x
   * @param {number} s
   * @param {?} t
   * @return {?}
   */
  function FF(n, d, a, b, x, s, t) {
    n = n + (d ^ a ^ b) + x + t;
    return (n << s | n >>> 32 - s) + d;
  }
  /**
   * @param {number} a
   * @param {number} b
   * @param {?} c
   * @param {?} d
   * @param {?} x
   * @param {number} s
   * @param {?} suffix
   * @return {?}
   */
  function GG(a, b, c, d, x, s, suffix) {
    a = a + (c ^ (b | ~d)) + x + suffix;
    return (a << s | a >>> 32 - s) + b;
  }
  var e = CryptoJS;
  var m = e.lib;
  var p = m.WordArray;
  var j = m.Hasher;
  m = e.algo;
  /** @type {!Array} */
  var T = [];
  /** @type {number} */
  var i = 0;
  for (; 64 > i; i++) {
    /** @type {number} */
    T[i] = 4294967296 * Math.abs(Math.sin(i + 1)) | 0;
  }
  m = m.MD5 = j.extend({
    _doReset : function() {
      this._hash = new p.init([1732584193, 4023233417, 2562383102, 271733878]);
    },
    _doProcessBlock : function(M, offset) {
      /** @type {number} */
      var H = 0;
      for (; 16 > H; H++) {
        var M_offset_0 = offset + H;
        var M_offset_8 = M[M_offset_0];
        /** @type {number} */
        M[M_offset_0] = (M_offset_8 << 8 | M_offset_8 >>> 24) & 16711935 | (M_offset_8 << 24 | M_offset_8 >>> 8) & 4278255360;
      }
      H = this._hash.words;
      M_offset_0 = M[offset + 0];
      M_offset_8 = M[offset + 1];
      var M_offset_11 = M[offset + 2];
      var M_offset_6 = M[offset + 3];
      var M_offset_12 = M[offset + 4];
      var M_offset_1 = M[offset + 5];
      var M_offset_14 = M[offset + 6];
      var M_offset_15 = M[offset + 7];
      var M_offset_4 = M[offset + 8];
      var M_offset_5 = M[offset + 9];
      var M_offset_10 = M[offset + 10];
      var M_offset_2 = M[offset + 11];
      var M_offset_9 = M[offset + 12];
      var M_offset_13 = M[offset + 13];
      var M_offset_3 = M[offset + 14];
      var M_offset_7 = M[offset + 15];
      var a = H[0];
      var b = H[1];
      var c = H[2];
      var d = H[3];
      a = HH(a, b, c, d, M_offset_0, 7, T[0]);
      d = HH(d, a, b, c, M_offset_8, 12, T[1]);
      c = HH(c, d, a, b, M_offset_11, 17, T[2]);
      b = HH(b, c, d, a, M_offset_6, 22, T[3]);
      a = HH(a, b, c, d, M_offset_12, 7, T[4]);
      d = HH(d, a, b, c, M_offset_1, 12, T[5]);
      c = HH(c, d, a, b, M_offset_14, 17, T[6]);
      b = HH(b, c, d, a, M_offset_15, 22, T[7]);
      a = HH(a, b, c, d, M_offset_4, 7, T[8]);
      d = HH(d, a, b, c, M_offset_5, 12, T[9]);
      c = HH(c, d, a, b, M_offset_10, 17, T[10]);
      b = HH(b, c, d, a, M_offset_2, 22, T[11]);
      a = HH(a, b, c, d, M_offset_9, 7, T[12]);
      d = HH(d, a, b, c, M_offset_13, 12, T[13]);
      c = HH(c, d, a, b, M_offset_3, 17, T[14]);
      b = HH(b, c, d, a, M_offset_7, 22, T[15]);
      a = II(a, b, c, d, M_offset_8, 5, T[16]);
      d = II(d, a, b, c, M_offset_14, 9, T[17]);
      c = II(c, d, a, b, M_offset_2, 14, T[18]);
      b = II(b, c, d, a, M_offset_0, 20, T[19]);
      a = II(a, b, c, d, M_offset_1, 5, T[20]);
      d = II(d, a, b, c, M_offset_10, 9, T[21]);
      c = II(c, d, a, b, M_offset_7, 14, T[22]);
      b = II(b, c, d, a, M_offset_12, 20, T[23]);
      a = II(a, b, c, d, M_offset_5, 5, T[24]);
      d = II(d, a, b, c, M_offset_3, 9, T[25]);
      c = II(c, d, a, b, M_offset_6, 14, T[26]);
      b = II(b, c, d, a, M_offset_4, 20, T[27]);
      a = II(a, b, c, d, M_offset_13, 5, T[28]);
      d = II(d, a, b, c, M_offset_11, 9, T[29]);
      c = II(c, d, a, b, M_offset_15, 14, T[30]);
      b = II(b, c, d, a, M_offset_9, 20, T[31]);
      a = FF(a, b, c, d, M_offset_1, 4, T[32]);
      d = FF(d, a, b, c, M_offset_4, 11, T[33]);
      c = FF(c, d, a, b, M_offset_2, 16, T[34]);
      b = FF(b, c, d, a, M_offset_3, 23, T[35]);
      a = FF(a, b, c, d, M_offset_8, 4, T[36]);
      d = FF(d, a, b, c, M_offset_12, 11, T[37]);
      c = FF(c, d, a, b, M_offset_15, 16, T[38]);
      b = FF(b, c, d, a, M_offset_10, 23, T[39]);
      a = FF(a, b, c, d, M_offset_13, 4, T[40]);
      d = FF(d, a, b, c, M_offset_0, 11, T[41]);
      c = FF(c, d, a, b, M_offset_6, 16, T[42]);
      b = FF(b, c, d, a, M_offset_14, 23, T[43]);
      a = FF(a, b, c, d, M_offset_5, 4, T[44]);
      d = FF(d, a, b, c, M_offset_9, 11, T[45]);
      c = FF(c, d, a, b, M_offset_7, 16, T[46]);
      b = FF(b, c, d, a, M_offset_11, 23, T[47]);
      a = GG(a, b, c, d, M_offset_0, 6, T[48]);
      d = GG(d, a, b, c, M_offset_15, 10, T[49]);
      c = GG(c, d, a, b, M_offset_3, 15, T[50]);
      b = GG(b, c, d, a, M_offset_1, 21, T[51]);
      a = GG(a, b, c, d, M_offset_9, 6, T[52]);
      d = GG(d, a, b, c, M_offset_6, 10, T[53]);
      c = GG(c, d, a, b, M_offset_10, 15, T[54]);
      b = GG(b, c, d, a, M_offset_8, 21, T[55]);
      a = GG(a, b, c, d, M_offset_4, 6, T[56]);
      d = GG(d, a, b, c, M_offset_7, 10, T[57]);
      c = GG(c, d, a, b, M_offset_14, 15, T[58]);
      b = GG(b, c, d, a, M_offset_13, 21, T[59]);
      a = GG(a, b, c, d, M_offset_12, 6, T[60]);
      d = GG(d, a, b, c, M_offset_2, 10, T[61]);
      c = GG(c, d, a, b, M_offset_11, 15, T[62]);
      b = GG(b, c, d, a, M_offset_5, 21, T[63]);
      /** @type {number} */
      H[0] = H[0] + a | 0;
      /** @type {number} */
      H[1] = H[1] + b | 0;
      /** @type {number} */
      H[2] = H[2] + c | 0;
      /** @type {number} */
      H[3] = H[3] + d | 0;
    },
    _doFinalize : function() {
      var data = this._data;
      var words = data.words;
      /** @type {number} */
      var k = 8 * this._nDataBytes;
      /** @type {number} */
      var i = 8 * data.sigBytes;
      words[i >>> 5] |= 128 << 24 - i % 32;
      /** @type {number} */
      var s = Math.floor(k / 4294967296);
      /** @type {number} */
      words[(i + 64 >>> 9 << 4) + 15] = (s << 8 | s >>> 24) & 16711935 | (s << 24 | s >>> 8) & 4278255360;
      /** @type {number} */
      words[(i + 64 >>> 9 << 4) + 14] = (k << 8 | k >>> 24) & 16711935 | (k << 24 | k >>> 8) & 4278255360;
      /** @type {number} */
      data.sigBytes = 4 * (words.length + 1);
      this._process();
      data = this._hash;
      words = data.words;
      /** @type {number} */
      k = 0;
      for (; 4 > k; k++) {
        i = words[k];
        /** @type {number} */
        words[k] = (i << 8 | i >>> 24) & 16711935 | (i << 24 | i >>> 8) & 4278255360;
      }
      return data;
    },
    clone : function() {
      var e = j.clone.call(this);
      e._hash = this._hash.clone();
      return e;
    }
  });
  e.MD5 = j._createHelper(m);
  e.HmacMD5 = j._createHmacHelper(m);
})(Math);
(function() {
  var C = CryptoJS;
  var C_lib = C.lib;
  var Base = C_lib.Base;
  var WordArray = C_lib.WordArray;
  C_lib = C.algo;
  var PBKDF1 = C_lib.EvpKDF = Base.extend({
    cfg : Base.extend({
      keySize : 4,
      hasher : C_lib.MD5,
      iterations : 1
    }),
    init : function(a) {
      this.cfg = this.cfg.extend(a);
    },
    compute : function(password, data) {
      var cfg = this.cfg;
      var sha256 = cfg.hasher.create();
      var a = WordArray.create();
      var derivedKeyWords = a.words;
      var keySize = cfg.keySize;
      cfg = cfg.iterations;
      for (; derivedKeyWords.length < keySize;) {
        if (b) {
          sha256.update(b);
        }
        var b = sha256.update(password).finalize(data);
        sha256.reset();
        /** @type {number} */
        var c = 1;
        for (; c < cfg; c++) {
          b = sha256.finalize(b);
          sha256.reset();
        }
        a.concat(b);
      }
      /** @type {number} */
      a.sigBytes = 4 * keySize;
      return a;
    }
  });
  /**
   * @param {string} password
   * @param {!Object} salt
   * @param {?} cfg
   * @return {?}
   */
  C.EvpKDF = function(password, salt, cfg) {
    return PBKDF1.create(cfg).compute(password, salt);
  };
})();
if (!CryptoJS.lib.Cipher) {
  (function(undefined) {
    var C = CryptoJS;
    var C_lib = C.lib;
    var Base = C_lib.Base;
    var WordArray = C_lib.WordArray;
    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
    var Base64 = C.enc.Base64;
    var EvpKDF = C.algo.EvpKDF;
    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
      cfg : Base.extend(),
      createEncryptor : function(key, cfg) {
        return this.create(this._ENC_XFORM_MODE, key, cfg);
      },
      createDecryptor : function(key, cfg) {
        return this.create(this._DEC_XFORM_MODE, key, cfg);
      },
      init : function(_, k, a) {
        this.cfg = this.cfg.extend(a);
        /** @type {number} */
        this._xformMode = _;
        /** @type {number} */
        this._key = k;
        this.reset();
      },
      reset : function() {
        BufferedBlockAlgorithm.reset.call(this);
        this._doReset();
      },
      process : function(elements) {
        this._append(elements);
        return this._process();
      },
      finalize : function(a) {
        if (a) {
          this._append(a);
        }
        return this._doFinalize();
      },
      keySize : 4,
      ivSize : 4,
      _ENC_XFORM_MODE : 1,
      _DEC_XFORM_MODE : 2,
      _createHelper : function(message) {
        return {
          encrypt : function(msg, data, key) {
            return ("string" == typeof data ? index : SerializableCipher).encrypt(message, msg, data, key);
          },
          decrypt : function(cipher, key, cfg) {
            return ("string" == typeof key ? index : SerializableCipher).decrypt(message, cipher, key, cfg);
          }
        };
      }
    });
    C_lib.StreamCipher = Cipher.extend({
      _doFinalize : function() {
        return this._process(true);
      },
      blockSize : 1
    });
    var type = C.mode = {};
    /**
     * @param {?} words
     * @param {number} offset
     * @param {number} blockSize
     * @return {undefined}
     */
    var generateKeystreamAndEncrypt = function(words, offset, blockSize) {
      var keystream = this._iv;
      if (keystream) {
        /** @type {!Array} */
        this._iv = undefined;
      } else {
        keystream = this._prevBlock;
      }
      /** @type {number} */
      var i = 0;
      for (; i < blockSize; i++) {
        words[offset + i] ^= keystream[i];
      }
    };
    var CTRGladman = (C_lib.BlockCipherMode = Base.extend({
      createEncryptor : function(cipher, iv) {
        return this.Encryptor.create(cipher, iv);
      },
      createDecryptor : function(cipher, iv) {
        return this.Decryptor.create(cipher, iv);
      },
      init : function(method, undefined) {
        /** @type {!Object} */
        this._cipher = method;
        /** @type {!Array} */
        this._iv = undefined;
      }
    })).extend();
    CTRGladman.Encryptor = CTRGladman.extend({
      processBlock : function(words, offset) {
        var cipher = this._cipher;
        var blockSize = cipher.blockSize;
        generateKeystreamAndEncrypt.call(this, words, offset, blockSize);
        cipher.encryptBlock(words, offset);
        this._prevBlock = words.slice(offset, offset + blockSize);
      }
    });
    CTRGladman.Decryptor = CTRGladman.extend({
      processBlock : function(words, offset) {
        var cipher = this._cipher;
        var blockSize = cipher.blockSize;
        var thisBlock = words.slice(offset, offset + blockSize);
        cipher.decryptBlock(words, offset);
        generateKeystreamAndEncrypt.call(this, words, offset, blockSize);
        this._prevBlock = thisBlock;
      }
    });
    type = type.CBC = CTRGladman;
    CTRGladman = (C.pad = {}).Pkcs7 = {
      pad : function(f, base) {
        /** @type {number} */
        var temp = 4 * base;
        /** @type {number} */
        temp = temp - f.sigBytes % temp;
        /** @type {number} */
        var sectionFlyUser = temp << 24 | temp << 16 | temp << 8 | temp;
        /** @type {!Array} */
        var data = [];
        /** @type {number} */
        var big = 0;
        for (; big < temp; big = big + 4) {
          data.push(sectionFlyUser);
        }
        temp = WordArray.create(data, temp);
        f.concat(temp);
      },
      unpad : function(data) {
        data.sigBytes -= data.words[data.sigBytes - 1 >>> 2] & 255;
      }
    };
    C_lib.BlockCipher = Cipher.extend({
      cfg : Cipher.cfg.extend({
        mode : type,
        padding : CTRGladman
      }),
      reset : function() {
        Cipher.reset.call(this);
        var mode = this.cfg;
        var iv = mode.iv;
        mode = mode.mode;
        if (this._xformMode == this._ENC_XFORM_MODE) {
          var modeCreator = mode.createEncryptor;
        } else {
          modeCreator = mode.createDecryptor;
          /** @type {number} */
          this._minBufferSize = 1;
        }
        this._mode = modeCreator.call(mode, this, iv && iv.words);
      },
      _doProcessBlock : function(words, offset) {
        this._mode.processBlock(words, offset);
      },
      _doFinalize : function() {
        var padding = this.cfg.padding;
        if (this._xformMode == this._ENC_XFORM_MODE) {
          padding.pad(this._data, this.blockSize);
          var finalProcessedBlocks = this._process(true);
        } else {
          finalProcessedBlocks = this._process(true);
          padding.unpad(finalProcessedBlocks);
        }
        return finalProcessedBlocks;
      },
      blockSize : 4
    });
    var CipherParams = C_lib.CipherParams = Base.extend({
      init : function(t) {
        this.mixIn(t);
      },
      toString : function(formatter) {
        return (formatter || this.formatter).stringify(this);
      }
    });
    type = (C.format = {}).OpenSSL = {
      stringify : function(a) {
        var b = a.ciphertext;
        a = a.salt;
        return (a ? WordArray.create([1398893684, 1701076831]).concat(a).concat(b) : b).toString(Base64);
      },
      parse : function(e) {
        e = Base64.parse(e);
        var c = e.words;
        if (1398893684 == c[0] && 1701076831 == c[1]) {
          var generatedSalt = WordArray.create(c.slice(2, 4));
          c.splice(0, 4);
          e.sigBytes -= 16;
        }
        return CipherParams.create({
          ciphertext : e,
          salt : generatedSalt
        });
      }
    };
    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
      cfg : Base.extend({
        format : type
      }),
      encrypt : function(cipher, c, key, cfg) {
        cfg = this.cfg.extend(cfg);
        var options = cipher.createEncryptor(key, cfg);
        c = options.finalize(c);
        options = options.cfg;
        return CipherParams.create({
          ciphertext : c,
          key : key,
          iv : options.iv,
          algorithm : cipher,
          mode : options.mode,
          padding : options.padding,
          blockSize : cipher.blockSize,
          formatter : cfg.format
        });
      },
      decrypt : function(cipher, ciphertext, key, cfg) {
        cfg = this.cfg.extend(cfg);
        ciphertext = this._parse(ciphertext, cfg.format);
        return cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
      },
      _parse : function(a, f) {
        return "string" == typeof a ? f.parse(a, this) : a;
      }
    });
    C = (C.kdf = {}).OpenSSL = {
      execute : function(key, e, s, salt) {
        if (!salt) {
          salt = WordArray.random(8);
        }
        key = EvpKDF.create({
          keySize : e + s
        }).compute(key, salt);
        s = WordArray.create(key.words.slice(e), 4 * s);
        /** @type {number} */
        key.sigBytes = 4 * e;
        return CipherParams.create({
          key : key,
          iv : s,
          salt : salt
        });
      }
    };
    var index = C_lib.PasswordBasedCipher = SerializableCipher.extend({
      cfg : SerializableCipher.cfg.extend({
        kdf : C
      }),
      encrypt : function(cipher, message, data, cfg) {
        cfg = this.cfg.extend(cfg);
        data = cfg.kdf.execute(data, cipher.keySize, cipher.ivSize);
        cfg.iv = data.iv;
        cipher = SerializableCipher.encrypt.call(this, cipher, message, data.key, cfg);
        cipher.mixIn(data);
        return cipher;
      },
      decrypt : function(cipher, ciphertext, options, cfg) {
        cfg = this.cfg.extend(cfg);
        ciphertext = this._parse(ciphertext, cfg.format);
        options = cfg.kdf.execute(options, cipher.keySize, cipher.ivSize, ciphertext.salt);
        cfg.iv = options.iv;
        return SerializableCipher.decrypt.call(this, cipher, ciphertext, options.key, cfg);
      }
    });
  })();
}
(function() {
  var C = CryptoJS;
  var BlockCipher = C.lib.BlockCipher;
  var AES = C.algo;
  /** @type {!Array} */
  var SBOX = [];
  /** @type {!Array} */
  var INV_SBOX = [];
  /** @type {!Array} */
  var SUB_MIX_0 = [];
  /** @type {!Array} */
  var SUB_MIX_1 = [];
  /** @type {!Array} */
  var SUB_MIX_2 = [];
  /** @type {!Array} */
  var SUB_MIX_3 = [];
  /** @type {!Array} */
  var INV_SUB_MIX_0 = [];
  /** @type {!Array} */
  var INV_SUB_MIX_1 = [];
  /** @type {!Array} */
  var INV_SUB_MIX_2 = [];
  /** @type {!Array} */
  var INV_SUB_MIX_3 = [];
  /** @type {!Array} */
  var d = [];
  /** @type {number} */
  var search_lemma = 0;
  for (; 256 > search_lemma; search_lemma++) {
    /** @type {number} */
    d[search_lemma] = 128 > search_lemma ? search_lemma << 1 : search_lemma << 1 ^ 283;
  }
  /** @type {number} */
  var x = 0;
  /** @type {number} */
  var xi = 0;
  /** @type {number} */
  search_lemma = 0;
  for (; 256 > search_lemma; search_lemma++) {
    /** @type {number} */
    var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
    /** @type {number} */
    sx = sx >>> 8 ^ sx & 255 ^ 99;
    /** @type {number} */
    SBOX[x] = sx;
    /** @type {number} */
    INV_SBOX[sx] = x;
    var x2 = d[x];
    var x4 = d[x2];
    var x8 = d[x4];
    /** @type {number} */
    var t = 257 * d[sx] ^ 16843008 * sx;
    /** @type {number} */
    SUB_MIX_0[x] = t << 24 | t >>> 8;
    /** @type {number} */
    SUB_MIX_1[x] = t << 16 | t >>> 16;
    /** @type {number} */
    SUB_MIX_2[x] = t << 8 | t >>> 24;
    /** @type {number} */
    SUB_MIX_3[x] = t;
    /** @type {number} */
    t = 16843009 * x8 ^ 65537 * x4 ^ 257 * x2 ^ 16843008 * x;
    /** @type {number} */
    INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
    /** @type {number} */
    INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
    /** @type {number} */
    INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
    /** @type {number} */
    INV_SUB_MIX_3[sx] = t;
    if (x) {
      /** @type {number} */
      x = x2 ^ d[d[d[x8 ^ x2]]];
      /** @type {number} */
      xi = xi ^ d[d[xi]];
    } else {
      /** @type {number} */
      x = xi = 1;
    }
  }
  /** @type {!Array} */
  var k = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
  AES = AES.AES = BlockCipher.extend({
    _doReset : function() {
      var n = this._key;
      var a = n.words;
      /** @type {number} */
      var i = n.sigBytes / 4;
      /** @type {number} */
      n = 4 * ((this._nRounds = i + 6) + 1);
      /** @type {!Array} */
      var array = this._keySchedule = [];
      /** @type {number} */
      var j = 0;
      for (; j < n; j++) {
        if (j < i) {
          array[j] = a[j];
        } else {
          var t = array[j - 1];
          if (j % i) {
            if (6 < i && 4 == j % i) {
              /** @type {number} */
              t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
            }
          } else {
            /** @type {number} */
            t = t << 8 | t >>> 24;
            /** @type {number} */
            t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
            /** @type {number} */
            t = t ^ k[j / i | 0] << 24;
          }
          /** @type {number} */
          array[j] = array[j - i] ^ t;
        }
      }
      /** @type {!Array} */
      a = this._invKeySchedule = [];
      /** @type {number} */
      i = 0;
      for (; i < n; i++) {
        /** @type {number} */
        j = n - i;
        t = i % 4 ? array[j] : array[j - 4];
        a[i] = 4 > i || 4 >= j ? t : INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t & 255]];
      }
    },
    encryptBlock : function(M, offset) {
      this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
    },
    decryptBlock : function(M, offset) {
      var t = M[offset + 1];
      M[offset + 1] = M[offset + 3];
      M[offset + 3] = t;
      this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
      t = M[offset + 1];
      M[offset + 1] = M[offset + 3];
      M[offset + 3] = t;
    },
    _doCryptBlock : function(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
      var nRounds = this._nRounds;
      /** @type {number} */
      var s2 = M[offset] ^ keySchedule[0];
      /** @type {number} */
      var s3 = M[offset + 1] ^ keySchedule[1];
      /** @type {number} */
      var s0 = M[offset + 2] ^ keySchedule[2];
      /** @type {number} */
      var s1 = M[offset + 3] ^ keySchedule[3];
      /** @type {number} */
      var ksRow = 4;
      /** @type {number} */
      var round = 1;
      for (; round < nRounds; round++) {
        /** @type {number} */
        var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 255] ^ SUB_MIX_2[s0 >>> 8 & 255] ^ SUB_MIX_3[s1 & 255] ^ keySchedule[ksRow++];
        /** @type {number} */
        var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 255] ^ SUB_MIX_2[s1 >>> 8 & 255] ^ SUB_MIX_3[s2 & 255] ^ keySchedule[ksRow++];
        /** @type {number} */
        var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 255] ^ SUB_MIX_2[s2 >>> 8 & 255] ^ SUB_MIX_3[s3 & 255] ^ keySchedule[ksRow++];
        /** @type {number} */
        s1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 255] ^ SUB_MIX_2[s3 >>> 8 & 255] ^ SUB_MIX_3[s0 & 255] ^ keySchedule[ksRow++];
        /** @type {number} */
        s2 = t2;
        /** @type {number} */
        s3 = t3;
        /** @type {number} */
        s0 = t0;
      }
      /** @type {number} */
      t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];
      /** @type {number} */
      t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s2 & 255]) ^ keySchedule[ksRow++];
      /** @type {number} */
      t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s2 >>> 8 & 255] << 8 | SBOX[s3 & 255]) ^ keySchedule[ksRow++];
      /** @type {number} */
      s1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];
      /** @type {number} */
      M[offset] = t2;
      /** @type {number} */
      M[offset + 1] = t3;
      /** @type {number} */
      M[offset + 2] = t0;
      /** @type {number} */
      M[offset + 3] = s1;
    },
    keySize : 8
  });
  C.AES = BlockCipher._createHelper(AES);
})();
/** @type {number} */
var user_volume = $.cookie("a_volume") != null ? parseFloat($.cookie("a_volume")) : 1;
CryptoJSAesJson = {
  stringify : function(a) {
    var b = {
      ct : a.ciphertext.toString(CryptoJS.enc.Base64)
    };
    if (a.iv) {
      b.iv = a.iv.toString();
    }
    if (a.salt) {
      b.s = a.salt.toString();
    }
    return JSON.stringify(b);
  },
  parse : function(e) {
    /** @type {*} */
    var item = JSON.parse(e);
    var p = CryptoJS.lib.CipherParams.create({
      ciphertext : CryptoJS.enc.Base64.parse(item.ct)
    });
    if (item.iv) {
      p.iv = CryptoJS.enc.Hex.parse(item.iv);
    }
    if (item.s) {
      p.salt = CryptoJS.enc.Hex.parse(item.s);
    }
    return p;
  }
};
/** @type {string} */
var player_bid = "";
/** @type {string} */
var page_bid = "";
var player = {};
var bo = {};
var user_rates = {};
var bookData = {};
/** @type {number} */
var timerDuration = 0;
/** @type {string} */
var timer = "";
/** @type {string} */
var icon_play = '<svg class="icon icon-play" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><defs></defs><g><rect class="eq__bar eq1" x="1" y="8" width="4" height="8"></rect><rect class="eq__bar eq2" x="6" y="1" width="4" height="15"></rect><rect class="eq__bar eq3" x="11" y="4" width="4" height="12"></rect></g></svg>';
/** @type {string} */
var icon_pause = '<svg class="icon icon-pause" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><defs></defs><g><rect class="eq__bar eq1" x="1" y="12" width="4" height="4"></rect><rect class="eq__bar eq2" x="6" y="12" width="4" height="4"></rect><rect class="eq__bar eq3" x="11" y="12" width="4" height="4"></rect></g></svg>';
var enc_hash = CryptoJS.AES.encrypt(JSON.stringify(LIVESTREET_SECURITY_KEY), "EKxtcg46V", {
  format : CryptoJSAesJson
}).toString();
/**
 * @param {string} canCreateDiscussions
 * @return {?}
 */
var icon_progress = function(canCreateDiscussions) {
  return '<svg class="icon icon-percent" xmlns="http://www.w3.org/2000/svg"><use xlink:href="#' + canCreateDiscussions + '"></use></svg>';
};
/**
 * @param {?} fn
 * @param {number} repeat
 * @return {undefined}
 */
function setTimer(fn, repeat) {
  var t;
  var slideshowtimer;
  var yi;
  /** @type {number} */
  var i = repeat;
  var r;
  /**
   * @return {undefined}
   */
  this.cancel = function() {
    /** @type {boolean} */
    r = false;
    window.clearTimeout(t);
    window.clearInterval(slideshowtimer);
  };
  /**
   * @return {undefined}
   */
  this.pause = function() {
    /** @type {boolean} */
    r = false;
    window.clearTimeout(t);
    window.clearInterval(slideshowtimer);
    /** @type {number} */
    i = i - (Date.now() - yi);
  };
  /**
   * @return {undefined}
   */
  this.resume = function() {
    /** @type {boolean} */
    r = true;
    /** @type {number} */
    yi = Date.now();
    window.clearTimeout(t);
    t = window.setTimeout(fn, i);
    slideshowtimer = window.setInterval(function() {
      var y = timer.timeLeft();
      /** @type {number} */
      var value = Math.floor(y / 3600);
      /** @type {number} */
      y = y - value * 3600;
      /** @type {number} */
      var i = Math.floor(y / 60);
      $(".timer__hours .timer__text").html(value + "<span>" + ls.i18n.pluralize(value, "time.hours_declension").replace(/\d+/g, "") + "</span>");
      $(".timer__minutes .timer__text").html(i + "<span>" + ls.i18n.pluralize(i, "time.minutes_declension").replace(/\d+/g, "") + "</span>");
    }, 60 * 1E3);
  };
  /**
   * @return {?}
   */
  this.timeLeft = function() {
    if (r) {
      this.pause();
      this.resume();
    }
    return i / 1E3;
  };
  this.resume();
}
/**
 * @param {string} name
 * @return {undefined}
 */
function removeTimer(name) {
  /** @type {number} */
  timerDuration = 0;
  if (typeof timer === "object") {
    timer.cancel();
  }
  /** @type {string} */
  timer = "";
  if (name && player[name]) {
    setPercent(name);
    setBookPosition(name);
  }
  if (name && bo[name]) {
    b_setPercent(name);
  }
  $(".timer__hours").attr("data-val", 0);
  $(".timer__hours .timer__text").html(0 + "<span>\u0447\u0430\u0441\u043e\u0432</span>");
  $(".timer__minutes").attr("data-val", 20);
  $(".timer__minutes .timer__text").html(20 + "<span>\u043c\u0438\u043d\u0443\u0442</span>");
  $(".mobile__popup--timer,.player__timer").removeClass("run");
  $(".mobile__popup--timer .mobile__popup--content--button").removeClass("button-stop").addClass("button-start").html("\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0442\u0430\u0439\u043c\u0435\u0440");
}
/**
 * @param {string} kvStr
 * @return {undefined}
 */
function scrollToCurrentChapter(kvStr) {
  var sandbox = $(".bookpage--chapters[data-bid=" + kvStr + "]");
  var val = $(".chapter__current", sandbox).prev();
  if (sandbox.children().size() > 3) {
    sandbox.scrollTo(val.hasClass("folder_separator") ? val : ".chapter__current", 500);
  }
}
/**
 * @param {string} key
 * @return {undefined}
 */
function loadPlayerData(key) {
  var build = bookData[key];
  var conceptItems = bookData[key].items;
  $(".menu__player--wrapper,.player__wrapper--bar,.book-id-" + key).removeClass("unloaded");
  $(".player__title--main .wrapper, .player__wrapper--bar--caption").text(build.titleonly);
  $(".player__wrapper--bar--author").text(build.author);
  $(".player__picture").css("background-image", "url(" + build.preview + ")");
  $(".menu__player--content .cover__wrapper--image").css("background-image", "url(" + build.preview + ")");
  $(".book-id-" + key + " .book--chapter-current").text("\u0427\u0430\u0441\u0442\u044c " + (bookData[key].chapterId + 1) + " \u0438\u0437 " + conceptItems.length);
  $(".menu__player--wrapper .tooltips, .js-book-data").empty();
  if (build.sTextAuthor) {
    $(".menu__player--wrapper .tooltips").append(build.sTextAuthor);
  }
  if (build.sTextPerformer) {
    $(".menu__player--wrapper .tooltips").append(build.sTextPerformer);
  }
  $(".menu__player--wrapper .js-vote-author").lsVote({
    urls : {
      vote : aRouter["ajax"] + "vote/author/"
    }
  });
  $(".menu__player--wrapper .js-vote-performer").lsVote({
    urls : {
      vote : aRouter["ajax"] + "vote/performer/"
    }
  });
  $(".js-book-data").append(build.sTextFav);
  $(".js-book-data .ls-favourite").lsFavourite({
    urls : {
      toggle : aRouter["ajax"] + "favourite/topic/"
    }
  });
  $(".js-book-data .ls-vote").lsVote({
    urls : {
      vote : aRouter["ajax"] + "vote/topic/"
    }
  });
  $(".menu__player--wrapper .link__backtobook").attr("href", bookData[key].bookurl);
  pjax.refresh();
  init_buttons(key);
  init_sliders(key);
  init_chapters(key);
  adoptButtons(key);
}
/**
 * @param {string} name
 * @param {string} callback
 * @return {undefined}
 */
function loadBookData(name, callback) {
  /**
   * @param {string} value
   * @param {string} power
   * @return {undefined}
   */
  function config(value, power) {
    setChapters(value, power);
    if (power == "book") {
      init_sliders_bookpage(value);
      getBookPosition(value);
      scrollToCurrentChapter(value);
    } else {
      if (!$(".jpl[data-bid=" + value + "]")[0]) {
        console.log("restoring last book");
        init_sliders(value);
        getBookPosition(value);
        $(".jpl[data-bid=" + value + "]").addClass("player");
        setPercent(value);
      }
      /** @type {string} */
      player_bid = value;
      loadPlayerData(value);
    }
  }
  if (bookData[name] !== undefined) {
    adoptButtons(name);
    $(".book--player.book-id-" + page_bid).removeClass("unloaded");
    config(name, callback);
    return;
  }
  /** @type {!Array} */
  var r = [];
  /** @type {number} */
  var o = 1;
  /** @type {number} */
  var i = 0;
  /** @type {number} */
  var l = 0;
  ls.ajax.load(aRouter["ajax"] + "b/" + name, {
    bid : name,
    hash : enc_hash
  }, function(loadedPlugin) {
    if (!loadedPlugin.error) {
      /** @type {!Object} */
      bookData[name] = loadedPlugin;
      /** @type {string} */
      bookData[name].current_mfileId = "";
      /** @type {*} */
      bookData[name].items = JSON.parse(bookData[name].items);
      if ($("article[data-bid=" + name + "] .preconnect link")[0]) {
        bookData[name].srv = $(".preconnect link").attr("href");
      }
      adoptButtons(name);
      $(".book--player.book-id-" + page_bid).removeClass("unloaded");
      config(name, callback);
    } else {
      console.log("loading error");
      loadPlayerError(name);
    }
  }, {
    showProgress : false
  });
}
/**
 * @param {string} widAttr
 * @return {undefined}
 */
function loadPlayerError(widAttr) {
  $(".book-id-" + widAttr).addClass("book--item--closed");
  $(".book-id-" + widAttr + " .js-block-chapters").hide;
  $(".book-id-" + widAttr + " .cover__wrapper--image-text").hide();
  /** @type {string} */
  var a = "\u0410\u0443\u0434\u0438\u043e\u043a\u043d\u0438\u0433\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430.";
  $(".book-id-" + widAttr + " .content__main__book--item--chapter").html(a);
  if (isMobile) {
    $(".button__player--play-" + widAttr).remove();
  }
}
/**
 * @param {number} s
 * @return {?}
 */
function secondsToHMS(s) {
  /** @type {number} */
  var d = Math.floor(s / 3600);
  /** @type {number} */
  s = s - d * 3600;
  /** @type {number} */
  var minutes = Math.floor(s / 60);
  /** @type {number} */
  s = s - minutes * 60;
  return (d > 0 ? d + ":" : "") + (minutes < 10 ? "0" + minutes : minutes) + ":" + (s < 10 ? "0" + s : s);
}
/**
 * @param {string} canCreateDiscussions
 * @return {undefined}
 */
var animationLoader = function(canCreateDiscussions) {
  $(".book-id-" + canCreateDiscussions + " .button__player--play").addClass("player-loading");
};
/**
 * @param {string} gen_id
 * @return {undefined}
 */
var animationUnloader = function(gen_id) {
  $(".book-id-" + gen_id + " .button__player--play").removeClass("player-loading");
};
/**
 * @param {string} filePath
 * @return {undefined}
 */
var fileLoader = function(filePath) {
  $(".book-id-" + filePath + ':not(".mobile__popup")').addClass("file-loading");
};
/**
 * @param {string} friendId
 * @return {undefined}
 */
var fileUnloader = function(friendId) {
  $(".book-id-" + friendId).removeClass("file-loading");
};
/**
 * @param {string} skill
 * @return {?}
 */
var isPaused = function(skill) {
  if (typeof player[skill] !== "undefined" && !player[skill].paused) {
    return false;
  }
  return true;
};
/**
 * @param {string} key
 * @return {undefined}
 */
var playerRewind = function(key) {
  if (player[key].currentTime > 15) {
    if (player[key].currentTime - 15 < bookData[key].items[bookData[key].chapterId].time_from_start) {
      bookData[key].chapterId--;
      setCurrentChapter(key, bookData[key].chapterId, bookData[key].items);
    }
    /** @type {number} */
    player[key].currentTime = player[key].currentTime - 15;
  } else {
    /** @type {number} */
    player[key].currentTime = 0;
  }
};
/**
 * @param {string} id
 * @return {undefined}
 */
var playerForward = function(id) {
  if (bookData[id].items.length - 1 != bookData[id].chapterId && player[id].duration - player[id].currentTime < 15) {
    var secondTime = bookData[id].items[bookData[id].chapterId].time;
    loadPlayer(id, secondTime, "", isPaused(id) ? "pause" : "play");
  } else {
    player[id].currentTime = player[id].currentTime + 15;
  }
};
/**
 * @return {undefined}
 */
var restoreBook = function() {
  /** @type {(null|number)} */
  var processedItem = $.cookie("a_lastbid") != null ? parseInt($.cookie("a_lastbid")) : null;
  if ($(".jpl.player")[0] || processedItem == null) {
    return;
  }
  setPlayer(processedItem);
};
/**
 * @param {string} name
 * @param {number} value
 * @return {undefined}
 */
var setPercent = function(name, value) {
  if (!$.isNumeric(value)) {
    var total = bookData[name].items[bookData[name].items.length - 1].time;
    /** @type {number} */
    var startTime = Math.floor(player[name].currentTime);
    /** @type {number} */
    var cumTotal = bookData[name].chapterId == 0 ? startTime : startTime + bookData[name].items[bookData[name].chapterId - 1].time - bookData[name].items[bookData[name].chapterId].time_from_start;
    /** @type {number} */
    value = Math.ceil(cumTotal / total * 100);
    if (value > 100) {
      /** @type {number} */
      value = 100;
    }
  }
  $(".book-id-" + name + " .percent-number span").text(value + "%");
  $("article[data-bid=" + name + "] .caption__article-duration .percent-number").text(value + "% \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0430\u043d\u043e");
  $("article[data-bid=" + name + "] .wrapper--history-menu .icon-percent").remove();
  $("article[data-bid=" + name + "] .wrapper--history-menu").prepend(icon_progress(value == 100 ? "check" : "percent"));
  if (value == 0) {
    $(".book-id-" + name + " .circular-chart").addClass("hidden");
  } else {
    $(".book-id-" + name + " .circular-chart").removeClass("hidden");
    $(".book-id-" + name + " .circle-path").attr({
      "stroke-dasharray" : value + ",100"
    });
  }
};
/**
 * @param {string} data
 * @return {undefined}
 */
var getBookPosition = function(data) {
  /** @type {number} */
  var feature = $.cookie("a_pos_" + data) != null ? parseInt($.cookie("a_pos_" + data)) : 0;
  /** @type {number} */
  var target = feature;
  if ($(".layout--user-role-user")[0]) {
    if ($("article").attr("data-his") !== undefined) {
      /** @type {number} */
      var digits = parseInt($("article").attr("data-his"));
      if (digits > feature) {
        target = digits;
      }
    } else {
      ls.ajax.load(aRouter["history"] + "ajax_getpos", {
        gid : data
      }, function(report4) {
        /** @type {number} */
        digits = parseInt(report4.pos);
        if (report4.hstate && digits && digits > feature) {
          /** @type {number} */
          target = digits;
        } else {
        }
        target = target > 15 ? target : 0;
        loadPlayer(data, target);
        return;
      }, {
        showProgress : false
      });
    }
  }
  target = target > 15 ? target : 0;
  loadPlayer(data, target);
};
/**
 * @param {string} i
 * @param {string} key
 * @return {undefined}
 */
var setBookPosition = function(i, key) {
  if (bookData[i].preview_url) {
    return;
  }
  /** @type {number} */
  var type = Math.floor(player[i].currentTime);
  /** @type {number} */
  var t = bookData[i].chapterId == 0 ? type : type + bookData[i].items[bookData[i].chapterId - 1].time - bookData[i].items[bookData[i].chapterId].time_from_start;
  if (key != "cookie") {
    /** @type {number} */
    var current = Math.ceil(parseInt(t) / parseInt(bookData[i].items[bookData[i].items.length - 1].time) * 100);
    var data = {
      gid : i,
      topic_id : bookData[i].topic_id,
      pos : t,
      percent : current
    };
    ls.ajax.load(aRouter["history"] + "ajax_setpos", data, function() {
    }, {
      showProgress : false
    });
    $(".book-id-" + i + " .cover__wrapper--history-buttons span").removeClass("hidden");
  }
  $.cookie("a_pos_" + i, t, {
    expires : 30,
    path : "/"
  });
};
/**
 * @param {string} type
 * @param {number} ratio
 * @return {undefined}
 */
var changeDurationData = function(type, ratio) {
  var PANEL_WINDOW_MENU_THUMBNAIL_SIZE = bookData[type].items[bookData[type].items.length - 1].time;
  /** @type {number} */
  var candidatesWidth = ratio > 1 ? PANEL_WINDOW_MENU_THUMBNAIL_SIZE / ratio : PANEL_WINDOW_MENU_THUMBNAIL_SIZE * (2 - ratio);
  /** @type {number} */
  var i = Math.floor(candidatesWidth / 3600);
  /** @type {number} */
  var value = Math.floor(candidatesWidth % 3600 / 60);
  /** @type {string} */
  var r = ((ratio - 1) * 100).toFixed();
  var commentElm = $(".book-duration-" + type);
  $(".hours", commentElm).text(i > 0 ? ls.i18n.pluralize(i, "time.hours_declension") : "");
  $(".minutes", commentElm).text(value > 0 ? ls.i18n.pluralize(value, "time.minutes_declension") : "");
  if (ratio != 1) {
    $(".rate", commentElm).text("(" + (r > 1 ? "-" + r + "%" : "+" + Math.abs(r) + "%") + ")");
  } else {
    $(".rate", commentElm).text("");
  }
};
/**
 * @param {string} type
 * @return {undefined}
 */
var adoptButtons = function(type) {
  var $allPanels = $(".menu__player--wrapper.book-id-" + type + " .player--buttons");
  $allPanels.removeClass("player--buttons-onefile");
  if (bookData[type].items.length == 1) {
    $allPanels.addClass("player--buttons-onefile");
    $(".book-id-" + type + " .js-block-chapters").hide();
  }
};
/**
 * @param {string} device
 * @param {string} icon
 * @return {undefined}
 */
var chapterSetIcon = function(device, icon) {
  $(".player--chapters[data-bid=" + device + "] .chapter__default[data-id=" + bookData[device].chapterId + "] .chapter__default--button").html(icon);
};
/**
 * @param {string} key
 * @param {number} time
 * @param {string} data
 * @param {string} state
 * @return {undefined}
 */
var loadPlayer = function(key, time, data, state) {
  /** @type {number} */
  var m = 0;
  /** @type {number} */
  var currentTime = 0;
  data = data || "";
  state = state || "pause";
  /** @type {string} */
  var value = !player_bid || player_bid == key ? "none" : "none";
  /** @type {boolean} */
  var i = false;
  var results = bookData[key].items;
  if (time >= results[results.length - 1].time) {
    /** @type {number} */
    time = results[results.length - 1].time - 1;
  }
  if (data == "" && time <= results[results.length - 1].time) {
    /** @type {number} */
    var i = 0;
    for (; i < results.length; i++) {
      if (time < results[i].time) {
        /** @type {number} */
        bookData[key].chapterId = i;
        data = results[i].file;
        break;
      }
    }
    if (data == 1) {
      /** @type {number} */
      currentTime = time;
    } else {
      currentTime = time - results[bookData[key].chapterId - 1].time + results[bookData[key].chapterId].time_from_start;
    }
    console.log(data + " " + bookData[key].chapterId + " " + time + " " + currentTime);
  } else {
    if ($.isNumeric(data)) {
      /** @type {number} */
      currentTime = 0;
      console.log(data + " " + bookData[key].chapterId + " " + time + " " + currentTime);
    } else {
      /** @type {number} */
      bookData[key].chapterId = 0;
      /** @type {number} */
      data = 1;
      /** @type {number} */
      currentTime = 0;
    }
  }
  if (state == "play") {
    $(".book-id-" + key + " .button__player--play").addClass("playing");
    chapterSetIcon(key, icon_play);
  }
  setCurrentChapter(key, bookData[key].chapterId, results);
  var target = data < 10 ? "0" + data : data;
  /** @type {number} */
  var val = $.cookie("a_rate_" + key) != null ? parseFloat($.cookie("a_rate_" + key)) : 1;
  user_rates[key] = val;
  var opts = {
    controls : false,
    keyboard : {
      focused : false,
      global : false
    }
  };
  /**
   * @param {!Object} element
   * @return {undefined}
   */
  var init = function(element) {
    element.playbackRate = user_rates[key];
    element.volume = user_volume;
    init_buttons(key);
    changeDurationData(key, element.playbackRate);
    animationUnloader(key);
    if (currentTime) {
      /** @type {number} */
      var remaining = parseInt(currentTime - results[bookData[key].chapterId].time_from_start);
      /** @type {number} */
      var pct = remaining / results[bookData[key].chapterId].duration * 100 || 0;
      $(".book-id-" + key + " .player-time-current").html(secondsToHMS(remaining));
      $(".book-id-" + key + " .progress__bar--player").slider("value", pct);
      $(".book-id-" + key + " .chapter__current .chapter__default--progress").css("width", pct + "%");
      var duration = bookData[key].items[bookData[key].items.length - 1].time;
      var draggingTimeBase = bookData[key].chapterId == 0 ? currentTime : currentTime + bookData[key].items[bookData[key].chapterId - 1].time - bookData[key].items[bookData[key].chapterId].time_from_start;
      /** @type {number} */
      var realVal = Math.ceil(draggingTimeBase / duration * 100);
      setPercent(key, realVal);
    }
    element.addEventListener("loadeddata", function() {
      if (currentTime > 0 && currentTime <= element.duration) {
        element.currentTime = currentTime;
      }
    });
    element.addEventListener("canplaythrough", function() {
      fileUnloader(key);
      /** @type {boolean} */
      i = true;
    });
    element.addEventListener("play", function() {
      scrollToCurrentChapter(key);
      if (currentTime > 0 && element.currentTime == 0 && element.duration == 0) {
        /** @type {number} */
        var a = 0;
        /** @type {number} */
        var chat_retry = setInterval(function() {
          a++;
          if (element.duration > 0 || a > 15) {
            element.currentTime = currentTime;
            /** @type {number} */
            currentTime = 0;
            clearInterval(chat_retry);
          }
        }, 1000);
      }
      $(".book-id-" + key + " .button__player--play").addClass("playing");
      chapterSetIcon(key, icon_play);
      animationUnloader(key);
      $.cookie("a_lastbid", key, {
        expires : 3,
        path : "/"
      });
      setPercent(key);
      setBookPosition(key);
      if (!i) {
        fileLoader(key);
      } else {
        fileUnloader(key);
        /** @type {boolean} */
        i = true;
      }
      if (timerDuration) {
        if (typeof timer !== "object") {
          window.timer = new setTimer(function() {
            element.pause();
            removeTimer(key);
          }, timerDuration);
        } else {
          timer.resume();
        }
      }
    });
    element.addEventListener("playing", function() {
      if (!i) {
        setTimeout(function() {
          if (element.currentTime > currentTime) {
            fileUnloader(key);
            /** @type {boolean} */
            i = true;
          }
        }, 2000);
      }
    });
    element.addEventListener("seeking", function() {
      if (i) {
        fileLoader(key);
      }
    });
    element.addEventListener("seeked", function() {
      scrollToCurrentChapter(key);
      if (i) {
        fileUnloader(key);
      }
      /** @type {number} */
      var total_pageviews_raw = element.currentTime - results[bookData[key].chapterId].time_from_start;
      if (total_pageviews_raw < 0) {
        return;
      }
      $(".book-id-" + key + " .player-time-current").html(secondsToHMS(parseInt(total_pageviews_raw)));
      setPercent(key);
    });
    element.addEventListener("pause", function() {
      console.log("pause");
      scrollToCurrentChapter(key);
      animationUnloader(key);
      $(".book-id-" + key + " .button__player--play").removeClass("playing");
      chapterSetIcon(key, icon_pause);
      setPercent(key);
      setBookPosition(key);
      if (typeof timer === "object") {
        timer.pause();
      }
    });
    element.addEventListener("timeupdate", function() {
      var currentTime = element.currentTime;
      if (currentTime <= 0) {
        return;
      }
      if (currentTime >= results[bookData[key].chapterId].time_finish) {
        if (bookData[key].chapterId != results.length - 1 && results[bookData[key].chapterId].file == results[bookData[key].chapterId + 1].file) {
          bookData[key].chapterId++;
          setCurrentChapter(key, bookData[key].chapterId, results);
          scrollToCurrentChapter(key);
          setPercent(key);
        }
        return;
      }
      /** @type {number} */
      var dt = currentTime - results[bookData[key].chapterId].time_from_start;
      if (dt < -1) {
        /** @type {number} */
        dt = 0;
        /** @type {number} */
        var i = 0;
        for (; i < results.length; i++) {
          if (results[i].file == results[bookData[key].chapterId].file && currentTime < results[i].time_finish) {
            /** @type {number} */
            bookData[key].chapterId = i;
            setCurrentChapter(key, bookData[key].chapterId, results);
            scrollToCurrentChapter(key);
            setPercent(key);
            break;
          }
        }
        return;
      }
      /** @type {number} */
      dt = parseInt(dt);
      /** @type {number} */
      var pct = dt / results[bookData[key].chapterId].duration * 100 || 0;
      setBookPosition(key, "cookie");
      $(".book-id-" + key + " .player-time-current").html(secondsToHMS(dt));
      $(".book-id-" + key + " .progress__bar--player").slider("value", pct);
      $(".book-id-" + key + " .chapter__current .chapter__default--progress").css("width", pct + "%");
    });
    element.addEventListener("ended", function() {
      if (bookData[key].chapterId != results.length - 1) {
        bookData[key].chapterId++;
        data++;
        loadPlayer(key, draggingTimeBase, data, "play");
        scrollToCurrentChapter(key);
      } else {
        setPercent(key, 100);
        $(".book-id-" + key + " .player-time-duration").html($(".book-id-" + key + " .player-time-current").html());
        removeTimer(key);
        $.removeCookie("a_lastbid", {
          path : "/"
        });
      }
      setBookPosition(key);
    });
    element.addEventListener("volumechange", function() {
      user_volume = element.volume.toFixed(2);
      $.cookie("a_volume", element.volume.toFixed(2), {
        expires : 365,
        path : "/"
      });
      /** @type {string} */
      var index = (element.volume * 100).toFixed();
      $(".volume_value").html(index + "%");
      $(".volume-size").removeClass("active");
      if (index > 10 && index < 40) {
        $(".volume-s1").addClass("active");
      } else {
        if (index >= 40 && index < 80) {
          $(".volume-s1,.volume-s2").addClass("active");
        } else {
          if (index >= 80) {
            $(".volume-s1,.volume-s2,.volume-s3").addClass("active");
          }
        }
      }
    });
    element.addEventListener("ratechange", function() {
      val = element.playbackRate.toFixed(2);
      user_rates[key] = val;
      if (val == 1) {
        $.removeCookie("a_rate_" + key, {
          path : "/"
        });
      } else {
        $.cookie("a_rate_" + key, val, {
          expires : 30,
          path : "/"
        });
      }
      /** @type {string} */
      var frame = ((element.playbackRate - 1) * 100).toFixed();
      if (frame == 0) {
        $(".book-id-" + key + " .speed_value, .mobile__popup--speed[data-bid=" + key + "] .speed_value").html("1x");
        $(".js-topic .book-id-" + key + " .speed__hor .speed_value").html("\u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c");
      } else {
        $(".book-id-" + key + " .speed_value, .mobile__popup--speed[data-bid=" + key + "] .speed_value").html(frame > 1 ? "+" + frame + "%" : frame + "%");
      }
      changeDurationData(key, val);
    });
  };
  if (!player[key] || bookData[key].current_mfileId != data) {
    if (player[key]) {
      player[key].pause();
      /** @type {string} */
      player[key].src = "";
      player[key].load();
      $(".jpl[data-bid=" + key + "]").remove();
      delete player[key];
    }
    $(".jpl.empty").clone().attr("data-bid", key).insertAfter($(".jpl").last());
    $(".jpl[data-bid=" + key + "]").removeClass("empty");
    if (key == player_bid) {
      $(".jpl[data-bid=" + key + "]").addClass("player");
    }
    animationLoader();
    bookData[key].current_mfileId = data;
    if (value == "none" && currentTime > 0) {
      /** @type {string} */
      value = "auto";
    }
    /** @type {string} */
    var d = bookData[key].srv + "b/" + key + "/" + bookData[key].key + "/" + target + ". " + bookData[key].title + ".mp3";
    if (bookData[key].preview_url) {
      d = bookData[key].preview_url;
    }
    $(".jpl[data-bid=" + key + "] audio").attr("preload", value).attr("src", d).attr("title", bookData[key].titleonly);
    player[key] = $(".jpl[data-bid=" + key + "] audio")[0];
    init(player[key]);
  } else {
    player[key].currentTime = currentTime;
  }
  if (state == "play") {
    player[key].play();
  } else {
    player[key].pause();
  }
};
/**
 * @return {undefined}
 */
var unloadPlayer = function() {
  removeTimer(player_bid);
  if (typeof bo[player_bid] !== "undefined") {
    bo[player_bid].pause();
    bo[player_bid].destroy();
    delete bo[player_bid];
  }
  /** @type {string} */
  player_bid = "";
  var menuMaxDepth = $(".menu__player--wrapper").attr("data-bid");
  $(".menu__player--wrapper,.player__wrapper--bar").removeClass("book-id-" + menuMaxDepth);
  $(".menu__player--wrapper .player--buttons button,.player__wrapper--bar .button__player--play").unbind("click");
  $(".menu__player--wrapper").attr("class", "menu__player--wrapper");
  $(".menu__player--content-chapters,.menu__player--wrapper .player__speed").removeAttr("data-bid");
  $(".player__wrapper--bar").removeClass("buttons-open open");
  $(".player__title--main .wrapper, .player__wrapper--bar--caption, .player__wrapper--bar--author").empty();
  $(".player__picture").css("background-image", "url()");
  $(".menu__player--content .cover__wrapper--image").css("background-image", "");
  $(".menu__player--content--chapter,.player__title--small").empty();
  $(".menu__player--wrapper .tooltips, .js-book-data").empty();
  $(".menu__player--wrapper,.player__wrapper--bar").addClass("unloaded");
  $(".menu__player--wrapper").removeClass("open");
  $("body").removeClass("player-open no-overflow");
  if ($(".jpl.player")[0] == undefined) {
    return;
  }
  var i = $(".jpl.player").attr("data-bid");
  player[i].pause();
  /** @type {string} */
  player[i].src = "";
  player[i].load();
  $(".jpl.player").remove();
  delete player[i];
};
/**
 * @param {string} item
 * @return {undefined}
 */
var setPlayer = function(item) {
  if (player_bid) {
    unloadPlayer();
  }
  $(".menu__player--wrapper,.player__wrapper--bar").addClass("book-id-" + item);
  $(".menu__player--wrapper,.player__wrapper--bar,.menu__player--wrapper .player__speed,.menu__player--content-chapters").attr("data-bid", item);
  $(".player__wrapper--bar").addClass("open");
  loadBookData(item, "player");
  $(".jpl[data-bid=" + item + "]").addClass("player");
  if (item == page_bid) {
    $(".menu__player--wrapper").addClass("samepage");
  }
};
/**
 * @return {undefined}
 */
var init_player_bookpage = function() {
  /** @type {number} */
  page_bid = parseInt($("article").attr("data-bid"));
  var BottomEl = $("article").attr("data-shopid");
  if (typeof BottomEl == "undefined") {
    restoreBook();
  }
  if (player_bid == page_bid) {
    $(".menu__player--wrapper").addClass("samepage");
  } else {
    $(".menu__player--wrapper").removeClass("samepage");
  }
  if ($(".js-topic").length == 0 || !page_bid || $(".js-topic").hasClass("book--item--closed")) {
    return;
  }
  if ($(".content__main__book--item.playlist--hidden")[0]) {
    enquire.register("screen and (max-width:768px)", {
      match : function() {
        $(".wrapper--history-menu").insertAfter($(".mobile__button--play"));
      },
      unmatch : function() {
        $(".wrapper--history-menu").insertAfter($(".caption__article-main-mobile--container"));
      }
    });
  }
  $(".js-playlist-show").on("click", function(canCreateDiscussions) {
    $(".content__main__book--item").toggleClass("playlist--hidden playlist--show");
    if ($(this).attr("data-mode") == 0) {
      $(this).attr("data-mode", 1);
      $.removeCookie("a_playlist_hide", {
        path : "/"
      });
      $("span", this).html("\u0421\u043a\u0440\u044b\u0442\u044c \u0433\u043b\u0430\u0432\u044b");
      $(".wrapper--history-menu").insertAfter($(".caption__article-main-mobile--container"));
      scrollToCurrentChapter(page_bid);
    } else {
      $(this).attr("data-mode", 0);
      $.cookie("a_playlist_hide", 1, {
        expires : 365,
        path : "/"
      });
      $("span", this).html("\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435");
      $(".wrapper--history-menu").insertAfter($(".mobile__button--play"));
    }
  });
  $(".bookpage--chapters.player--chapters").attr("data-bid", page_bid);
  if (typeof BottomEl != "undefined") {
    var liveReloadOptions = $("article").attr("data-shopkey") || null;
    if (typeof Biblio == "undefined") {
      if (window.location.search == "?biblio_test") {
        $.when($.getScript("https://pub-cdn.bibliovk.ru/referals/wgt4.js"), $.getScript("/application/frontend/skin/acl/assets/js/player_biblio.js"), $.Deferred(function(e) {
          $(e.resolve);
        })).done(function() {
          init_player_biblio(page_bid, BottomEl, liveReloadOptions);
        });
      } else {
        $.getScript("https://akniga.org/wgt1.js?v=16", function() {
          init_player_biblio(page_bid, BottomEl, liveReloadOptions);
          if (liveReloadOptions && typeof $("article").attr("data-shopuserid") === "undefined" && bo[page_bid]._bl != null) {
            ls.ajax.load(aRouter["ajax"] + "setshopuserdata", {
              data : bo[page_bid]._bl.user_id
            }, function() {
            }, {
              showProgress : false
            });
          }
        });
      }
    } else {
      init_player_biblio(page_bid, BottomEl, liveReloadOptions);
    }
    return;
  }
  if (window.location.search == "?player_stop") {
    return;
  }
  if ($(".jpl[data-bid=" + page_bid + "]")[0]) {
    animationUnloader(page_bid);
    init_buttons(page_bid);
    init_sliders_bookpage(page_bid);
    setChapters(page_bid, "book");
    $(".book-id-" + page_bid).removeClass("unloaded");
    if (isPaused(page_bid)) {
    } else {
      $(".book-id-" + page_bid + " .button__player--play").addClass("playing");
    }
    setCurrentChapter(page_bid, bookData[page_bid].chapterId, bookData[page_bid].items);
    changeDurationData(page_bid, player[page_bid].playbackRate);
    adoptButtons(page_bid);
    scrollToCurrentChapter(page_bid);
    setPercent(page_bid);
  } else {
    loadBookData(page_bid, "book");
    init_sliders_bookpage(page_bid);
  }
  $(".jpl:not(.player,.empty)").each(function() {
    if ($(this).attr("data-bid") != page_bid) {
      var name = $(this).attr("data-bid");
      /** @type {string} */
      player[name].src = "";
      player[name].load();
      $(this).remove();
      delete player[name];
    }
  });
  if (isMobile) {
    $(".player__volume,.volume__hor").remove();
    $(".speed__hor").css("width", "80%");
    $(".player--buttons-book .player__timer").css("width", "16%");
    $(".menu__player--wrap .player__speed").css("width", "80px");
    $(".player--buttons-book").css("width", "62%");
  }
};
/**
 * @param {string} id
 * @return {undefined}
 */
var init_sliders_bookpage = function(id) {
  $(".content__main__book--item .volume__hor").slider({
    range : "min",
    value : user_volume * 100,
    classes : {
      "ui-slider-range" : "volume__hor--track"
    },
    animate : "fast",
    slide : function(type, name) {
      if (!player[id]) {
        return;
      }
      var value = name.value.toFixed();
      /** @type {number} */
      player[id].volume = value / 100;
      if (player_bid) {
        if (player_bid != id) {
          /** @type {number} */
          player[player_bid].volume = value / 100;
        }
        $(".player__volume .player__slider").slider("value", value);
      }
    }
  });
  $(".volume__hor .volume_value").html((user_volume * 100).toFixed() + "%");
  $(".content__main__book--item .volume__hor--value").html((user_volume * 100).toFixed() + "%");
  /** @type {number} */
  var command_module_id = $.cookie("a_rate_" + id) != null ? parseFloat($.cookie("a_rate_" + id)) : 1;
  $(".content__main__book--item .speed__hor").slider({
    range : "min",
    max : 2,
    min : 0,
    value : command_module_id,
    step : .05,
    classes : {
      "ui-slider-range" : "speed__hor--track"
    },
    animate : "fast",
    slide : function(type, name) {
      if (!player[id]) {
        return;
      }
      player[id].playbackRate = name.value;
      if (player_bid) {
        $(".player__speed .player__slider").slider("value", name.value);
      }
    }
  });
  speed_init("article");
  $("article .player__timer").on("click", function(event) {
    event.stopPropagation();
    $(".mobile__popup--timer").addClass("open");
  });
  if ($(".book-id-" + id + " .player__wrapper .player__timer.run")[0]) {
    $("article .player__timer").addClass("run");
  }
  /** @type {string} */
  var frame = ((command_module_id - 1) * 100).toFixed();
  if (frame == 0) {
  } else {
    $(".book-id-" + id + " .speed_value").html(frame > 1 ? "+" + frame + "%" : frame + "%");
  }
};
/**
 * @param {string} type
 * @param {string} name
 * @return {undefined}
 */
var setChapters = function(type, name) {
  if (name == "player") {
    /** @type {string} */
    var t = ".menu__player--content-chapters .global__popup--content";
    var rootDiv = $(".bookpage--chapters.player--chapters[data-bid=" + type + "]");
    if ($(".chapter__default", rootDiv).attr("data-pos")) {
      console.log("bookPlaylist already loaded, copying");
      $(t).html($(rootDiv).html());
      init_chapters(type);
      return;
    } else {
      var $span = $(t + " .chapter__default");
      $span.eq(0).removeClass("chapter__current");
      var svg = $span[0].outerHTML;
      $span.remove();
      $.each(bookData[type].items, function(data, e) {
        if (e.cat) {
          $(t).append('<div class="folder_separator">' + e.cat + "</div>");
        }
        $(t).append(svg).html();
        var target = $(t + " .chapter__default").eq(data);
        target.attr("data-pos", e.time - e.duration);
        target.attr("data-id", data);
        $(".chapter__default--title", $(t + " .chapter__default").eq(data)).html(e.title);
        $(".chapter__default--time", $(t + " .chapter__default").eq(data)).html(secondsToHMS(e.duration));
      });
    }
  }
  init_chapters(type);
};
/**
 * @param {string} id
 * @param {number} index
 * @param {!NodeList} data
 * @return {undefined}
 */
var setCurrentChapter = function(id, index, data) {
  /** @type {number} */
  var oldIndex = parseInt($(".player--chapters[data-bid=" + id + "] .chapter__current").attr("data-id"));
  var dt = data[index].duration;
  if (oldIndex != index) {
    $(".book-id-" + id + " .player-time-current").text("00:00");
    $(".book-id-" + id + " .progress__bar--player").slider("value", 0);
  }
  $(".book-id-" + id + " .player-time-duration").text(secondsToHMS(dt));
  var $deepPage = $(".book-id-" + id + " .progress__bar--player");
  $deepPage.attr("data-pos-start", data[index].time_from_start);
  $deepPage.attr("data-pos-end", data[index].time_finish);
  var listOfConnections = $(".player--chapters[data-bid=" + id + "]");
  var node = $(".player--chapters[data-bid=" + id + "] .chapter__default[data-id=" + index + "]");
  $(".chapter__default--button, .chapter__default--progress, .chapter__default--time span", listOfConnections).remove();
  $(".chapter__current", listOfConnections).removeClass("chapter__current");
  $(node).addClass("chapter__current");
  $(node).prepend('<div class="chapter__default--button">' + (!isPaused(id) ? icon_play : "") + "</div>");
  $(node).append('<div class="chapter__default--progress"></div>');
  $(".chapter__default--time", node).prepend('<span><span class="player-time-current">00:00</span> / </span>');
  $(".book-id-" + id + " .book--chapter-current-title").text($(".chapter__default--title", node).first().text());
  $(".book-id-" + id + " .book--chapter-current").text("\u0427\u0430\u0441\u0442\u044c " + (index + 1) + " \u0438\u0437 " + data.length);
  $(".book-id-" + id + " .content__main__book--item--chapter span").text(index + 1);
  var detailViewItem = $(".book-id-" + id + " .progress__bar--progress, .book-id-" + id + " .progress__bar--player .progress__bar--pin");
  if (data[index].duration < 100) {
    detailViewItem.addClass("smooth-transition");
  } else {
    $(".book-id-" + id + " .progress__bar--progress, .book-id-" + id + " .progress__bar--player .progress__bar--pin").removeClass("smooth-transition");
  }
};
/**
 * @param {string} id
 * @return {undefined}
 */
var init_buttons = function(id) {
  var section = bookData[id].items;
  $(".book-id-" + id + " .button__player--play").off("click").on("click", function(event) {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    if (id == player_bid) {
      if (player[id].paused) {
        player[id].play();
      } else {
        player[id].pause();
      }
    } else {
      setPlayer(id);
      player[id].play();
    }
  });
  $(".book-id-" + id + " .button__player--back").off("click").on("click", function(event) {
    event.preventDefault();
    event.stopPropagation();
    if (bookData[id].chapterId == 0) {
      /** @type {number} */
      player[id].currentTime = 0;
      return;
    }
    if (player[id].currentTime > section[bookData[id].chapterId].time_from_start + 5 && section[bookData[id].chapterId].file == section[bookData[id].chapterId - 1].file) {
      /** @type {number} */
      var r = parseInt($($(".player--chapters[data-bid=" + id + "] .chapter__default")[bookData[id].chapterId]).attr("data-pos"));
    } else {
      /** @type {number} */
      var linkIndex = parseInt(bookData[id].chapterId) - 1;
      /** @type {number} */
      r = parseInt($($(".player--chapters[data-bid=" + id + "] .chapter__default")[linkIndex]).attr("data-pos"));
    }
    loadPlayer(id, r, "", isPaused(id) ? "pause" : "play");
  });
  $(".book-id-" + id + " .button__player--forward").off("click").on("click", function(event) {
    event.preventDefault();
    event.stopPropagation();
    if (bookData[id].chapterId != section.length - 1) {
      /** @type {number} */
      var linkIndex = parseInt(bookData[id].chapterId) + 1;
      /** @type {number} */
      var expireTime = parseInt($($(".player--chapters[data-bid=" + id + "] .chapter__default")[linkIndex]).attr("data-pos"));
      loadPlayer(id, expireTime, "", isPaused(id) ? "pause" : "play");
    }
  });
  $(".book-id-" + id + " .button__player--back-text").off("click").on("click", function(event) {
    event.preventDefault();
    event.stopPropagation();
    playerRewind(id);
  });
  $(".book-id-" + id + " .button__player--forward-text").off("click").on("click", function(event) {
    event.preventDefault();
    event.stopPropagation();
    playerForward(id);
  });
};
/**
 * @param {string} id
 * @return {undefined}
 */
var init_sliders = function(id) {
  $(".menu__player--block .progress__bar--player").slider({
    range : "min",
    value : 0,
    step : .001,
    classes : {
      "ui-slider" : "",
      "ui-slider-handle" : "progress__bar--pin",
      "ui-slider-range" : "progress__bar--progress"
    },
    animate : false,
    slide : function(type, name) {
      /** @type {number} */
      var i = parseInt($(".book-id-" + id + " .progress__bar--player").attr("data-pos-start"));
      /** @type {number} */
      var currentBlockNumber = parseInt($(".book-id-" + id + " .progress__bar--player").attr("data-pos-end"));
      /** @type {number} */
      var curr = i + (currentBlockNumber - i) / 100 * name.value;
      /** @type {number} */
      player[id].currentTime = curr;
      /** @type {number} */
      var ms = curr - bookData[id].items[bookData[id].chapterId].time_from_start;
      $(".book-id-" + id + " .player-time-current").html(secondsToHMS(parseInt(ms)));
    }
  });
  $(".player__volume .player__slider").slider({
    range : "min",
    orientation : "vertical",
    value : user_volume * 100,
    classes : {
      "ui-slider-range" : "player__slider--value"
    },
    animate : "fast",
    slide : function(type, name) {
      if (!player[id]) {
        return;
      }
      var value = name.value.toFixed();
      /** @type {number} */
      player[id].volume = value / 100;
      if (page_bid) {
        /** @type {number} */
        player[page_bid].volume = value / 100;
      }
      $(".volume__hor").slider("value", value);
    }
  });
  $(".volume_value").html((user_volume * 100).toFixed() + "%");
  /** @type {number} */
  var command_module_id = $.cookie("a_rate_" + id) != null ? parseFloat($.cookie("a_rate_" + id)) : 1;
  $(".player__speed .player__slider").slider({
    range : "min",
    max : 2,
    min : 0,
    orientation : "vertical",
    value : command_module_id,
    step : .05,
    classes : {
      "ui-slider-range" : "player__slider--value"
    },
    animate : "fast",
    slide : function(type, name) {
      if (!player[id]) {
        return;
      }
      player[id].playbackRate = name.value;
      $(".book-id-" + id + " .speed__hor").slider("value", name.value);
    }
  });
  /** @type {string} */
  var frame = ((command_module_id - 1) * 100).toFixed();
  if (frame == 0) {
    $(".book-id-" + id + " .speed_value").html("1x");
    $(".js-topic .book-id-" + id + " .speed__hor .speed_value").html("\u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c");
  } else {
    $(".book-id-" + id + " .speed_value").html(frame > 1 ? "+" + frame + "%" : frame + "%");
  }
};
/**
 * @param {string} key
 * @return {undefined}
 */
var init_chapters = function(key) {
  $(".player--chapters[data-bid=" + key + "] .chapter__default").off("click").on("click", function(event) {
    event.stopPropagation();
    event.stopImmediatePropagation();
    /** @type {number} */
    var expireTime = parseInt($(this).attr("data-pos"));
    /** @type {number} */
    var item_index = parseInt($(this).attr("data-id"));
    if (key == player_bid) {
      if (bookData[key].chapterId == item_index) {
        event.preventDefault();
        var current = bookData[key].items[item_index].time_from_start;
        var pages = bookData[key].items[item_index].time_finish;
        /** @type {number} */
        var slideWidth = (event.pageX - $(this).offset().left) / $(this).outerWidth() * 100;
        /** @type {number} */
        var target = parseInt(current + (pages - current) / 100 * slideWidth);
        /** @type {number} */
        player[key].currentTime = target;
        $(".book-id-" + key + " .player-time-current").html(secondsToHMS(target - current));
        $(".chapter__default--progress", this).css("width", slideWidth + "%");
      } else {
        loadPlayer(key, expireTime, "", "play");
      }
    } else {
      if (bookData[key].chapterId != item_index) {
        loadPlayer(key, expireTime, "", "play");
      }
      setPlayer(key);
      player[key].play();
    }
  });
};
/** @type {string} */
var pjax = "";
/** @type {number} */
var window_width = 0;
/** @type {boolean} */
var isPlayerInitDesktop = false;
/** @type {boolean} */
var isPlayerInitMobile = false;
/**
 * @return {undefined}
 */
var themeSwitcher_init = function() {
  $(".button--night").on("click", function(event) {
    event.preventDefault();
    $("body").toggleClass("theme-night");
    var $realtime = $("#onoffnight");
    $realtime.prop("checked", !$realtime.prop("checked"));
    $.cookie("a_nightmode", $("body").hasClass("theme-night"), {
      expires : 365,
      path : "/"
    });
  });
};
/**
 * @param {string} themeName
 * @return {undefined}
 */
var switchUserColorScheme = function(themeName) {
  if (themeName == "dark") {
    $("body").addClass("theme-night");
    $("#onoffnight").prop("checked", true);
  } else {
    $("body").removeClass("theme-night");
    $("#onoffnight").prop("checked", false);
  }
};
/**
 * @return {undefined}
 */
var setupUserColorScheme = function() {
  const closeable = $.cookie("a_nightmode");
  const settings = window.matchMedia("(prefers-color-scheme: dark)");
  if (closeable !== undefined) {
    switchUserColorScheme(closeable == "true" ? "dark" : "light");
    return;
  }
  if (!window.matchMedia) {
    return;
  }
  if (settings.matches) {
    switchUserColorScheme("dark");
  }
  settings.addListener(function() {
    switchUserColorScheme(settings.matches ? "dark" : "light");
  });
};
/**
 * @param {!Event} event
 * @param {string} t
 * @return {undefined}
 */
var showPopupWindow = function(event, t) {
  event.stopPropagation();
  event.stopImmediatePropagation();
  event.preventDefault();
  $("body").addClass("no-overflow");
  $("." + t).addClass("open");
  $("." + t).parent().find(".global__popup").addClass("open");
};
/**
 * @return {undefined}
 */
var desktop_player_init = function() {
  if (isPlayerInitDesktop == true) {
    return;
  }
  /** @type {boolean} */
  isPlayerInitDesktop = true;
  ls.auth.init();
  searchform_init();
  themeSwitcher_init();
  $(".player__volume, .player__speed").on("click", function(event) {
    event.stopPropagation();
    $(".user--name,.menu__user").removeClass("open");
    $(this).toggleClass("active");
  });
  $(".mobile__popup--timer").on("click", function(event) {
    event.stopPropagation();
    $(".mobile__popup--timer").removeClass("open");
  });
  $(".menu__player--block,.mobile__popup--content").on("click", function(event) {
    event.stopPropagation();
    event.stopImmediatePropagation();
  });
  $(".player__desktop").on("click", function(event) {
    event.stopPropagation();
    $(".player__volume,.player__speed").removeClass("active");
    $(".menu__player--block").toggleClass("open");
  });
  $(".menu__player--content .button__open").on("click", function(event) {
    event.stopPropagation();
    $(this).toggleClass("open");
    $(".menu__player--content-chapters").toggleClass("open").scrollTo($(".menu__player--content-chapters .chapter__current").get(0).offsetTop, 100);
  });
  $(".js-button-login").on("click", function(e) {
    showPopupWindow(e, "global__popup--auth");
  });
  $(document).on("click", function() {
    close_elements();
  });
  playerShortcuts();
  timer_init();
  setupUserColorScheme();
  $(".js-side-hide").on("click", function(canCreateDiscussions) {
    $("body").toggleClass("layout--side-folded");
    $.cookie("a_sidehide", $("body").hasClass("layout--side-folded") ? 1 : 0, {
      expires : 365,
      path : "/"
    });
  });
};
/**
 * @return {undefined}
 */
var mobile_player_init = function() {
  if (isPlayerInitMobile == true) {
    return;
  }
  /** @type {boolean} */
  isPlayerInitMobile = true;
  ls.auth.init();
  $(".player__wrapper--fade").on("click touchmove", function(canCreateDiscussions) {
    if ($("body").hasClass("player-open")) {
      close_popups();
    }
  });
  themeSwitcher_init();
  $(".menu__mobile").on("click", function() {
    $("#menu__mobile,.menu__mobile").toggleClass("open");
    $(".container__side").removeClass("open");
    $("body").toggleClass("no-overflow");
  });
  $("#menu__mobile").on("click", function(jEvent) {
    if ($(jEvent.target).is("#menu__mobile")) {
      $("#menu__mobile,.menu__mobile").removeClass("open");
      $("body").removeClass("no-overflow");
    }
  });
  $(".button-comments").on("click", function() {
    $(".container__side").toggleClass("open");
    $("#menu__mobile,.menu__mobile").removeClass("open");
    $(".container__side--wrapper").scrollTop(0);
    $("body").toggleClass("no-overflow");
  });
  $(".container__side").on("click", function(jEvent) {
    if (!$(jEvent.target).is(".container__side")) {
      return false;
    }
    $(this).removeClass("open");
  });
  $(".container__side--button--close").on("click", function() {
    close_popups();
  });
  $(".menu__player--content-chapters,.mobile__popup--speed").on("touchmove", function(event) {
    event.stopPropagation();
  });
  $(".mobile__button--close--chapters").on("click", function(event) {
    event.stopPropagation();
    $(".player__wrapper--bar").removeClass("hidden");
    $("body").removeClass("no-overflow");
    $(".menu__player--content-chapters").removeClass("open");
  });
  $(".mobile__popup--button--save,.mobile__button--close, .mobile__popup--speed,.mobile__popup--timer").on("click", function(event) {
    event.stopPropagation();
    $(".mobile__popup--speed,.mobile__popup--timer").removeClass("open");
  });
  $(".mobile__popup--content").on("click", function(event) {
    event.stopPropagation();
  });
  $(".menu__player--wrapper").on("click touchmove", function(event) {
    if ($(this).hasClass("open")) {
      event.preventDefault();
      event.stopPropagation();
    }
  });
  $(".js-close-player").on("click", function(event) {
    event.stopPropagation();
    if (confirm("\u0417\u0430\u043a\u0440\u044b\u0442\u044c \u043f\u043b\u0435\u0435\u0440 \u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435?")) {
      unloadPlayer();
      $.removeCookie("a_lastbid", {
        path : "/"
      });
    }
  });
  $(".player__wrapper--bar .button__player--play,.player__wrapper--bar .button__player").on("touchstart", function(event) {
    event.stopPropagation();
  });
  $(".player__wrapper--bar").on("click", function(event) {
    event.preventDefault();
    $("#menu__mobile,.menu__mobile,.container__side").removeClass("open");
    $(".player__wrapper--bar").toggleClass("buttons-open");
    $(".menu__player--wrapper").toggleClass("open");
    $("body").toggleClass("player-open");
    $("body").toggleClass("no-overflow");
  });
  searchform_init();
  $(".js-button-login").on("click", function(e) {
    showPopupWindow(e, "global__popup--auth");
  });
  if (document.body.classList.contains("layout--user-role-user")) {
    $(document).on("touchmove", function() {
      $(".wrapper--history-menu").removeClass("open");
    });
  }
  timer_init();
  speed_init(".menu__player--wrapper");
  setupUserColorScheme();
  document.addEventListener("visibilitychange", handleVisibilityChange, false);
};
/**
 * @return {undefined}
 */
var timer_init = function() {
  $(".menu__player--wrapper .player__timer").on("click", function(event) {
    event.stopPropagation();
    $(".mobile__popup--timer").addClass("open");
  });
  $(".timer__control").on("click", function(event) {
    event.stopPropagation();
    event.stopImmediatePropagation();
    /** @type {number} */
    var value = parseInt($(".timer__hours").attr("data-val"));
    /** @type {number} */
    var c = parseInt($(".timer__minutes").attr("data-val"));
    /** @type {number} */
    var w = c + value * 60;
    if ($(this).parent().hasClass("timer__minutes")) {
      /** @type {number} */
      w = $(this).attr("val") == "plus" ? w + 5 : w - 5;
    } else {
      /** @type {number} */
      w = $(this).attr("val") == "plus" ? w + 60 : w - 60;
    }
    if (w <= 0) {
      return;
    }
    /** @type {number} */
    value = Math.floor(w / 60);
    /** @type {number} */
    c = w % 60;
    $(".timer__hours").attr("data-val", value);
    $(".timer__hours .timer__text").html(value + "<span>" + ls.i18n.pluralize(value, "time.hours_declension").replace(/\d+/g, "") + "</span>");
    $(".timer__minutes").attr("data-val", c);
    $(".timer__minutes .timer__text").html(c + "<span>" + ls.i18n.pluralize(c, "time.minutes_declension").replace(/\d+/g, "") + "</span>");
  });
  $(".mobile__popup--timer .mobile__popup--content--button").on("click", function(canCreateDiscussions) {
    if ($(this).hasClass("button-start")) {
      /** @type {number} */
      var t = parseInt($(".timer__minutes").attr("data-val")) + parseInt($(".timer__hours").attr("data-val")) * 60;
      /** @type {number} */
      timerDuration = t * 60 * 1000;
      $(".mobile__popup--timer,.player__timer").addClass("run");
      if (player_bid && player[player_bid] && !player[player_bid].paused) {
        window.timer = new setTimer(function() {
          player[player_bid].pause();
          removeTimer(player_bid);
        }, timerDuration);
      }
      if (player_bid && bo[player_bid] && bo[player_bid].getPlayerState() == "playing") {
        window.timer = new setTimer(function() {
          bo[player_bid].pause();
          removeTimer(player_bid);
        }, timerDuration);
      }
      $(this).removeClass("button-start").addClass("button-stop").html("\u0421\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u0442\u0430\u0439\u043c\u0435\u0440");
    } else {
      removeTimer(player_bid);
    }
  });
};
/**
 * @param {string} a
 * @return {undefined}
 */
var speed_init = function(a) {
  $(a + " .player__speed").off("click").on("click", function(event) {
    event.stopPropagation();
    var i = $(this).attr("data-bid");
    var _this = $(".mobile__popup--speed");
    if (typeof _this.slider() !== "undefined" || _this.attr("data-bid") != i) {
      _this.slider("destroy");
    }
    _this.attr("data-bid", i);
    i = $(this).attr("data-bid");
    var command_module_id = user_rates[i] || 1;
    /** @type {string} */
    var frame = ((command_module_id - 1) * 100).toFixed();
    if (frame == 0) {
      $(".speed_value", _this).html("1x");
    } else {
      $(".speed_value", _this).html(frame > 1 ? "+" + frame + "%" : frame + "%");
    }
    $(".mobile__popup--speed--slider").slider({
      range : "min",
      max : 2,
      min : 0.1,
      value : command_module_id,
      step : .05,
      classes : {
        "ui-slider-handle" : "progress__bar--pin"
      },
      animate : "fast",
      slide : function(type, name) {
        if (player[i]) {
          player[i].playbackRate = name.value;
        } else {
          if (bo[i]) {
            bo[i].setPlaybackRate(name.value);
          } else {
            return;
          }
        }
        $(".book-id-" + i + " .speed__hor").slider("value", name.value);
      }
    });
    $(".speed__control").off("click").on("click", function() {
      /** @type {number} */
      var dy = $(this).attr("val") == "plus" ? 0.05 : -0.05;
      /** @type {number} */
      user_rates[i] = parseFloat(user_rates[i]) + dy;
      $(".speed__control").removeClass("speed-max");
      if (user_rates[i] <= 0.5) {
        /** @type {number} */
        user_rates[i] = 0.5;
        $(this).addClass("speed-max");
      }
      if (user_rates[i] >= 2) {
        /** @type {number} */
        user_rates[i] = 2;
        $(this).addClass("speed-max");
      }
      if (player[i]) {
        player[i].playbackRate = user_rates[i];
      } else {
        if (bo[i]) {
          bo[i].setPlaybackRate(user_rates[i]);
        } else {
          return;
        }
      }
      $(".mobile__popup--speed--slider").slider("value", user_rates[i]);
    });
    $(".mobile__popup--speed").addClass("open");
  });
};
/**
 * @return {undefined}
 */
function searchform_init() {
  $(".menu__search input").on("click", function(event) {
    event.stopPropagation();
    event.stopImmediatePropagation();
    if (!$(this).parent().hasClass("active")) {
      $(this).parent().toggleClass("active");
      $(this).parent().find("input").focus();
    }
  });
  $(".menu__search .button-search").on("click", function(event) {
    event.stopPropagation();
    event.stopImmediatePropagation();
    if (!$(this).parent().hasClass("active")) {
      $(this).parent().addClass("active");
      $(this).parent().find("input").focus();
      event.preventDefault();
    }
  });
  $(".menu__search .button-close").on("click", function() {
    $(this).parent().removeClass("active");
  });
}
/**
 * @return {undefined}
 */
function close_elements() {
  if ($(".menu__player--block").hasClass("open")) {
    $(".menu__player--block,.menu__player--content .button__open,.menu__player--content-chapters").removeClass("open");
  }
  $(".user--name,.menu__user,.wrapper--history-menu,.global__popup,.global__popup--chapter,.global__popup--window").removeClass("open");
  $(".menu__search,.player__volume,.player__speed").removeClass("active");
  $("body").removeClass("no-overflow");
  $("main").removeClass("onfront");
}
/**
 * @return {undefined}
 */
var close_popups = function() {
  $("body").removeClass("no-overflow player-open");
  $("main").removeClass("onfront");
  $(".player__wrapper--bar").removeClass("buttons-open hidden");
  $("#menu__mobile,.menu__mobile,.container__side,.popup .open,.menu__player--wrapper,.menu__player--block,.menu__player--content-chapters,.mobile__popup--speed,.mobile__popup--timer").removeClass("open");
};
/**
 * @return {undefined}
 */
function handleVisibilityChange() {
  if (document.hidden) {
    close_popups();
    if ($.isNumeric(player_bid) && typeof setPercent !== "undefined") {
      setPercent(player_bid);
    }
    if (typeof bo !== "undefined" && bo[player_bid] !== undefined) {
      b_setCurrentChapter(player_bid, bo[player_bid].getCurrentTrack(), bo[player_bid].getTracksMeta());
      scrollToCurrentChapter(player_bid);
    }
  }
}
/**
 * @return {undefined}
 */
var initialize = function() {
  ls.hook.run("ls_template_init_start", [], window);
  ls.init({
    production : true
  });
  ls.dev.init();
  $(".js-form-validate").parsley();
  $(".js-search-hideable").lsSearchHideable();
  $(".ls-nav--root.ls-nav--pills > .ls-nav-item--has-children").lsDropdown({
    selectors : {
      toggle : "> .ls-nav-item-link",
      text : "> .ls-nav-item-link > .ls-nav-item-text",
      menu : "> .ls-nav--sub"
    },
    selectable : true
  });
  $(".js-confirm-remove-default").livequery(function() {
    $(this).lsConfirm({
      message : ls.lang.get("common.remove_confirm")
    });
  });
  ls.notification.init();
  $(".js-modal-default").lsModal();
  $(".js-modal-toggle-default").lsModalToggle();
  $(".js-details-default").lsDetails();
  $(".js-dropdown-default").livequery(function() {
    $(this).lsDropdown();
  });
  $(".js-toggle-abc").on("click", function() {
    $(".icon-arrow", this).toggleClass("icon-arrow-up");
    $(this).next(".list-inline").toggle();
  });
  $(".js-field-geo-default").lsFieldGeo({
    urls : {
      regions : aRouter.ajax + "geo/get/regions/",
      cities : aRouter.ajax + "geo/get/cities/"
    }
  });
  $(".js-field-date-default").livequery(function() {
    $(this).lsDate({
      language : LANGUAGE
    });
  });
  $(".js-field-time-default").livequery(function() {
    $(this).lsTime();
  });
  $("[data-type=captcha]").livequery(function() {
    $(this).lsCaptcha();
  });
  $("[data-type=recaptcha]").livequery(function() {
    $(this).lsReCaptcha({
      key : ls.registry.get("recaptcha.site_key")
    });
  });
  $(".js-alert").lsAlert();
  if (!isMobile) {
    $(".ls-tooltip").remove();
    $(".js-title-topic").lsTooltip({
      position : {
        my : "right-15 center",
        at : "left center"
      },
      show : {
        delay : 1500
      }
    });
  }
  $(".autocomplete-tags").lsAutocomplete({
    multiple : false,
    urls : {
      load : aRouter.ajax + "autocompleter/tag/"
    }
  });
  $(".autocomplete-tags-sep").lsAutocomplete({
    multiple : true,
    urls : {
      load : aRouter.ajax + "autocompleter/tag/"
    }
  });
  $(".autocomplete-authors-sep").lsAutocomplete({
    multiple : true,
    urls : {
      load : aRouter.ajax + "autocompleter/author/"
    }
  });
  $(".autocomplete-performers-sep").lsAutocomplete({
    multiple : true,
    urls : {
      load : aRouter.ajax + "autocompleter/performer/"
    }
  });
  $(".autocomplete-users").lsAutocomplete({
    multiple : false,
    urls : {
      load : aRouter.ajax + "autocompleter/user/"
    }
  });
  $(".autocomplete-users-sep").lsAutocomplete({
    multiple : true,
    urls : {
      load : aRouter.ajax + "autocompleter/user/"
    }
  });
  $(".autocomplete-booktitle-sep").lsAutocomplete({
    multiple : true,
    urls : {
      load : aRouter.ajax + "autocompleter/book_title/"
    }
  });
  $(".autocomplete-bookseries-sep").lsAutocomplete({
    multiple : true,
    urls : {
      load : aRouter.ajax + "autocompleter/book_series/"
    }
  });
  $(".autocomplete-property-tags").each(function(canCreateDiscussions, galleryitem) {
    $(galleryitem).lsAutocomplete({
      multiple : false,
      urls : {
        load : aRouter.ajax + "property/tags/autocompleter/"
      },
      params : {
        property_id : $(galleryitem).data("propertyId")
      }
    });
  });
  $(".autocomplete-property-tags-sep").each(function(canCreateDiscussions, galleryitem) {
    $(galleryitem).lsAutocomplete({
      multiple : true,
      urls : {
        load : aRouter.ajax + "property/tags/autocompleter/"
      },
      params : {
        property_id : $(galleryitem).data("propertyId")
      }
    });
  });
  $(".js-block-default").lsBlock();
  $(".js-activity--all").lsActivity({
    urls : {
      more : aRouter.stream + "get_more_all"
    }
  });
  $(".js-activity--user").lsActivity({
    urls : {
      more : aRouter.stream + "get_more_user"
    }
  });
  $(".js-activity--personal").lsActivity({
    urls : {
      more : aRouter.stream + "get_more_personal"
    },
    create : function() {
      $(".js-activity-settings").lsActivitySettings({
        urls : {
          toggle_type : aRouter.stream + "switchEventType"
        }
      });
      $(".js-activity-users").lsUserListAdd({
        urls : {
          add : aRouter.stream + "ajaxadduser",
          remove : aRouter.stream + "ajaxremoveuser",
          list : aRouter.ajax + "modal-friend-list"
        }
      });
    }
  });
  $(".js-feed-blogs").lsFeedBlogs({
    urls : {
      subscribe : aRouter.feed + "subscribe",
      unsubscribe : aRouter.feed + "unsubscribe"
    }
  });
  $(".js-feed-users").lsUserListAdd({
    urls : {
      add : aRouter.feed + "ajaxadduser",
      remove : aRouter.feed + "unsubscribe",
      list : aRouter.ajax + "modal-friend-list"
    }
  });
  $(".js-search-ajax-users").lsSearchAjax({
    urls : {
      search : aRouter.people + "ajax-search/"
    },
    i18n : {
      title : ls.lang.get("user.search.result_title")
    },
    selectors : {
      list : ".js-more-users-container",
      more : ".js-more-search",
      title : "@.js-user-list-search-title"
    },
    filters : [{
      type : "text",
      name : "sText",
      selector : ".js-search-text-main"
    }, {
      type : "radio",
      name : "sex",
      selector : ".js-search-ajax-user-sex"
    }, {
      type : "checkbox",
      name : "is_online",
      selector : ".js-search-ajax-user-online"
    }, {
      type : "sort",
      name : "sort_by",
      selector : ".js-search-sort-menu li"
    }, {
      type : "select",
      name : "country",
      selector : ".js-field-geo-country"
    }, {
      type : "select",
      name : "region",
      selector : ".js-field-geo-region"
    }, {
      type : "select",
      name : "city",
      selector : ".js-field-geo-city"
    }],
    afterupdate : function(dragListGroup, event) {
      event.context.getElement("more").lsMore("option", "params.next_page", 2);
    }
  });
  $(".js-user-follow").lsUserFollow({
    urls : {
      follow : aRouter["stream"] + "ajaxadduser/",
      unfollow : aRouter["stream"] + "ajaxremoveuser/"
    }
  });
  $(".js-user-friend").lsUserFriend({
    urls : {
      add : aRouter.profile + "ajaxfriendadd/",
      remove : aRouter.profile + "ajaxfrienddelete/",
      accept : aRouter.profile + "ajaxfriendaccept/",
      modal : aRouter.profile + "ajax-modal-add-friend"
    }
  });
  $(".js-biblio-subscribe").on("click", function(event) {
    event.preventDefault();
    event.stopPropagation();
    showPopupWindow(event, "global__popup--subscribe");
  });
  $(".js-biblio-subscribe-go").on("click", function(canCreateDiscussions) {
    var GET_USER_PROFILE_SUCCESS = $(".global__popup--subscribe .subscription--list input:checked").val();
    ls.ajax.load(aRouter["paid"] + "subscribe", {
      type : GET_USER_PROFILE_SUCCESS,
      url : window.location.href
    }, function() {
    });
  });
  $(".js-user-report").lsReport({
    urls : {
      modal : aRouter.profile + "ajax-modal-complaint",
      add : aRouter.profile + "ajax-complaint-add"
    }
  });
  $(".js-user-fields").lsUserFields();
  $(".js-user-photo").lsPhoto({
    urls : {
      upload : aRouter.settings + "ajax-upload-photo",
      remove : aRouter.settings + "ajax-remove-photo",
      crop_photo : aRouter.settings + "ajax-modal-crop-photo",
      crop_avatar : aRouter.settings + "ajax-modal-crop-avatar",
      save_photo : aRouter.settings + "ajax-crop-photo",
      save_avatar : aRouter.settings + "ajax-change-avatar",
      cancel_photo : aRouter.settings + "ajax-crop-cancel-photo"
    },
    changeavatar : function(theN, response, isApi) {
      $(".js-user-profile-avatar, .js-wall-entry[data-user-id=" + response.option("params.target_id") + "] .ls-comment-avatar img").attr("src", isApi["64crop"] + "?" + Math.random());
      $(".ls-userbar-user-nav-avatar").attr("src", isApi["48crop"] + "?" + Math.random());
    }
  });
  $(".js-talk-list").lsTalkList();
  $(".js-talk-add-user-choose").lsUserFieldChoose({
    urls : {
      modal : aRouter.ajax + "modal-friend-list"
    }
  });
  $(".js-talk-search-form").lsDetails();
  $(".js-favourite-talk").lsFavourite({
    urls : {
      toggle : aRouter["ajax"] + "favourite/talk/"
    }
  });
  $(".js-favourite-topic").lsFavourite({
    urls : {
      toggle : aRouter["ajax"] + "favourite/topic/"
    }
  });
  $(".js-favourite-author").lsFavourite({
    urls : {
      toggle : aRouter["ajax"] + "favourite/author/"
    }
  });
  $(".js-favourite-performer").lsFavourite({
    urls : {
      toggle : aRouter["ajax"] + "favourite/performer/"
    }
  });
  $(".js-vote-topic").lsVote({
    urls : {
      vote : aRouter["ajax"] + "vote/topic/"
    }
  });
  $(".js-vote-author").lsVote({
    urls : {
      vote : aRouter["ajax"] + "vote/author/"
    }
  });
  $(".js-vote-performer").lsVote({
    urls : {
      vote : aRouter["ajax"] + "vote/performer/"
    }
  });
  $(".table-authors").on("click", "tbody tr", function(event) {
    event.preventDefault();
    var data = $(this).find(".cell-name a").attr("href");
    if (data) {
      pjax.loadUrl(data);
    }
  });
  commentsInit();
  if ($(".js-topic-comments")[0]) {
    if ($(".js-topic-comments").hasClass("comments-loaded")) {
      sortComments();
      setTimeout(function() {
        scrollToComment(window.location.search);
      }, 2E3);
    } else {
      ls.ajax.load(aRouter["ajax"] + "comment/load_list", {
        target_id : parseInt($("#comments").attr("data-target-id"))
      }, function(e) {
        if (e.sText) {
          $(".js-comment-list").append(e.sText);
          $("#comments").addClass("comments-loaded");
          $("#comments").attr("data-comment-last-id", e.lastCommentId);
          sortComments();
          setTimeout(function() {
            scrollToComment(window.location.search);
          }, 1000);
          commentsInit(location.hash);
          var ll1 = new LazyLoad({
            elements_selector : "#comments .lazy"
          });
          pjax.refresh();
          newCommentsFadeInit();
        }
      }, {
        showProgress : false
      });
    }
  }
  $(".js-sort-comments").on("click", function(event) {
    event.preventDefault();
    var t = $(this).data("type");
    sortComments(t);
    $.cookie("a_commentsort", t, {
      expires : 365,
      path : "/"
    });
  });
  $(".js-talk-message-root-favourite").on("click", function(e) {
    if (e.target == e.currentTarget) {
      $(this).find(".js-favourite-talk").lsFavourite("toggle");
    }
  });
  $(".js-message-users").lsTalkUsers();
  $(".js-user-list-add-blacklist").lsUserListAdd({
    urls : {
      add : aRouter["talk"] + "ajaxaddtoblacklist/",
      remove : aRouter["talk"] + "ajaxdeletefromblacklist/",
      list : aRouter.ajax + "modal-friend-list"
    }
  });
  if ($(".js-activity-feed-settings")[0]) {
    $(".js-activity-feed-settings").lsFeedSettings({
      urls : {
        toggle_type : aRouter.stream + "switchEventType"
      }
    });
  }
  $.livestreet.lsEditorVisual.prototype.options.sets.common.content_css = PATH_SKIN + "/components/editor/css/tinymce-content.css";
  $(".js-editor-default").lsEditor();
  $(".js-blog-join").livequery(function() {
    $(this).lsBlogJoin({
      urls : {
        toggle : aRouter.blog + "ajaxblogjoin"
      },
      classes : {
        loading : ls.options.classes.states.loading
      }
    });
  });
  $(".js-blog-profile-join").lsBlogJoin({
    urls : {
      toggle : aRouter.blog + "ajaxblogjoin"
    },
    selectors : {
      text : "a"
    },
    classes : {
      active : "active"
    }
  });
  $(".js-search-ajax-blog").lsSearchAjax({
    urls : {
      search : aRouter.blogs + "ajax-search/"
    },
    i18n : {
      title : ls.lang.get("blog.search.result_title")
    },
    selectors : {
      list : ".js-more-blogs-container",
      more : ".js-more-search",
      title : "@.js-blog-list-search-title"
    },
    filters : [{
      type : "text",
      name : "sText",
      selector : ".js-search-text-main"
    }, {
      type : "radio",
      name : "type",
      selector : ".js-search-ajax-blog-type"
    }, {
      type : "radio",
      name : "relation",
      selector : ".js-search-ajax-blog-relation"
    }, {
      type : "list",
      name : "category",
      selector : "#js-search-ajax-blog-category li"
    }, {
      type : "sort",
      name : "sort_by",
      selector : ".js-search-sort-menu li"
    }],
    afterupdate : function(dragListGroup, event) {
      event.context.getElement("more").lsMore("option", "params.next_page", 2);
    }
  });
  $(".js-search-ajax-author").lsSearchAjax({
    urls : {
      search : aRouter.authors + "ajax-search/"
    },
    i18n : {
      title : ls.lang.get("author.search.result_title")
    },
    selectors : {
      list : ".js-more-author-container",
      more : ".js-more-search",
      title : "@.js-author-list-search-title"
    },
    filters : [{
      type : "text",
      name : "sText",
      selector : ".js-search-text-main"
    }, {
      type : "sort",
      name : "sort_by",
      selector : ".js-search-sort-menu li"
    }],
    afterupdate : function(dragListGroup, event) {
      event.context.getElement("more").lsMore("option", "params.next_page", 2);
      $(".paging").hide();
    }
  });
  $(".js-search-ajax-performer").lsSearchAjax({
    urls : {
      search : aRouter.performers + "ajax-search/"
    },
    i18n : {
      title : ls.lang.get("performer.search.result_title")
    },
    selectors : {
      list : ".js-more-performer-container",
      more : ".js-more-search",
      title : "@.js-performer-list-search-title"
    },
    filters : [{
      type : "text",
      name : "sText",
      selector : ".js-search-text-main"
    }, {
      type : "sort",
      name : "sort_by",
      selector : ".js-search-sort-menu li"
    }],
    afterupdate : function(dragListGroup, event) {
      event.context.getElement("more").lsMore("option", "params.next_page", 2);
      $(".paging").hide();
    }
  });
  $(".js-blog-avatar").lsPhoto({
    urls : {
      upload : aRouter.blog + "ajax/upload-avatar",
      remove : aRouter.blog + "ajax/remove-avatar",
      crop_photo : aRouter.blog + "ajax/modal-crop-avatar",
      save_photo : aRouter.blog + "ajax/crop-avatar",
      cancel_photo : aRouter.blog + "ajax/crop-cancel-avatar"
    },
    use_avatar : false,
    crop_photo : {
      minSize : [100, 100],
      usePreview : true
    }
  });
  $(".js-topic").lsTopic();
  $("#topic-add-form").lsTopicAdd({
    max_blog_count : ls.registry.get("topic_max_blog_count")
  });
  $(".js-pagination-topics").lsPagination({
    hash : {
      next : "goTopic=first",
      prev : "goTopic=last"
    }
  });
  $(".js-comments-talk").lsComments({
    urls : {
      add : aRouter["talk"] + "ajaxaddcomment/",
      load : aRouter["talk"] + "ajaxresponsecomment/"
    }
  });
  /** @type {boolean} */
  var yaxispos = false;
  /** @type {boolean} */
  var mode = false;
  /** @type {number} */
  window_width = window.innerWidth;
  /**
   * @param {number} x
   * @param {number} y
   * @return {undefined}
   */
  var update = function(x, y) {
    if (y !== undefined && (y < 769 && x < 769 || y > 768 && x > 768)) {
      return;
    }
    refresh(x);
    $(".mobile__popup--speed,.mobile__popup--timer").removeClass("open");
    if (mode == false && x > 768) {
      /** @type {boolean} */
      mode = true;
      desktop_player_init();
      if (!$(".updown").data("defined")) {
        $(".updown .icon").addClass("icon-arrow-up");
        /** @type {string} */
        var direction = "up";
        /** @type {boolean} */
        var editorMaximized = false;
        /** @type {number} */
        scrollPos = 0;
        /**
         * @return {undefined}
         */
        backToTop = function() {
          var contentVisibleHeight = $(window).scrollTop();
          if (direction == "down") {
            if (!editorMaximized && contentVisibleHeight > 100) {
              /** @type {string} */
              direction = "up";
              $(".updown .icon").addClass("icon-arrow-up");
              /** @type {number} */
              scrollPos = 0;
            }
            return;
          }
          if (contentVisibleHeight > 100) {
            $(".updown").addClass("updown--shown");
          } else {
            $(".updown").removeClass("updown--shown");
          }
        };
        backToTop();
        window.addEventListener("scroll", function() {
          backToTop();
        }, {
          passive : true
        });
        $(".updown").on("click", function(event) {
          event.preventDefault();
          event.stopPropagation();
          /** @type {boolean} */
          editorMaximized = true;
          $(".updown .icon").toggleClass("icon-arrow-up");
          /** @type {string} */
          direction = $(".updown .icon").hasClass("icon-arrow-up") ? "up" : "down";
          $("html,body").animate({
            scrollTop : scrollPos
          }, 500, function() {
            /** @type {boolean} */
            editorMaximized = false;
          });
          if (direction == "down") {
            scrollPos = $(document).scrollTop();
          } else {
            /** @type {number} */
            scrollPos = 0;
          }
        });
        $(".updown").data("defined", true);
      }
      if (!$(".carousel-comments").hasClass("slick-initialized")) {
        $(".carousel-comments").slick({
          arrows : true,
          prevArrow : $(".slick-prev"),
          nextArrow : $(".slick-next")
        });
      }
    }
    if (yaxispos == false && x < 769) {
      /** @type {boolean} */
      yaxispos = true;
      mobile_player_init();
      window.addEventListener("scroll", function() {
        $(".scroll-to-top").css({
          opacity : $(window).scrollTop() > 200 ? 1 : 0
        });
      }, {
        passive : true
      });
      $(".scroll-to-top").on("click", function(canCreateDiscussions) {
        close_popups();
        $("html,body").animate({
          scrollTop : 0
        }, 150, function() {
          $(".scroll-to-top").css({
            opacity : 0
          });
        });
      });
      $(".user-profile-friends").insertAfter($(".user-profile-subscriptions")).addClass("content__main__articles--item").show();
    }
    enquire.register("screen and (min-width:769px)", {
      match : function() {
        $("#menu__mobile,.container__side").removeClass("open");
        $(".menu__player--wrapper").insertAfter($("header .menu__nav"));
      },
      unmatch : function() {
        $(".menu__player--wrapper").insertAfter($(".player__wrapper--bar"));
      }
    });
    enquire.register("screen and (max-width:769px)", {
      match : function() {
        $(".player__title--small").on("click", function(event) {
          event.preventDefault();
          event.stopPropagation();
          $(".menu__player--content-chapters").addClass("open");
          $("body").addClass("no-overflow");
          $(".global__popup--content").scrollTo($(".chapter__current").get(0).offsetTop - 95, 100);
          $(".player__wrapper--bar").addClass("hidden");
        });
      },
      unmatch : function() {
        $(".player__title--small").off("click");
      }
    });
  };
  /**
   * @param {number} url
   * @return {undefined}
   */
  var refresh = function(url) {
    if (url < 769) {
      $(".content__main__articles--item").each(function(canCreateDiscussions, first) {
        $(".article--cover", first).prependTo($(".description__article-main", first));
      });
    } else {
      $(".content__main__articles--item").each(function(canCreateDiscussions, target) {
        $(".description__article-main .article--cover", target).prependTo(target);
      });
    }
  };
  update(window_width);
  $(window).on("resize", function() {
    /** @type {number} */
    new_width = window.innerWidth;
    update(new_width, window_width);
    /** @type {number} */
    window_width = new_width;
  });
  $(".articles__selector > a").on("click", function() {
    $(".articles__selector .article--active").removeClass("article--active");
    $(this).toggleClass("article--active");
  });
  $(".show--hide").on("click", function() {
    var sortableContainer = $(this).closest(".content__main__side--items--pop");
    $("span", this).text(sortableContainer.hasClass("open") ? "\u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c" : "\u0441\u043a\u0440\u044b\u0442\u044c");
    $.cookie("a_hidepop", sortableContainer.hasClass("open") ? 1 : 0, {
      expires : 365,
      path : "/"
    });
    sortableContainer.toggleClass("open");
  });
  $(".content__main__side--item .show--more").on("click", function() {
    $(this).parent().find(".wrapper__hidden").slideDown("fast");
    $(this).hide();
  });
  $(".content__main__book--item .show--more").on("click", function() {
    $(this).parent().parent().find(".wrapper__hidden").slideDown("fast");
    $(this).parent().hide();
  });
  $(".content__main__book--item--series-list .link__action--showall").on("click", function() {
    $(this).parent().find(".s-hidden,.dots").slideToggle("fast");
    var $apiUri = $(".content__main__book--item--series-list .link__action--showall span");
    $apiUri.parent().find(".icon").toggleClass("icon-arrow-up");
    $apiUri.text($apiUri.text() == "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0435\u0441\u044c \u0441\u043f\u0438\u0441\u043e\u043a" ? "\u0421\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a" : "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0435\u0441\u044c \u0441\u043f\u0438\u0441\u043e\u043a");
  });
  $(".wrapper--history-menu").on("click", function(event) {
    event.stopPropagation();
    event.stopImmediatePropagation();
    event.preventDefault();
    $(this).toggleClass("open");
  });
  $(".link__action--chapter").on("click", function(event) {
    event.stopPropagation();
    event.stopImmediatePropagation();
    $(".global__popup--chapter").addClass("open");
    $(".global__popup--chapter").parent().find(".global__popup").addClass("open");
    /** @type {number} */
    var top = window_width < 769 ? 95 : 0;
    $(".global__popup--chapter .global__popup--content").scrollTo($(".global__popup--chapter .chapter__current").get(0).offsetTop - top, 100);
    $("body").addClass("no-overflow");
    $("main").addClass("onfront");
  });
  $(".global__button--close,.auth-extra").on("click", function(event) {
    event.stopPropagation();
    event.stopImmediatePropagation();
    $("body").removeClass("no-overflow");
    $("main").removeClass("onfront");
    $(this).closest(".popup").find(".open").removeClass("open");
  });
  $(".global__popup--chapter,.global__popup--window").on("click", function(event) {
    event.stopPropagation();
    event.stopImmediatePropagation();
  });
  $(".js-comment-form-locked,.layout--user-role-guest .ls-vote-item,.layout--user-role-guest .ls-favourite").on("click", function(e) {
    showPopupWindow(e, "global__popup--auth");
  });
  if ($(".chosen-container").length > 0) {
    $(".chosen-container").on("touchstart", function(event) {
      event.stopPropagation();
      event.preventDefault();
      $(this).trigger("mousedown");
    });
  }
  $(".content__main__articles--item-delete").on("click", function(event) {
    event.stopPropagation();
    event.stopImmediatePropagation();
    event.preventDefault();
    var selectFileBtn = $(this).closest(".content__main__articles--item");
    /** @type {number} */
    var i = parseInt(selectFileBtn.attr("data-bid"));
    if (confirm("\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u0438\u0437 \u0438\u0441\u0442\u043e\u0440\u0438\u0438?")) {
      ls.ajax.load(aRouter["history"] + "ajax_setdelete", {
        gid : i
      }, function(canCreateDiscussions) {
        if (canCreateDiscussions.fstate) {
          selectFileBtn.addClass("hidden");
        }
      }, {
        showProgress : true
      });
    }
  });
  $(".ls-comment-form textarea").on("focus", function(canCreateDiscussions) {
    /** @type {string} */
    this.style.height = "auto";
    /** @type {string} */
    this.style.height = this.scrollHeight + "px";
    $(this).closest("form").addClass("focused");
    $(this).closest("form").find($(".js-comment-form-preview")).show();
  });
  $("textarea:not(.autocomplete)").on("input", function(canCreateDiscussions) {
    /** @type {string} */
    this.style.height = "auto";
    /** @type {string} */
    this.style.height = this.scrollHeight + "px";
  });
  $("form").on("submit", function() {
    $("input", $(this)).blur();
  });
  $(".menu__search input").val("");
  $(".menu__search").removeClass("active");
  $(".menu__nav .button-user").removeClass("hidden");
  $(".uSpoilerClosed").on("click", function() {
    $(this).children(".uSpoilerText").toggle();
  });
  $(".spoiler-title").on("click", function() {
    $(this).nextAll(".spoiler-body").toggle();
  });
  $(".js-history-complete").on("click touchstart", function(event) {
    event.stopPropagation();
    event.preventDefault();
    var i = $(this).closest(".wrapper--history-menu").attr("data-bid");
    if (!i) {
      return false;
    }
    ls.ajax.load(aRouter["history"] + "ajax_setcomplete", {
      gid : i
    }, function(canCreateDiscussions) {
      if (canCreateDiscussions.fstate) {
        setPercent(i, 100);
        $(".wrapper--history-menu[data-bid=" + i + "] .js-history-complete").addClass("hidden");
        $(".wrapper--history-menu[data-bid=" + i + "] .js-history-delete").removeClass("hidden");
      }
    }, {
      showProgress : false
    });
  });
  $(".js-history-delete").on("click touchstart", function(event) {
    event.stopPropagation();
    event.preventDefault();
    var channelName = $(this).closest(".wrapper--history-menu").attr("data-bid");
    if (!channelName) {
      return false;
    }
    ls.ajax.load(aRouter["history"] + "ajax_setdelete", {
      gid : channelName
    }, function(canCreateDiscussions) {
      if (canCreateDiscussions.fstate) {
        setPercent(channelName, 0);
        $(".wrapper--history-menu[data-bid=" + channelName + "] .js-history-complete").removeClass("hidden");
        $(".wrapper--history-menu[data-bid=" + channelName + "] .js-history-delete").addClass("hidden");
        $.removeCookie("a_pos_" + channelName, {
          path : "/"
        });
      }
    }, {
      showProgress : false
    });
  });
  newCommentsFadeInit();
  $("#customPageForm").on("submit", function() {
    if (this.customPageId.value) {
      pjax.loadUrl(this.action.replace("__page__", this.customPageId.value));
    }
    return false;
  });
  ls.hook.run("ls_template_init_end", [], window);
};
/**
 * @return {undefined}
 */
var commentsInit = function() {
  var iceServer = {
    urls : {
      add : aRouter["blog"] + "ajaxaddcomment/",
      load : aRouter["blog"] + "ajaxresponsecomment/"
    },
    show_form : ls.registry.get("comment_show_form"),
    use_paging : ls.registry.get("comment_use_paging")
  };
  $(".js-topic-comments-list").lsComments(iceServer);
  if ($("#comments").hasClass("comments-loaded")) {
    $(".js-topic-comments").lsComments(iceServer);
  }
  $(".js-scroll-to-comment").on("click", function(event) {
    event.preventDefault();
    window.history.replaceState(null, null, $(this).attr("href"));
    scrollToComment("#comment" + $(this).closest(".js-comment").attr("data-id"));
  });
  $(".js-comment-reply-guest").on("click", function(e) {
    showPopupWindow(e, "global__popup--auth");
  });
};
/**
 * @param {string} section
 * @return {undefined}
 */
var scrollToComment = function(section) {
  if (section.indexOf("comment") != -1) {
    section = section.replace("?", "#");
    $("html,body").animate({
      scrollTop : $(section).offset().top - 60
    }, 400);
  }
};
/**
 * @return {undefined}
 */
var newCommentsFadeInit = function() {
  $(".ls-comment--new").on("click touchstart", function(canCreateDiscussions) {
    $(this).removeClass("ls-comment--new");
  });
};
/**
 * @param {string} parent
 * @return {undefined}
 */
var sortComments = function(parent) {
  if (typeof parent === "undefined" && $.cookie("a_commentsort") == null) {
    return;
  }
  parent = parent || $.cookie("a_commentsort");
  $(".js-sort-comments").removeClass("comment--active");
  $(".js-comment-list,.js-comment-list .js-comment-wrapper").each(function() {
    $(this).children(".js-comment-wrapper").sort(function(event, scope) {
      if (parent == 1) {
        return +event.dataset.id - +scope.dataset.id;
      } else {
        if (parent == 2) {
          return +scope.dataset.rating - +event.dataset.rating;
        } else {
          if (parent == 3) {
            return +scope.dataset.id - +event.dataset.id;
          }
        }
      }
    }).appendTo($(this));
  });
  $(".js-sort-comments[data-type=" + parent + "]").addClass("comment--active");
};
/** @type {(Array<string>|null)} */
var isMobile = navigator.userAgent.match(/(iPad)|(iPhone)|(iPod)|(android)|(webOS)/i);
/** @type {number} */
var startTime = 0;
/** @type {!Array} */
var moreSelectors = ["main", "title", ".ls-block-live-wrapper", ".header-title-text"];
if (document.body.classList.contains("layout--user-role-admin")) {
  moreSelectors.push(".ls-performance");
}
if (document.body.classList.contains("layout--user-role-user")) {
  moreSelectors.push(".pj-update");
}
pjax = new Pjax({
  elements : "a[href]:not(.no-pjax), form[action]:not(.no-pjax)",
  cacheBust : false,
  scrollRestoration : window.location.hash ? false : true,
  selectors : moreSelectors,
  switches : {
    "main" : Pjax.switches.innerHTML
  }
});
/**
 * @return {undefined}
 */
var playerShortcuts = function() {
  $("body").keydown(function(event) {
    if ($(event.target).is(":not(input, textarea)") && (player[player_bid] || bo[player_bid])) {
      switch(event.which) {
        case 32:
          event.preventDefault();
          if (player[player_bid]) {
            if (player[player_bid].paused) {
              player[player_bid].play();
            } else {
              player[player_bid].pause();
            }
          } else {
            if (bo[player_bid]) {
              if (bo[player_bid].getPlayerState() == "playing") {
                bo[player_bid].pause();
              } else {
                bo[player_bid].play();
              }
            }
          }
          break;
        case 37:
          event.preventDefault();
          if (player[player_bid]) {
            playerRewind(player_bid);
          } else {
            if (bo[player_bid]) {
              bo[player_bid].rw();
            }
          }
          break;
        case 39:
          event.preventDefault();
          if (player[player_bid]) {
            playerForward(player_bid);
          } else {
            if (bo[player_bid]) {
              bo[player_bid].ff();
            }
          }
          break;
        default:
          return;
      }
    }
  });
};
/**
 * @param {?} elem
 * @return {?}
 */
var isInViewport = function(elem) {
  let elementBottom = elem.offset().top;
  let elementTop = elementBottom + elem.outerHeight();
  let minTop = $(window).scrollTop();
  let maxTop = minTop + $(window).height();
  return elementTop > minTop && elementBottom < maxTop;
};
jQuery(document).ready(function(res) {
  /**
   * @return {undefined}
   */
  var loadingCompleted = function() {
    init_player_bookpage();
    initialize();
    var ll1 = new LazyLoad({
      elements_selector : ".lazy"
    });
  };
  loadingCompleted();
  if (document.body.classList.contains("layout--user-role-user")) {
    res.cookie("a_is_auth", 1, {
      expires : 365,
      path : "/"
    });
  }
  document.addEventListener("pjax:send", function() {
    NProgress.start();
    close_popups();
  });
  document.addEventListener("pjax:complete", function() {
    NProgress.done();
    if (window.ym) {
      ym(22013362, "hit", window.location.href, {
        title : document.title
      });
    }
    gtag("config", "G-77BK1YJVXT", {
      "page_path" : window.location.pathname
    });
  });
  document.addEventListener("pjax:success", loadingCompleted);
});
